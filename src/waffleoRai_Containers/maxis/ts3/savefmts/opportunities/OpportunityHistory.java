/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 12:53:27 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 19:20

package waffleoRai_Containers.maxis.ts3.savefmts.opportunities;

import java.io.IOException;
import java.io.Writer;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class OpportunityHistory extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Opportunities.OpportunityHistory
	
	public static final int COUNT_LAST_OPP = 9;

	public static final int PSID_MCOMPLETEDOPPORTUNITIESCOUNT = 0xFD37FB04;
	public static final int PSID_MCOMPLETEDOPPORTUNITIESKEYS = 0x91FE726E;
	public static final int PSID_MLASTOPPORTUNITIES = 0x02D9CE63;

	private static final String XMLKEY_MCOMPLETEDOPPORTUNITIESCOUNT = "CompletedOpportunitiesCount";
	private static final String XMLKEY_MCOMPLETEDOPPORTUNITIESKEYS = "CompletedOpportunitiesKeys";
	private static final String XMLKEY_MLASTOPPORTUNITIES = "LastOpportunities";
	private static final String XMLKEY_OPPHISTTRAVEL = "OppHistTravel";

	public int mCompletedOpportunitiesCount;
	public long[] mCompletedOpportunitiesKeys;
	public long[] mLastOpportunities;
	public OpportunityHistoryTravelling oppHistTravel;

	public OpportunityHistory() {
		xmlNodeName = "OpportunityHistory";
		baseSize = 20;
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mCompletedOpportunitiesCount = dat.nextInt();
		mCompletedOpportunitiesKeys = new long[mCompletedOpportunitiesCount];
		for(int i = 0; i < mCompletedOpportunitiesCount; i++){
			mCompletedOpportunitiesKeys[i] = dat.nextLong();
		}
		mLastOpportunities = new long[COUNT_LAST_OPP];
		for(int i = 0; i < COUNT_LAST_OPP; i++){
			mLastOpportunities[i] = dat.nextLong();
		}
		oppHistTravel = OpportunityHistoryTravelling.readBinary(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_MCOMPLETEDOPPORTUNITIESCOUNT);
		if(aval != null) mCompletedOpportunitiesCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MCOMPLETEDOPPORTUNITIESKEYS);
		if(child != null){
			mCompletedOpportunitiesKeys = new long[mCompletedOpportunitiesCount];
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int i = 0;
			for(Element gc : gclist){
				aval = gc.getAttribute("Value");
				if(aval != null) mCompletedOpportunitiesKeys[i] = StringUtils.parseUnsignedLong(aval);
				i++;
			}
		}
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MLASTOPPORTUNITIES);
		if(child != null){
			mLastOpportunities = new long[COUNT_LAST_OPP];
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int i = 0;
			for(Element gc : gclist){
				aval = gc.getAttribute(XMLKEY_MLASTOPPORTUNITIES);
				if(aval != null) mLastOpportunities[i] = OpportunityNames.valueFromString(aval);
				i++;
			}
		}
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "OpportunityHistoryTravelling", "VarName", XMLKEY_OPPHISTTRAVEL);
		if(child != null) oppHistTravel = OpportunityHistoryTravelling.readXMLNode(child);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mCompletedOpportunitiesCount = stream.getFieldAsInt(PSID_MCOMPLETEDOPPORTUNITIESCOUNT);
		mCompletedOpportunitiesKeys = stream.getFieldAsLongArray(PSID_MCOMPLETEDOPPORTUNITIESKEYS);
		mLastOpportunities = stream.getFieldAsLongArray(PSID_MLASTOPPORTUNITIES);
		oppHistTravel = OpportunityHistoryTravelling.readPropertyStream(stream);

		return true;
	}
	
	public static OpportunityHistory readBinary(BufferReference dat) {
		if(dat == null) return null;
		OpportunityHistory str = new OpportunityHistory();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static OpportunityHistory readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		OpportunityHistory str = new OpportunityHistory();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static OpportunityHistory readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static OpportunityHistory readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		OpportunityHistory str = new OpportunityHistory();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += (mCompletedOpportunitiesKeys.length * 8);
		size += (mLastOpportunities.length * 8);
		if(oppHistTravel != null) size += oppHistTravel.getBinarySize();
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		mCompletedOpportunitiesCount = mCompletedOpportunitiesKeys.length;
		target.addToFile(mCompletedOpportunitiesCount);
		for(int i = 0; i < mCompletedOpportunitiesCount; i++){
			target.addToFile(mCompletedOpportunitiesKeys[i]);
		}
		for(int i = 0; i < COUNT_LAST_OPP; i++){
			target.addToFile(mLastOpportunities[i]);
		}
		oppHistTravel.writeBinaryTo(target);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		mCompletedOpportunitiesCount = mCompletedOpportunitiesKeys.length;
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_MCOMPLETEDOPPORTUNITIESCOUNT, mCompletedOpportunitiesCount));
		out.write(">\n");
		out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MCOMPLETEDOPPORTUNITIESKEYS));
		for(int i = 0; i < mCompletedOpportunitiesCount; i++){
			out.write(indent + String.format("\t\t<ArrayMember Value=\"0x%016x\"/>\n", mCompletedOpportunitiesKeys[i]));
		}
		out.write(indent + "\t</Array>\n");
		out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MLASTOPPORTUNITIES));
		for(int i = 0; i < COUNT_LAST_OPP; i++){
			out.write(indent + String.format("\t\t<ArrayMember Value=\"%s\"/>\n", OpportunityNames.stringFromValue(mLastOpportunities[i])));
		}
		out.write(indent + "\t</Array>\n");
		if(oppHistTravel != null) oppHistTravel.writeXMLNode(out, indent + "\t", XMLKEY_OPPHISTTRAVEL);
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;

		mCompletedOpportunitiesCount = mCompletedOpportunitiesKeys.length;
		ps.addInt(mCompletedOpportunitiesCount, PSID_MCOMPLETEDOPPORTUNITIESCOUNT);
		ps.addLongArray(mCompletedOpportunitiesKeys, PSID_MCOMPLETEDOPPORTUNITIESKEYS);
		ps.addLongArray(mLastOpportunities, PSID_MLASTOPPORTUNITIES);
		if(oppHistTravel != null) oppHistTravel.addToPropertyStream(ps);
	}
	
}
