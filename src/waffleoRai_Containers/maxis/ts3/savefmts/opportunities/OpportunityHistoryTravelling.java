/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 12:53:27 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 19:41

package waffleoRai_Containers.maxis.ts3.savefmts.opportunities;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.WorldName;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.event.EventListenerExportInfo;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class OpportunityHistoryTravelling extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Opportunities.OpportunityHistory

	public static final int PSID_MCURRENTOPPORTUNITIES = 0xC7B97486;
	public static final int PSID_CURRENTOPPORTUNITIESCOUNT = 0xD455224C;
	public static final int PSID_HASHADADVENTURE = 0x08C07E3F;

	private static final String XMLKEY_MCURRENTOPPORTUNITIES = "CurrentOpportunities";
	private static final String XMLKEY_CURRENTOPPORTUNITIESCOUNT = "CurrentOpportunitiesCount";
	private static final String XMLKEY_HASHADADVENTURE = "HasHadAdventure";

	public ArrayList<OppExportInfo> mCurrentOpportunities = new ArrayList<OppExportInfo>();
	public int currentOpportunitiesCount;
	public boolean hasHadAdventure;

	public OpportunityHistoryTravelling() {
		xmlNodeName = "OpportunityHistoryTravelling";
		baseSize = 5;
	}
	
	/*----- Inner Classes -----*/

	public static class OppExportInfo extends TS3Saveable{
		
		public static final int TRGI_NUM_ITEM_REQ_LEN = 0;
		public static final int CHAIN_LEN = 0;

		public static final int PSID_GUID = 0xD7F8BA77;
		public static final int PSID_INDEX = 0xB7F69570;
		public static final int PSID_SOURCESIMDESCRIPTIONID = 0x60EC97E8;
		public static final int PSID_TARGETSIMDESCRIPTIONID = 0xC4E6AC5C;
		public static final int PSID_TARGETINTERACTIONNUMBERITEMSREQUIRED = 0x99E4B9C7;
		public static final int PSID_LOCALIZEDNAME = 0x0BBCAF5A;
		public static final int PSID_LOCALIZEDDESCRIPTION = 0x7E6D1FFB;
		public static final int PSID_LOCALIZEDDEADLINE = 0xCA7C6F3F;
		public static final int PSID_CHAIN = 0x6DE11A8E;
		public static final int PSID_LISTENERSTATES = 0x08E04F5C;
		public static final int PSID_LISTENERCOUNT = 0x08E329BC;
		public static final int PSID_LOCALIZATIONINDEX = 0x08E04F6E;
		public static final int PSID_WORLDSTARTEDIN = 0x08E174FA;
		public static final int PSID_SAVEDTARGETNAME = 0x08E17514;
		public static final int PSID_ORIGINALSOURCE = 0x08E2FF36;
		public static final int PSID_ORIGINALTARGET = 0x08E2FF48;

		private static final String XMLKEY_GUID = "Guid";
		private static final String XMLKEY_INDEX = "Index";
		private static final String XMLKEY_SOURCESIMDESCRIPTIONID = "SourceSimDescriptionId";
		private static final String XMLKEY_TARGETSIMDESCRIPTIONID = "TargetSimDescriptionId";
		private static final String XMLKEY_TARGETINTERACTIONNUMBERITEMSREQUIRED = "TargetInteractionNumberItemsRequired";
		private static final String XMLKEY_LOCALIZEDNAME = "LocalizedName";
		private static final String XMLKEY_LOCALIZEDDESCRIPTION = "LocalizedDescription";
		private static final String XMLKEY_LOCALIZEDDEADLINE = "LocalizedDeadline";
		private static final String XMLKEY_CHAIN = "Chain";
		private static final String XMLKEY_LISTENERSTATES = "ListenerStates";
		private static final String XMLKEY_LISTENERCOUNT = "ListenerCount";
		private static final String XMLKEY_LOCALIZATIONINDEX = "LocalizationIndex";
		private static final String XMLKEY_WORLDSTARTEDIN = "WorldStartedIn";
		private static final String XMLKEY_SAVEDTARGETNAME = "SavedTargetName";
		private static final String XMLKEY_ORIGINALSOURCE = "OriginalSource";
		private static final String XMLKEY_ORIGINALTARGET = "OriginalTarget";

		public long guid;
		public int index;
		public long sourceSimDescriptionId;
		public long targetSimDescriptionId;
		public int[] targetInteractionNumberItemsRequired;
		public String localizedName;
		public String localizedDescription;
		public String localizedDeadline;
		public long[] chain;
		public ArrayList<EventListenerExportInfo> listenerStates = new ArrayList<EventListenerExportInfo>();
		public int listenerCount;
		public int localizationIndex;
		public int worldStartedIn;
		public String savedTargetName;
		public OpportunitySourceOrTargetInfo originalSource;
		public OpportunitySourceOrTargetInfo originalTarget;

		public OppExportInfo() {
			xmlNodeName = "OppExportInfo";
			baseSize = 68;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			guid = dat.nextLong();
			index = dat.nextInt();
			sourceSimDescriptionId = dat.nextLong();
			targetSimDescriptionId = dat.nextLong();
			targetInteractionNumberItemsRequired = new int[TRGI_NUM_ITEM_REQ_LEN];
			for(int i = 0; i < TRGI_NUM_ITEM_REQ_LEN; i++){
				targetInteractionNumberItemsRequired[i] = dat.nextInt();
			}
			localizedName = MaxisTypes.readMaxisString(dat);
			localizedDescription = MaxisTypes.readMaxisString(dat);
			localizedDeadline = MaxisTypes.readMaxisString(dat);
			chain = new long[CHAIN_LEN];
			for(int i = 0; i < CHAIN_LEN; i++){
				chain[i] = dat.nextLong();
			}
			listenerStates.ensureCapacity(listenerCount);
			for(int i = 0; i < listenerCount; i++){
				EventListenerExportInfo eventListenerExportInfo = EventListenerExportInfo.readBinary(dat);
				if(eventListenerExportInfo != null) listenerStates.add(eventListenerExportInfo);
			}
			listenerCount = dat.nextInt();
			localizationIndex = dat.nextInt();
			worldStartedIn = dat.nextInt();
			savedTargetName = MaxisTypes.readMaxisString(dat);
			originalSource = OpportunitySourceOrTargetInfo.readBinary(dat);
			originalTarget = OpportunitySourceOrTargetInfo.readBinary(dat);

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_GUID);
			if(aval != null) guid = StringUtils.parseUnsignedLong(aval);
			aval = xml_element.getAttribute(XMLKEY_INDEX);
			if(aval != null) index = StringUtils.parseSignedInt(aval);
			aval = xml_element.getAttribute(XMLKEY_SOURCESIMDESCRIPTIONID);
			if(aval != null) sourceSimDescriptionId = StringUtils.parseUnsignedLong(aval);
			aval = xml_element.getAttribute(XMLKEY_TARGETSIMDESCRIPTIONID);
			if(aval != null) targetSimDescriptionId = StringUtils.parseUnsignedLong(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_TARGETINTERACTIONNUMBERITEMSREQUIRED);
			if(child != null){
				List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
				int ct = gclist.size();
				if(ct > 0) {
					targetInteractionNumberItemsRequired = new int[ct];
					int i = 0;
					for(Element gc : gclist){
						aval = gc.getAttribute("Value");
						if(aval != null) targetInteractionNumberItemsRequired[i] = StringUtils.parseSignedInt(aval);
						i++;
					}	
				}
				else targetInteractionNumberItemsRequired = null;
			}
			aval = xml_element.getAttribute(XMLKEY_LOCALIZEDNAME);
			if(aval != null) localizedName = aval;
			aval = xml_element.getAttribute(XMLKEY_LOCALIZEDDESCRIPTION);
			if(aval != null) localizedDescription = aval;
			aval = xml_element.getAttribute(XMLKEY_LOCALIZEDDEADLINE);
			if(aval != null) localizedDeadline = aval;
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_CHAIN);
			if(child != null){
				List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
				int len = gclist.size();
				if(len > 0) {
					int i = 0;
					chain = new long[len];
					for(Element gc : gclist){
						aval = gc.getAttribute(XMLKEY_CHAIN);
						if(aval != null) chain[i] = OpportunityNames.valueFromString(aval);
						i++;
					}
				}
				else chain = null;
				
			}
			aval = xml_element.getAttribute(XMLKEY_LISTENERCOUNT);
			if(aval != null) listenerCount = StringUtils.parseSignedInt(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_LISTENERSTATES);
			if(child != null){
				listenerStates.ensureCapacity(listenerCount);
				List<Element> gclist = XMLReader.getChildElementsWithTag(child, "EventListenerExportInfo");
				for(Element gc : gclist){
					listenerStates.add(EventListenerExportInfo.readXMLNode(gc));
				}
			}
			aval = xml_element.getAttribute(XMLKEY_LOCALIZATIONINDEX);
			if(aval != null) localizationIndex = StringUtils.parseSignedInt(aval);
			aval = xml_element.getAttribute(XMLKEY_WORLDSTARTEDIN);
			if(aval != null) worldStartedIn = WorldName.valueFromString(aval);
			aval = xml_element.getAttribute(XMLKEY_SAVEDTARGETNAME);
			if(aval != null) savedTargetName = aval;
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "OpportunitySourceOrTargetInfo", "VarName", XMLKEY_ORIGINALSOURCE);
			if(child != null) originalSource = OpportunitySourceOrTargetInfo.readXMLNode(child);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "OpportunitySourceOrTargetInfo", "VarName", XMLKEY_ORIGINALTARGET);
			if(child != null) originalTarget = OpportunitySourceOrTargetInfo.readXMLNode(child);

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			guid = stream.getFieldAsLong(PSID_GUID);
			index = stream.getFieldAsInt(PSID_INDEX);
			sourceSimDescriptionId = stream.getFieldAsLong(PSID_SOURCESIMDESCRIPTIONID);
			targetSimDescriptionId = stream.getFieldAsLong(PSID_TARGETSIMDESCRIPTIONID);
			targetInteractionNumberItemsRequired = stream.getFieldAsIntArray(PSID_TARGETINTERACTIONNUMBERITEMSREQUIRED);
			localizedName = stream.getFieldAsString(PSID_LOCALIZEDNAME);
			localizedDescription = stream.getFieldAsString(PSID_LOCALIZEDDESCRIPTION);
			localizedDeadline = stream.getFieldAsString(PSID_LOCALIZEDDEADLINE);
			chain = stream.getFieldAsLongArray(PSID_CHAIN);
			listenerCount = stream.getFieldAsInt(PSID_LISTENERCOUNT);
			listenerStates.ensureCapacity(listenerCount);
			for(int i = 0; i < listenerCount; i++){
				EventListenerExportInfo eventListenerExportInfo = EventListenerExportInfo.readPropertyStream(stream.getChildStream(PSID_LISTENERSTATES+i));
				if(eventListenerExportInfo != null) listenerStates.add(eventListenerExportInfo);
			}
			localizationIndex = stream.getFieldAsInt(PSID_LOCALIZATIONINDEX);
			worldStartedIn = stream.getFieldAsInt(PSID_WORLDSTARTEDIN);
			savedTargetName = stream.getFieldAsString(PSID_SAVEDTARGETNAME);
			originalSource = OpportunitySourceOrTargetInfo.readPropertyStream(stream.getChildStream(PSID_ORIGINALSOURCE));
			originalTarget = OpportunitySourceOrTargetInfo.readPropertyStream(stream.getChildStream(PSID_ORIGINALTARGET));

			return true;
		}
		
		public static OppExportInfo readBinary(BufferReference dat) {
			if(dat == null) return null;
			OppExportInfo str = new OppExportInfo();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static OppExportInfo readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			OppExportInfo str = new OppExportInfo();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static OppExportInfo readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static OppExportInfo readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			OppExportInfo str = new OppExportInfo();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			if(targetInteractionNumberItemsRequired != null){
				size += (targetInteractionNumberItemsRequired.length * 4);
			}
			size += (localizedName.length() << 1);
			size += (localizedDescription.length() << 1);
			size += (localizedDeadline.length() << 1);
			if(chain != null){
				size += (chain.length * 8);
			}
			for(EventListenerExportInfo eventListenerExportInfo : listenerStates){
				size += eventListenerExportInfo.getBinarySize();
			}
			size += (savedTargetName.length() << 1);
			size += originalSource.getBinarySize();
			size += originalTarget.getBinarySize();
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			listenerCount = listenerStates.size();
			target.addToFile(guid);
			target.addToFile(index);
			target.addToFile(sourceSimDescriptionId);
			target.addToFile(targetSimDescriptionId);
			for(int i = 0; i < targetInteractionNumberItemsRequired.length; i++){
				target.addToFile(targetInteractionNumberItemsRequired[i]);
			}
			MaxisTypes.serializeMaxisStringTo( localizedName, target);
			MaxisTypes.serializeMaxisStringTo( localizedDescription, target);
			MaxisTypes.serializeMaxisStringTo( localizedDeadline, target);
			for(int i = 0; i < CHAIN_LEN; i++){
				target.addToFile(chain[i]);
			}
			for(EventListenerExportInfo eventListenerExportInfo : listenerStates){
				eventListenerExportInfo.writeBinaryTo(target);
			}
			target.addToFile(listenerCount);
			target.addToFile(localizationIndex);
			target.addToFile(worldStartedIn);
			MaxisTypes.serializeMaxisStringTo(savedTargetName, target);
			originalSource.writeBinaryTo(target);
			originalTarget.writeBinaryTo(target);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			listenerCount = listenerStates.size();
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"0x%016x\"", XMLKEY_GUID, guid));
			out.write(String.format(" %s=\"%d\"", XMLKEY_INDEX, index));
			out.write(String.format(" %s=\"0x%016x\"", XMLKEY_SOURCESIMDESCRIPTIONID, sourceSimDescriptionId));
			out.write(String.format(" %s=\"0x%016x\"", XMLKEY_TARGETSIMDESCRIPTIONID, targetSimDescriptionId));
			out.write(String.format(" %s=\"%s\"", XMLKEY_LOCALIZEDNAME, localizedName));
			out.write(String.format(" %s=\"%s\"", XMLKEY_LOCALIZEDDESCRIPTION, localizedDescription));
			out.write(String.format(" %s=\"%s\"", XMLKEY_LOCALIZEDDEADLINE, localizedDeadline));
			out.write(String.format(" %s=\"%d\"", XMLKEY_LISTENERCOUNT, listenerCount));
			out.write(String.format(" %s=\"%d\"", XMLKEY_LOCALIZATIONINDEX, localizationIndex));
			out.write(String.format(" %s=\"%s\"", XMLKEY_WORLDSTARTEDIN, WorldName.stringFromValue(worldStartedIn)));
			out.write(String.format(" %s=\"%s\"", XMLKEY_SAVEDTARGETNAME, savedTargetName));
			out.write(">\n");
			if(targetInteractionNumberItemsRequired != null){
				out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_TARGETINTERACTIONNUMBERITEMSREQUIRED));
				for(int i = 0; i < TRGI_NUM_ITEM_REQ_LEN; i++){
					out.write(indent + String.format("\t\t<ArrayMember Value=\"%d\"/>\n", targetInteractionNumberItemsRequired[i]));
				}
				out.write(indent + "\t</Array>\n");
			}
			if(chain != null){
				out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_CHAIN));
				for(int i = 0; i < CHAIN_LEN; i++){
					out.write(indent + String.format("\t\t<ArrayMember Value=\"%s\"/>\n", OpportunityNames.stringFromValue(chain[i])));
				}
				out.write(indent + "\t</Array>\n");
			}
			out.write(indent + "\t<List ");
			out.write(String.format(" VarName=\"%s\">\n", XMLKEY_LISTENERSTATES));
			for(EventListenerExportInfo eventListenerExportInfo : listenerStates){
				eventListenerExportInfo.writeXMLNode(out, indent + "\t\t", null);
			}
			out.write(indent + "\t</List>\n");
			originalSource.writeXMLNode(out, indent + "\t", XMLKEY_ORIGINALSOURCE);
			originalTarget.writeXMLNode(out, indent + "\t", XMLKEY_ORIGINALTARGET);
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			boolean byte_order = ps.getByteOrder();
			int verFieldSize = ps.getVersionFieldSize();
			
			listenerCount = listenerStates.size();
			int i = 0;
			ps.addLong(guid, PSID_GUID);
			ps.addInt(index, PSID_INDEX);
			ps.addLong(sourceSimDescriptionId, PSID_SOURCESIMDESCRIPTIONID);
			ps.addLong(targetSimDescriptionId, PSID_TARGETSIMDESCRIPTIONID);
			if(targetInteractionNumberItemsRequired != null) {
				ps.addIntArray(targetInteractionNumberItemsRequired, PSID_TARGETINTERACTIONNUMBERITEMSREQUIRED);	
			}
			ps.addString(localizedName, PSID_LOCALIZEDNAME);
			ps.addString(localizedDescription, PSID_LOCALIZEDDESCRIPTION);
			ps.addString(localizedDeadline, PSID_LOCALIZEDDEADLINE);
			if(chain != null) ps.addLongArray(chain, PSID_CHAIN);
			i = 0;
			for(EventListenerExportInfo eventListenerExportInfo : listenerStates){
				ps.addChildStream(eventListenerExportInfo.toPropertyStream(byte_order, verFieldSize), PSID_LISTENERSTATES+i);
				i++;
			}
			ps.addInt(listenerCount, PSID_LISTENERCOUNT);
			ps.addInt(localizationIndex, PSID_LOCALIZATIONINDEX);
			ps.addInt(worldStartedIn, PSID_WORLDSTARTEDIN);
			ps.addString(savedTargetName, PSID_SAVEDTARGETNAME);
			ps.addChildStream(originalSource.toPropertyStream(byte_order, verFieldSize), PSID_ORIGINALSOURCE);
			ps.addChildStream(originalTarget.toPropertyStream(byte_order, verFieldSize), PSID_ORIGINALTARGET);
		}
		
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mCurrentOpportunities.ensureCapacity(currentOpportunitiesCount);
		for(int i = 0; i < currentOpportunitiesCount; i++){
			OppExportInfo opportunityExportInfo = OppExportInfo.readBinary(dat);
			if(opportunityExportInfo != null) mCurrentOpportunities.add(opportunityExportInfo);
		}
		currentOpportunitiesCount = dat.nextInt();
		hasHadAdventure = MaxisTypes.readBinaryBool(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MCURRENTOPPORTUNITIES);
		if(child != null){
			mCurrentOpportunities.ensureCapacity(currentOpportunitiesCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "OppExportInfo");
			for(Element gc : gclist){
				mCurrentOpportunities.add(OppExportInfo.readXMLNode(gc));
			}
		}
		aval = xml_element.getAttribute(XMLKEY_CURRENTOPPORTUNITIESCOUNT);
		if(aval != null) currentOpportunitiesCount = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_HASHADADVENTURE);
		if(aval != null) hasHadAdventure = Boolean.parseBoolean(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mCurrentOpportunities.ensureCapacity(currentOpportunitiesCount);
		for(int i = 0; i < currentOpportunitiesCount; i++){
			OppExportInfo opportunityExportInfo = OppExportInfo.readPropertyStream(stream.getChildStream(PSID_MCURRENTOPPORTUNITIES+i));
			if(opportunityExportInfo != null) mCurrentOpportunities.add(opportunityExportInfo);
		}
		currentOpportunitiesCount = stream.getFieldAsInt(PSID_CURRENTOPPORTUNITIESCOUNT);
		hasHadAdventure = stream.getFieldAsBool(PSID_HASHADADVENTURE);

		return true;
	}
	
	public static OpportunityHistoryTravelling readBinary(BufferReference dat) {
		if(dat == null) return null;
		OpportunityHistoryTravelling str = new OpportunityHistoryTravelling();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static OpportunityHistoryTravelling readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		OpportunityHistoryTravelling str = new OpportunityHistoryTravelling();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static OpportunityHistoryTravelling readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static OpportunityHistoryTravelling readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		OpportunityHistoryTravelling str = new OpportunityHistoryTravelling();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(OppExportInfo opportunityExportInfo : mCurrentOpportunities){
			size += opportunityExportInfo.getBinarySize();
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		currentOpportunitiesCount = mCurrentOpportunities.size();
		for(OppExportInfo opportunityExportInfo : mCurrentOpportunities){
			opportunityExportInfo.writeBinaryTo(target);
		}
		target.addToFile(currentOpportunitiesCount);
		MaxisTypes.writeBinaryBool(target, hasHadAdventure);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		currentOpportunitiesCount = mCurrentOpportunities.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_CURRENTOPPORTUNITIESCOUNT, currentOpportunitiesCount));
		out.write(String.format(" %s=\"%b\"", XMLKEY_HASHADADVENTURE, hasHadAdventure));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_MCURRENTOPPORTUNITIES));
		for(OppExportInfo opportunityExportInfo : mCurrentOpportunities){
			opportunityExportInfo.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		currentOpportunitiesCount = mCurrentOpportunities.size();
		int i = 0;
		i = 0;
		for(OppExportInfo opportunityExportInfo : mCurrentOpportunities){
			ps.addChildStream(opportunityExportInfo.toPropertyStream(byte_order, verFieldSize), PSID_MCURRENTOPPORTUNITIES+i);
			i++;
		}
		ps.addInt(currentOpportunitiesCount, PSID_CURRENTOPPORTUNITIESCOUNT);
		ps.addBool(hasHadAdventure, PSID_HASHADADVENTURE);
	}
	
}
