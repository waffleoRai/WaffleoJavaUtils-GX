/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Tue, 31 Dec 2024 20:42:03 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 18:50

package waffleoRai_Containers.maxis.ts3.savefmts.books;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class ReadBookData extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Objects.ReadBookData

	public static final int PSID_BOOKID = 0x07FEC187;
	public static final int PSID_CURRENTPAGE = 0x07FEC18E;
	public static final int PSID_TIMESREAD = 0x07FEC191;
	public static final int PSID_TIMEFINISHEDTICKS = 0x07FEC195;

	private static final String XMLKEY_BOOKID = "BookID";
	private static final String XMLKEY_CURRENTPAGE = "CurrentPage";
	private static final String XMLKEY_TIMESREAD = "TimesRead";
	private static final String XMLKEY_TIMEFINISHEDTICKS = "TimeFinishedTicks";

	public String bookID;
	public float currentPage;
	public int timesRead;
	public long timeFinishedTicks;

	public ReadBookData() {
		xmlNodeName = "ReadBookData";
		baseSize = 20;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		bookID = MaxisTypes.readMaxisString(dat);
		currentPage = Float.intBitsToFloat(dat.nextInt());
		timesRead = dat.nextInt();
		timeFinishedTicks = dat.nextLong();

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_BOOKID);
		if(aval != null) bookID = aval;
		aval = xml_element.getAttribute(XMLKEY_CURRENTPAGE);
		if(aval != null) currentPage = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_TIMESREAD);
		if(aval != null) timesRead = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_TIMEFINISHEDTICKS);
		if(aval != null) timeFinishedTicks = StringUtils.parseSignedLong(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		bookID = stream.getFieldAsString(PSID_BOOKID);
		currentPage = stream.getFieldAsFloat(PSID_CURRENTPAGE);
		timesRead = stream.getFieldAsInt(PSID_TIMESREAD);
		timeFinishedTicks = stream.getFieldAsLong(PSID_TIMEFINISHEDTICKS);

		return true;
	}
	
	public static ReadBookData readBinary(BufferReference dat) {
		if(dat == null) return null;
		ReadBookData str = new ReadBookData();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static ReadBookData readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		ReadBookData str = new ReadBookData();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static ReadBookData readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static ReadBookData readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		ReadBookData str = new ReadBookData();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += (bookID.length() << 1);
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(MaxisTypes.serializeMaxisString(bookID, target.isBigEndian()));
		target.addToFile(Float.floatToRawIntBits(currentPage));
		target.addToFile(timesRead);
		target.addToFile(timeFinishedTicks);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%s\"", XMLKEY_BOOKID, bookID));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_CURRENTPAGE, currentPage));
		out.write(String.format(" %s=\"%d\"", XMLKEY_TIMESREAD, timesRead));
		out.write(String.format(" %s=\"%d\"", XMLKEY_TIMEFINISHEDTICKS, timeFinishedTicks));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addString(bookID, PSID_BOOKID);
		ps.addFloat(currentPage, PSID_CURRENTPAGE);
		ps.addInt(timesRead, PSID_TIMESREAD);
		ps.addLong(timeFinishedTicks, PSID_TIMEFINISHEDTICKS);
	}
	
}
