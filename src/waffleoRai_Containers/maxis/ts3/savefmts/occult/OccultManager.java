/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:23:25 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 19:12

package waffleoRai_Containers.maxis.ts3.savefmts.occult;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.FavoriteFoodType;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;

public class OccultManager extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.ActorSystems.OccultManager

	public static final int PSID_MCURRENTOCCULTTYPES = 0x08BC810D;
	public static final int PSID_PREVIOUSFAVORITEFOOD = 0x0A04DB00;
	public static final int PSID_MISLIFETIMEREWARD = 0x0983C840;

	private static final String XMLKEY_MCURRENTOCCULTTYPES = "CurrentOccultTypes";
	private static final String XMLKEY_PREVIOUSFAVORITEFOOD = "PreviousFavoriteFood";
	private static final String XMLKEY_MISLIFETIMEREWARD = "IsLifetimeReward";

	public int mCurrentOccultTypes;
	public int previousFavoriteFood;
	public boolean mIsLifetimeReward;

	public OccultManager() {
		xmlNodeName = "OccultManager";
		baseSize = 9;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mCurrentOccultTypes = dat.nextInt();
		previousFavoriteFood = dat.nextInt();
		mIsLifetimeReward = MaxisTypes.readBinaryBool(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_MCURRENTOCCULTTYPES);
		if(aval != null) mCurrentOccultTypes = OccultTypes.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_PREVIOUSFAVORITEFOOD);
		if(aval != null) previousFavoriteFood = FavoriteFoodType.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MISLIFETIMEREWARD);
		if(aval != null) mIsLifetimeReward = Boolean.parseBoolean(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mCurrentOccultTypes = stream.getFieldAsInt(PSID_MCURRENTOCCULTTYPES);
		previousFavoriteFood = stream.getFieldAsInt(PSID_PREVIOUSFAVORITEFOOD);
		mIsLifetimeReward = stream.getFieldAsBool(PSID_MISLIFETIMEREWARD);

		return true;
	}
	
	public static OccultManager readBinary(BufferReference dat) {
		if(dat == null) return null;
		OccultManager str = new OccultManager();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static OccultManager readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		OccultManager str = new OccultManager();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static OccultManager readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static OccultManager readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		OccultManager str = new OccultManager();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(mCurrentOccultTypes);
		target.addToFile(previousFavoriteFood);
		MaxisTypes.writeBinaryBool(target, mIsLifetimeReward);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%s\"", XMLKEY_MCURRENTOCCULTTYPES, OccultTypes.stringFromValue(mCurrentOccultTypes)));
		out.write(String.format(" %s=\"%s\"", XMLKEY_PREVIOUSFAVORITEFOOD, FavoriteFoodType.stringFromValue(previousFavoriteFood)));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MISLIFETIMEREWARD, mIsLifetimeReward));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addInt(mCurrentOccultTypes, PSID_MCURRENTOCCULTTYPES);
		ps.addInt(previousFavoriteFood, PSID_PREVIOUSFAVORITEFOOD);
		ps.addBool(mIsLifetimeReward, PSID_MISLIFETIMEREWARD);
	}
	
}
