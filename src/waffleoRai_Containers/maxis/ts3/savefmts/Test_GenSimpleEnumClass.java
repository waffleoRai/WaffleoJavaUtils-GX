package waffleoRai_Containers.maxis.ts3.savefmts;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.time.ZonedDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.StringUtils;

public class Test_GenSimpleEnumClass {
	
	private static List<Element> getNodesToScan(Document xmlDoc){
		//Top node should be called "DefPackage"
		List<Element> list = new LinkedList<Element>();
		NodeList nl = xmlDoc.getElementsByTagName("DefPackage");
		if(nl == null) return list;
		
		Element pkgElement = null;
		int nodeCount = nl.getLength();
		for(int i = 0; i < nodeCount; i++) {
			Node node = nl.item(i);
			if(node.getNodeType() == Node.ELEMENT_NODE) {
				pkgElement = (Element)node;
				break;
			}
		}
		if(pkgElement == null) return list;
		
		nl = pkgElement.getElementsByTagName("EnumDef");
		nodeCount = nl.getLength();
		for(int i = 0; i < nodeCount; i++) {
			Node node = nl.item(i);
			if(node.getNodeType() == Node.ELEMENT_NODE) {
				list.add((Element)node);
			}
		}
		
		list.addAll(XMLReader.getChildElementsWithTag(pkgElement, "FlagEnumDef"));
		
		return list;
	}

	private static void doDefNode(Element defNode, String outDir) throws IOException {
		String defName = defNode.getAttribute("Name");
		String defType = defNode.getAttribute("Type");
		String defScript = defNode.getAttribute("GameScript");
		
		boolean isFlagField = defNode.getNodeName().contains("Flag");
		
		String outpath = outDir + File.separator + defName + ".java";
		BufferedWriter bw = new BufferedWriter(new FileWriter(outpath));
		
		ZonedDateTime nowtime = ZonedDateTime.now();
		bw.write("/*-----------------------------------------------------\n");
		bw.write(" * Autogenerated Java class from XML definition.\n");
		bw.write(" * Created " + nowtime.format(DateTimeFormatter.RFC_1123_DATE_TIME) + "\n");
		bw.write(" *-----------------------------------------------------*/\n\n");
		
		bw.write("package YOUR_PKG_HERE;\n\n");
		
		//Common Imports
		//bw.write("import java.io.IOException;\n");
		//bw.write("import java.io.Writer;\n");
		//bw.write("import org.w3c.dom.Element;\n");
		//bw.write("import waffleoRai_Containers.maxis.MaxisPropertyStream;\n");
		//bw.write("import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;\n");
		//bw.write("import waffleoRai_Utils.BufferReference;\n");
		//bw.write("import waffleoRai_Utils.FileBuffer;\n");
		//bw.write("import waffleoRai_Utils.StringUtils;\n");
		//bw.write("import java.util.Map;\n");
		//bw.write("import java.util.HashMap;\n");
		
		bw.write("\npublic class " + defName + " {\n");
		if(defScript != null) bw.write("//Game Script: " + defScript + "\n");
		bw.write("//Enum type: " + defType + "\n");
		
		//Grab value nodes.
		String valueTag = "EnumValue";
		if(isFlagField) valueTag = "FlagValue";
		NodeList nl = defNode.getElementsByTagName(valueTag);
		int valCount = nl.getLength();
		List<Element> valueList = new ArrayList<Element>(valCount+1);
		for(int i = 0; i < valCount; i++) {
			Node node = nl.item(i);
			if(node.getNodeType() == Node.ELEMENT_NODE) {
				valueList.add((Element)node);
			}
		}
		int newValCount = valueList.size();
		
		//Determine value type in Java
		String valType = "int";
		String prefix = "";
		String suffix = "";
		String mapperType = "EnumStringMapper32";
		int perRow = 8;
		if(defType.equals("s8") || defType.equals("u8")) {
			valType = "byte";
			prefix = "(byte)";
			perRow = 8;
			mapperType = "EnumStringMapper8";
		}
		if(defType.equals("s16") || defType.equals("u16")) {
			valType = "short";
			prefix = "(short)";
			mapperType = "EnumStringMapper16";
		}
		if(defType.equals("s64") || defType.equals("u64")) {
			valType = "long";
			suffix = "L";
			perRow = 4;
			mapperType = "EnumStringMapper64";
		}
		
		//Pseudo-Enums
		bw.write("\n");
		for(Element valNode : valueList) {
			String valName = valNode.getAttribute("Name");
			String valVal = valNode.getAttribute("Value");
			
			//String nameCaps = valName.toUpperCase();
			bw.write(String.format("\tpublic static final %s %s = %s%s%s;\n", 
					valType, valName, prefix, valVal, suffix));
		}
		
		//Value array
		bw.write("\n");
		bw.write(String.format("\tpublic static final %s[] ALL_VALUES = {\n\t\t", valType));
		int ctr = 0;
		int totalCtr = 0;
		for(Element valNode : valueList) {
			if(ctr >= perRow) {
				ctr = 0;
				bw.write("\n\t\t");
			}

			String valVal = valNode.getAttribute("Value");
			bw.write(String.format("%s%s%s", prefix, valVal, suffix));
			if(totalCtr < (newValCount - 1)) {
				bw.write(", ");
			}
			
			ctr++;
			totalCtr++;
		}
		bw.write("\n\t};\n");
		
		//String array
		bw.write("\n");
		bw.write("\tpublic static final String[] ALL_NAMES = {\n\t\t");
		ctr = 0;
		totalCtr = 0;
		for(Element valNode : valueList) {
			if(ctr >= 4) {
				ctr = 0;
				bw.write("\n\t\t");
			}
			
			String valName = valNode.getAttribute("Name");
			bw.write(String.format("\"%s\"", valName));
			if(totalCtr < (newValCount - 1)) {
				bw.write(", ");
			}
			
			ctr++;
			totalCtr++;
		}
		bw.write("\n\t};\n");
		
		//Mapping functions
		bw.write("\n");
		String valCap = StringUtils.capitalize(valType);
		if(valCap.equals("Int")) valCap = "Integer";
		bw.write("\tprivate static " + mapperType + " mapper;\n");
		
		if(!isFlagField) {
			bw.write("\n\tpublic static String stringFromValue(" + valType + " value){\n");
			bw.write("\t\tif(mapper == null){\n");
			bw.write("\t\t\tmapper = new " + mapperType + "(ALL_VALUES, ALL_NAMES);\n");
			bw.write("\t\t}\n");
			bw.write("\t\treturn mapper.stringFromValue(value);\n");
			bw.write("\t}\n");
			
			bw.write("\n\tpublic static " + valType + " valueFromString(String str){\n");
			bw.write("\t\tif(mapper == null){\n");
			bw.write("\t\t\tmapper = new " + mapperType + "(ALL_VALUES, ALL_NAMES);\n");
			bw.write("\t\t}\n");
			bw.write("\t\treturn mapper.valueFromString(str);\n");
			bw.write("\t}\n");
		}
		else {
			bw.write("\n\tpublic static String stringFromValue(" + valType + " value){\n");
			bw.write("\t\tif(mapper == null){\n");
			bw.write("\t\t\tmapper = new " + mapperType + "(ALL_VALUES, ALL_NAMES);\n");
			bw.write("\t\t}\n");
			bw.write("\t\treturn mapper.stringFromValueFlags(value);\n");
			bw.write("\t}\n");
			
			bw.write("\n\tpublic static " + valType + " valueFromString(String str){\n");
			bw.write("\t\tif(mapper == null){\n");
			bw.write("\t\t\tmapper = new " + mapperType + "(ALL_VALUES, ALL_NAMES);\n");
			bw.write("\t\t}\n");
			bw.write("\t\treturn mapper.valueFromStringFlags(str);\n");
			bw.write("\t}\n");
		}
		
		bw.write("\n\tpublic static void disposeMaps(){\n");
		bw.write("\t\tif(mapper != null){\n");
		bw.write("\t\t\tmapper.dispose();\n");
		bw.write("\t\t\tmapper = null;\n");
		bw.write("\t\t}\n");
		bw.write("\t}\n");
		
		bw.write("}\n");
		bw.close();
	}
	
	public static void main(String[] args) {
		String inPath = args[0]; //Input XML
		String outPath = args[1]; //Directory
		
		try {
			Document xmlDoc = XMLReader.readXMLStatic(inPath);
			
			if(!Files.isDirectory(Paths.get(outPath))) {
				Files.createDirectories(Paths.get(outPath));
			}
			
			List<Element> defList = getNodesToScan(xmlDoc);
			if(defList.isEmpty()) {
				System.err.println("Failed to find any EnumDef nodes!");
				System.exit(1);
			}
			
			for(Element e : defList) {
				doDefNode(e, outPath);
			}
			
		}
		catch(Exception ex) {
			ex.printStackTrace();
			System.exit(1);
		}

	}

}
