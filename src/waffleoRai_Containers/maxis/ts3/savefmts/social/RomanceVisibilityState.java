/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 17:53:23 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 18:46

package waffleoRai_Containers.maxis.ts3.savefmts.social;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;

public class RomanceVisibilityState extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Socializing.RomanceVisibilityState

	public static final int PSID_MSIMATOSIMB = 0x67234590;
	public static final int PSID_MSIMBTOSIMA = 0x67234591;
	public static final int PSID_MFLAGFIELD = 0x67234592;
	public static final int PSID_MVISIBILITYPOINTS = 0x67234593;

	private static final String XMLKEY_MSIMATOSIMB = "SimAToSimB";
	private static final String XMLKEY_MSIMBTOSIMA = "SimBToSimA";
	private static final String XMLKEY_MFLAGFIELD = "FlagField";
	private static final String XMLKEY_MVISIBILITYPOINTS = "VisibilityPoints";

	public short mSimAToSimB;
	public short mSimBToSimA;
	public short mFlagField;
	public float mVisibilityPoints;

	public RomanceVisibilityState() {
		xmlNodeName = "RomanceVisibilityState";
		baseSize = 10;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mSimAToSimB = dat.nextShort();
		mSimBToSimA = dat.nextShort();
		mFlagField = dat.nextShort();
		mVisibilityPoints = Float.intBitsToFloat(dat.nextInt());

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_MSIMATOSIMB);
		if(aval != null) mSimAToSimB = RomanceVisibilityStateType.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MSIMBTOSIMA);
		if(aval != null) mSimBToSimA = RomanceVisibilityStateType.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MFLAGFIELD);
		if(aval != null) mFlagField = RomanceVisibilityFlags.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MVISIBILITYPOINTS);
		if(aval != null) mVisibilityPoints = (float)Double.parseDouble(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mSimAToSimB = stream.getFieldAsShort(PSID_MSIMATOSIMB);
		mSimBToSimA = stream.getFieldAsShort(PSID_MSIMBTOSIMA);
		mFlagField = stream.getFieldAsShort(PSID_MFLAGFIELD);
		mVisibilityPoints = stream.getFieldAsFloat(PSID_MVISIBILITYPOINTS);

		return true;
	}
	
	public static RomanceVisibilityState readBinary(BufferReference dat) {
		if(dat == null) return null;
		RomanceVisibilityState str = new RomanceVisibilityState();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static RomanceVisibilityState readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		RomanceVisibilityState str = new RomanceVisibilityState();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static RomanceVisibilityState readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static RomanceVisibilityState readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		RomanceVisibilityState str = new RomanceVisibilityState();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(mSimAToSimB);
		target.addToFile(mSimBToSimA);
		target.addToFile(mFlagField);
		target.addToFile(Float.floatToRawIntBits(mVisibilityPoints));

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%s\"", XMLKEY_MSIMATOSIMB, RomanceVisibilityStateType.stringFromValue(mSimAToSimB)));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MSIMBTOSIMA, RomanceVisibilityStateType.stringFromValue(mSimBToSimA)));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MFLAGFIELD, RomanceVisibilityFlags.stringFromValue(mFlagField)));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MVISIBILITYPOINTS, mVisibilityPoints));
		out.write("/>\n");

	}
	
	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addShort(mSimAToSimB, PSID_MSIMATOSIMB);
		ps.addShort(mSimBToSimA, PSID_MSIMBTOSIMA);
		ps.addShort(mFlagField, PSID_MFLAGFIELD);
		ps.addFloat(mVisibilityPoints, PSID_MVISIBILITYPOINTS);
	}
	
}
