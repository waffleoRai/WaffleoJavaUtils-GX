/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 17:53:23 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 18:44

package waffleoRai_Containers.maxis.ts3.savefmts.social;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class Relationship extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Socializing.Relationship

	public static final int PSID_MWHATBHASLEARNEDABOUTAPARTNERKNOWN = 0x05953476;
	public static final int PSID_MWHATAHASLEARNEDABOUTBPARTNERKNOWN = 0x61325912;
	public static final int PSID_MSTC = 0x25707333;
	public static final int PSID_MLTR = 0x3781D8B5;
	public static final int PSID_ROMANCEVISIBILITYSTATE = 0x3781D8B6;
	public static final int PSID_MPREVIOUSRELATIONSHIPWASSOCPOSITIVE = 0x06B2370E;
	public static final int PSID_MPREVIOUSRELATIONSHIPSTCSTRING = 0x45A82FD9;
	public static final int PSID_MPREVIOUSRELATIONSHIPSTCLIKING = 0x329A8A01;
	public static final int PSID_MPREVIOUSRELATIONSHIPLTRLIKING = 0x035A05BB;
	public static final int PSID_MPREVIOUSRELATIONSHIPLTRFLAGS = 0x95025205;
	public static final int PSID_PROPOSERSIMID = 0x09507B4F;
	public static final int PSID_HASSAVEDFROMDEATH = 0xF4246675;
	public static final int PSID_ATTRACTIONSCORE = 0xBC6FAE27;

	private static final String XMLKEY_MWHATBHASLEARNEDABOUTAPARTNERKNOWN = "WhatBHasLearnedAboutAPartnerKnown";
	private static final String XMLKEY_MWHATAHASLEARNEDABOUTBPARTNERKNOWN = "WhatAHasLearnedAboutBPartnerKnown";
	private static final String XMLKEY_MSTC = "STC";
	private static final String XMLKEY_MLTR = "LTR";
	private static final String XMLKEY_ROMANCEVISIBILITYSTATE = "RomanceVisibilityState";
	private static final String XMLKEY_MPREVIOUSRELATIONSHIPWASSOCPOSITIVE = "PreviousRelationshipWasSocPositive";
	private static final String XMLKEY_MPREVIOUSRELATIONSHIPSTCSTRING = "PreviousRelationshipSTCString";
	private static final String XMLKEY_MPREVIOUSRELATIONSHIPSTCLIKING = "PreviousRelationshipSTCLiking";
	private static final String XMLKEY_MPREVIOUSRELATIONSHIPLTRLIKING = "PreviousRelationshipLTRLiking";
	private static final String XMLKEY_MPREVIOUSRELATIONSHIPLTRFLAGS = "PreviousRelationshipLTRFlags";
	private static final String XMLKEY_PROPOSERSIMID = "ProposerSimId";
	private static final String XMLKEY_HASSAVEDFROMDEATH = "HasSavedFromDeath";
	private static final String XMLKEY_ATTRACTIONSCORE = "AttractionScore";

	public boolean mWhatBHasLearnedAboutAPartnerKnown;
	public boolean mWhatAHasLearnedAboutBPartnerKnown;
	public ShortTermContext mSTC;
	public LongTermRelationship mLTR;
	public RomanceVisibilityState romanceVisibilityState; //Optional
	public boolean mPreviousRelationshipWasSocPositive;
	public String mPreviousRelationshipSTCString;
	public float mPreviousRelationshipSTCLiking;
	public float mPreviousRelationshipLTRLiking;
	public int mPreviousRelationshipLTRFlags;
	public long proposerSimId; //Optional
	public boolean hasSavedFromDeath;
	public float attractionScore;

	public Relationship() {
		xmlNodeName = "Relationship";
		baseSize = 32;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mWhatBHasLearnedAboutAPartnerKnown = MaxisTypes.readBinaryBool(dat);
		mWhatAHasLearnedAboutBPartnerKnown = MaxisTypes.readBinaryBool(dat);
		mSTC = ShortTermContext.readBinary(dat);
		mLTR = LongTermRelationship.readBinary(dat);
		romanceVisibilityState = RomanceVisibilityState.readBinary(dat);
		mPreviousRelationshipWasSocPositive = MaxisTypes.readBinaryBool(dat);
		mPreviousRelationshipSTCString = MaxisTypes.readMaxisString(dat);
		mPreviousRelationshipSTCLiking = Float.intBitsToFloat(dat.nextInt());
		mPreviousRelationshipLTRLiking = Float.intBitsToFloat(dat.nextInt());
		mPreviousRelationshipLTRFlags = dat.nextInt();
		proposerSimId = dat.nextLong();
		hasSavedFromDeath = MaxisTypes.readBinaryBool(dat);
		attractionScore = Float.intBitsToFloat(dat.nextInt());

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_MWHATBHASLEARNEDABOUTAPARTNERKNOWN);
		if(aval != null) mWhatBHasLearnedAboutAPartnerKnown = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MWHATAHASLEARNEDABOUTBPARTNERKNOWN);
		if(aval != null) mWhatAHasLearnedAboutBPartnerKnown = Boolean.parseBoolean(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Struct:ShortTermContext", "VarName", XMLKEY_MSTC);
		if(child != null) mSTC = ShortTermContext.readXMLNode(child);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Struct:LongTermRelationship", "VarName", XMLKEY_MLTR);
		if(child != null) mLTR = LongTermRelationship.readXMLNode(child);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Struct:RomanceVisibilityState", "VarName", XMLKEY_ROMANCEVISIBILITYSTATE);
		if(child != null) romanceVisibilityState = RomanceVisibilityState.readXMLNode(child);
		aval = xml_element.getAttribute(XMLKEY_MPREVIOUSRELATIONSHIPWASSOCPOSITIVE);
		if(aval != null) mPreviousRelationshipWasSocPositive = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MPREVIOUSRELATIONSHIPSTCSTRING);
		if(aval != null) mPreviousRelationshipSTCString = aval;
		aval = xml_element.getAttribute(XMLKEY_MPREVIOUSRELATIONSHIPSTCLIKING);
		if(aval != null) mPreviousRelationshipSTCLiking = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MPREVIOUSRELATIONSHIPLTRLIKING);
		if(aval != null) mPreviousRelationshipLTRLiking = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MPREVIOUSRELATIONSHIPLTRFLAGS);
		if(aval != null) mPreviousRelationshipLTRFlags = LTRInteractionBits.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_PROPOSERSIMID);
		if(aval != null) proposerSimId = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_HASSAVEDFROMDEATH);
		if(aval != null) hasSavedFromDeath = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_ATTRACTIONSCORE);
		if(aval != null) attractionScore = (float)Double.parseDouble(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mWhatBHasLearnedAboutAPartnerKnown = stream.getFieldAsBool(PSID_MWHATBHASLEARNEDABOUTAPARTNERKNOWN);
		mWhatAHasLearnedAboutBPartnerKnown = stream.getFieldAsBool(PSID_MWHATAHASLEARNEDABOUTBPARTNERKNOWN);
		mSTC = ShortTermContext.readPropertyStream(stream.getChildStream(PSID_MSTC));
		mLTR = LongTermRelationship.readPropertyStream(stream.getChildStream(PSID_MLTR));
		romanceVisibilityState = RomanceVisibilityState.readPropertyStream(stream.getChildStream(PSID_ROMANCEVISIBILITYSTATE));
		mPreviousRelationshipWasSocPositive = stream.getFieldAsBool(PSID_MPREVIOUSRELATIONSHIPWASSOCPOSITIVE);
		mPreviousRelationshipSTCString = stream.getFieldAsString(PSID_MPREVIOUSRELATIONSHIPSTCSTRING);
		mPreviousRelationshipSTCLiking = stream.getFieldAsFloat(PSID_MPREVIOUSRELATIONSHIPSTCLIKING);
		mPreviousRelationshipLTRLiking = stream.getFieldAsFloat(PSID_MPREVIOUSRELATIONSHIPLTRLIKING);
		mPreviousRelationshipLTRFlags = stream.getFieldAsInt(PSID_MPREVIOUSRELATIONSHIPLTRFLAGS);
		proposerSimId = stream.getFieldAsLong(PSID_PROPOSERSIMID);
		hasSavedFromDeath = stream.getFieldAsBool(PSID_HASSAVEDFROMDEATH);
		attractionScore = stream.getFieldAsFloat(PSID_ATTRACTIONSCORE);

		return true;
	}
	
	public static Relationship readBinary(BufferReference dat) {
		if(dat == null) return null;
		Relationship str = new Relationship();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static Relationship readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		Relationship str = new Relationship();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static Relationship readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static Relationship readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		Relationship str = new Relationship();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += mSTC.getBinarySize();
		size += mLTR.getBinarySize();
		if(romanceVisibilityState != null) size += romanceVisibilityState.getBinarySize();
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		MaxisTypes.writeBinaryBool(target, mWhatBHasLearnedAboutAPartnerKnown);
		MaxisTypes.writeBinaryBool(target, mWhatAHasLearnedAboutBPartnerKnown);
		mSTC.writeBinaryTo(target);
		mLTR.writeBinaryTo(target);
		romanceVisibilityState.writeBinaryTo(target);
		MaxisTypes.writeBinaryBool(target, mPreviousRelationshipWasSocPositive);
		MaxisTypes.serializeMaxisStringTo( mPreviousRelationshipSTCString, target);
		target.addToFile(Float.floatToRawIntBits(mPreviousRelationshipSTCLiking));
		target.addToFile(Float.floatToRawIntBits(mPreviousRelationshipLTRLiking));
		target.addToFile(mPreviousRelationshipLTRFlags);
		target.addToFile(proposerSimId);
		MaxisTypes.writeBinaryBool(target, hasSavedFromDeath);
		target.addToFile(Float.floatToRawIntBits(attractionScore));

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%b\"", XMLKEY_MWHATBHASLEARNEDABOUTAPARTNERKNOWN, mWhatBHasLearnedAboutAPartnerKnown));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MWHATAHASLEARNEDABOUTBPARTNERKNOWN, mWhatAHasLearnedAboutBPartnerKnown));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MPREVIOUSRELATIONSHIPWASSOCPOSITIVE, mPreviousRelationshipWasSocPositive));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MPREVIOUSRELATIONSHIPSTCSTRING, mPreviousRelationshipSTCString));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MPREVIOUSRELATIONSHIPSTCLIKING, mPreviousRelationshipSTCLiking));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MPREVIOUSRELATIONSHIPLTRLIKING, mPreviousRelationshipLTRLiking));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MPREVIOUSRELATIONSHIPLTRFLAGS, LTRInteractionBits.stringFromValue(mPreviousRelationshipLTRFlags)));
		if(proposerSimId != 0L) out.write(String.format(" %s=\"0x%016x\"", XMLKEY_PROPOSERSIMID, proposerSimId));
		out.write(String.format(" %s=\"%b\"", XMLKEY_HASSAVEDFROMDEATH, hasSavedFromDeath));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_ATTRACTIONSCORE, attractionScore));
		out.write(">\n");
		mSTC.writeXMLNode(out, indent + "\t", XMLKEY_MSTC);
		mLTR.writeXMLNode(out, indent + "\t", XMLKEY_MLTR);
		if(romanceVisibilityState != null) romanceVisibilityState.writeXMLNode(out, indent + "\t", XMLKEY_ROMANCEVISIBILITYSTATE);
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		ps.addBool(mWhatBHasLearnedAboutAPartnerKnown, PSID_MWHATBHASLEARNEDABOUTAPARTNERKNOWN);
		ps.addBool(mWhatAHasLearnedAboutBPartnerKnown, PSID_MWHATAHASLEARNEDABOUTBPARTNERKNOWN);
		ps.addChildStream(mSTC.toPropertyStream(byte_order, verFieldSize), PSID_MSTC);
		ps.addChildStream(mLTR.toPropertyStream(byte_order, verFieldSize), PSID_MLTR);
		if(romanceVisibilityState != null) {
			ps.addChildStream(romanceVisibilityState.toPropertyStream(byte_order, verFieldSize), PSID_ROMANCEVISIBILITYSTATE);	
		}
		ps.addBool(mPreviousRelationshipWasSocPositive, PSID_MPREVIOUSRELATIONSHIPWASSOCPOSITIVE);
		ps.addString(mPreviousRelationshipSTCString, PSID_MPREVIOUSRELATIONSHIPSTCSTRING);
		ps.addFloat(mPreviousRelationshipSTCLiking, PSID_MPREVIOUSRELATIONSHIPSTCLIKING);
		ps.addFloat(mPreviousRelationshipLTRLiking, PSID_MPREVIOUSRELATIONSHIPLTRLIKING);
		ps.addInt(mPreviousRelationshipLTRFlags, PSID_MPREVIOUSRELATIONSHIPLTRFLAGS);
		if(proposerSimId != 0L) ps.addLong(proposerSimId, PSID_PROPOSERSIMID);
		ps.addBool(hasSavedFromDeath, PSID_HASSAVEDFROMDEATH);
		ps.addFloat(attractionScore, PSID_ATTRACTIONSCORE);
	}
	
}
