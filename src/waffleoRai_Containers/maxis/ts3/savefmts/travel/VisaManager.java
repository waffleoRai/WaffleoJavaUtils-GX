/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:25:45 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 23:32

package waffleoRai_Containers.maxis.ts3.savefmts.travel;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class VisaManager extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Visa.VisaManager

	public static final int PSID_MVISITSTOCHINA = 0x0886C9A7;
	public static final int PSID_MVISITSTOEGYPT = 0x0886C9AA;
	public static final int PSID_MVISITSTOFRANCE = 0x0886C9AE;
	public static final int PSID_MDAYSSPENTINCHINA = 0x0886C9B1;
	public static final int PSID_MDAYSSPENTINEGYPT = 0x0886C9B4;
	public static final int PSID_MDAYSSPENTINFRANCE = 0x0886C9B8;
	public static final int PSID_MLASTTIMEONVACATION = 0x0886C9C9;
	public static final int PSID_VISACOUNT = 0x6A37FED9;
	public static final int PSID_VISALIST = 0xE3269DD9;

	private static final String XMLKEY_MVISITSTOCHINA = "VisitsToChina";
	private static final String XMLKEY_MVISITSTOEGYPT = "VisitsToEgypt";
	private static final String XMLKEY_MVISITSTOFRANCE = "VisitsToFrance";
	private static final String XMLKEY_MDAYSSPENTINCHINA = "DaysSpentInChina";
	private static final String XMLKEY_MDAYSSPENTINEGYPT = "DaysSpentInEgypt";
	private static final String XMLKEY_MDAYSSPENTINFRANCE = "DaysSpentInFrance";
	private static final String XMLKEY_MLASTTIMEONVACATION = "LastTimeOnVacation";
	private static final String XMLKEY_VISACOUNT = "VisaCount";
	private static final String XMLKEY_VISALIST = "VisaList";

	public int mVisitsToChina;
	public int mVisitsToEgypt;
	public int mVisitsToFrance;
	public int mDaysSpentInChina;
	public int mDaysSpentInEgypt;
	public int mDaysSpentInFrance;
	public int mLastTimeOnVacation;
	public int visaCount;
	public ArrayList<VisaEntry> visaList = new ArrayList<VisaEntry>();

	public VisaManager() {
		xmlNodeName = "VisaManager";
		baseSize = 32;
	}
	
	/*----- Inner Classes -----*/

	public static class VisaEntry extends TS3Saveable{

		public static final int PSID_GUID = 0xE3269DD9;

		private static final String XMLKEY_GUID = "Guid";
		private static final String XMLKEY_VISADATA = "VisaData";

		public int guid;
		public Visa visaData;

		public VisaEntry() {
			xmlNodeName = "VisaEntry";
			baseSize = 4;
		}

		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			guid = dat.nextInt();
			visaData = Visa.readBinary(dat);

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_GUID);
			if(aval != null) guid = StringUtils.parseUnsignedInt(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Visa", "VarName", XMLKEY_VISADATA);
			if(child != null) visaData = Visa.readXMLNode(child);

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			guid = stream.getFieldAsInt(PSID_GUID);
			visaData = Visa.readPropertyStream(stream);

			return true;
		}
		
		public static VisaEntry readBinary(BufferReference dat) {
			if(dat == null) return null;
			VisaEntry str = new VisaEntry();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static VisaEntry readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			VisaEntry str = new VisaEntry();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static VisaEntry readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static VisaEntry readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			VisaEntry str = new VisaEntry();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			size += visaData.getBinarySize();
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			target.addToFile(guid);
			visaData.writeBinaryTo(target);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"0x%08x\"", XMLKEY_GUID, guid));
			out.write(">\n");
			visaData.writeXMLNode(out, indent + "\t", XMLKEY_VISADATA);
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			ps.addInt(guid, PSID_GUID);
			visaData.addToPropertyStream(ps);
		}
		
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mVisitsToChina = dat.nextInt();
		mVisitsToEgypt = dat.nextInt();
		mVisitsToFrance = dat.nextInt();
		mDaysSpentInChina = dat.nextInt();
		mDaysSpentInEgypt = dat.nextInt();
		mDaysSpentInFrance = dat.nextInt();
		mLastTimeOnVacation = dat.nextInt();
		visaCount = dat.nextInt();
		visaList.ensureCapacity(visaCount);
		for(int i = 0; i < visaCount; i++){
			VisaEntry visa = VisaEntry.readBinary(dat);
			if(visa != null) visaList.add(visa);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_MVISITSTOCHINA);
		if(aval != null) mVisitsToChina = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MVISITSTOEGYPT);
		if(aval != null) mVisitsToEgypt = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MVISITSTOFRANCE);
		if(aval != null) mVisitsToFrance = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MDAYSSPENTINCHINA);
		if(aval != null) mDaysSpentInChina = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MDAYSSPENTINEGYPT);
		if(aval != null) mDaysSpentInEgypt = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MDAYSSPENTINFRANCE);
		if(aval != null) mDaysSpentInFrance = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MLASTTIMEONVACATION);
		if(aval != null) mLastTimeOnVacation = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_VISACOUNT);
		if(aval != null) visaCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_VISALIST);
		if(child != null){
			visaList.ensureCapacity(visaCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "VisaEntry");
			for(Element gc : gclist){
				visaList.add(VisaEntry.readXMLNode(gc));
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mVisitsToChina = stream.getFieldAsInt(PSID_MVISITSTOCHINA);
		mVisitsToEgypt = stream.getFieldAsInt(PSID_MVISITSTOEGYPT);
		mVisitsToFrance = stream.getFieldAsInt(PSID_MVISITSTOFRANCE);
		mDaysSpentInChina = stream.getFieldAsInt(PSID_MDAYSSPENTINCHINA);
		mDaysSpentInEgypt = stream.getFieldAsInt(PSID_MDAYSSPENTINEGYPT);
		mDaysSpentInFrance = stream.getFieldAsInt(PSID_MDAYSSPENTINFRANCE);
		mLastTimeOnVacation = stream.getFieldAsInt(PSID_MLASTTIMEONVACATION);
		
		visaCount = stream.getFieldAsInt(PSID_VISACOUNT);
		visaList.ensureCapacity(visaCount);
		
		Set<Integer> allPsid = stream.getAllFieldKeys();
		for(Integer psid : allPsid) {
			if(psid == PSID_MVISITSTOCHINA) continue;
			if(psid == PSID_MVISITSTOEGYPT) continue;
			if(psid == PSID_MVISITSTOFRANCE) continue;
			if(psid == PSID_MDAYSSPENTINCHINA) continue;
			if(psid == PSID_MDAYSSPENTINEGYPT) continue;
			if(psid == PSID_MDAYSSPENTINFRANCE) continue;
			if(psid == PSID_MLASTTIMEONVACATION) continue;
			if(psid == PSID_VISACOUNT) continue;
			VisaEntry visa = VisaEntry.readPropertyStream(stream.getChildStream(psid));
			if(visa != null) {
				if((PSID_VISALIST ^ visa.guid) == psid) {
					visaList.add(visa);
				}
			}
		}

		return true;
	}
	
	public static VisaManager readBinary(BufferReference dat) {
		if(dat == null) return null;
		VisaManager str = new VisaManager();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static VisaManager readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		VisaManager str = new VisaManager();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static VisaManager readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static VisaManager readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		VisaManager str = new VisaManager();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(VisaEntry visa : visaList){
			size += visa.getBinarySize();
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		visaCount = visaList.size();
		target.addToFile(mVisitsToChina);
		target.addToFile(mVisitsToEgypt);
		target.addToFile(mVisitsToFrance);
		target.addToFile(mDaysSpentInChina);
		target.addToFile(mDaysSpentInEgypt);
		target.addToFile(mDaysSpentInFrance);
		target.addToFile(mLastTimeOnVacation);
		target.addToFile(visaCount);
		for(VisaEntry visa : visaList){
			visa.writeBinaryTo(target);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		visaCount = visaList.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_MVISITSTOCHINA, mVisitsToChina));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MVISITSTOEGYPT, mVisitsToEgypt));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MVISITSTOFRANCE, mVisitsToFrance));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MDAYSSPENTINCHINA, mDaysSpentInChina));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MDAYSSPENTINEGYPT, mDaysSpentInEgypt));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MDAYSSPENTINFRANCE, mDaysSpentInFrance));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MLASTTIMEONVACATION, mLastTimeOnVacation));
		out.write(String.format(" %s=\"%d\"", XMLKEY_VISACOUNT, visaCount));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_VISALIST));
		for(VisaEntry visa : visaList){
			visa.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		visaCount = visaList.size();
		ps.addInt(mVisitsToChina, PSID_MVISITSTOCHINA);
		ps.addInt(mVisitsToEgypt, PSID_MVISITSTOEGYPT);
		ps.addInt(mVisitsToFrance, PSID_MVISITSTOFRANCE);
		ps.addInt(mDaysSpentInChina, PSID_MDAYSSPENTINCHINA);
		ps.addInt(mDaysSpentInEgypt, PSID_MDAYSSPENTINEGYPT);
		ps.addInt(mDaysSpentInFrance, PSID_MDAYSSPENTINFRANCE);
		ps.addInt(mLastTimeOnVacation, PSID_MLASTTIMEONVACATION);
		ps.addInt(visaCount, PSID_VISACOUNT);
		for(VisaEntry visa : visaList){
			ps.addChildStream(visa.toPropertyStream(byte_order, verFieldSize), PSID_VISALIST ^ visa.guid);
		}
	}
	
}
