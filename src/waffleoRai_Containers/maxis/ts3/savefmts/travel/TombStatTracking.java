/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:25:45 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 23:35

package waffleoRai_Containers.maxis.ts3.savefmts.travel;

import java.io.IOException;
import java.io.Writer;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class TombStatTracking extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Skills.TombStatTracking
	
	public static final int PSID_MNUMTREASURESOPENED = 0x08A273E3;
	public static final int PSID_MNUMTRAPSDISARMED = 0x08A273E4;
	public static final int PSID_MNUMCRESCENTKEYSUSED = 0x08A273E5;
	public static final int PSID_MNUMHEARTKEYSUSED = 0x08A273E6;
	public static final int PSID_MNUMSTARKEYSUSED = 0x08A273E7;
	public static final int PSID_MNUMNAMEDKEYSUSED = 0x08A273E8;
	public static final int PSID_MNUMTIMESTORCHED = 0x08A27A1B;
	public static final int PSID_MNUMTIMESSOAKED = 0x08A27A1C;
	public static final int PSID_MNUMTIMESCURSED = 0x08A27A1D;
	public static final int PSID_MFEARTIME = 0x08A2B897;
	public static final int PSID_MMUMMYSNACKSEATEN = 0x08A2B899;
	public static final int PSID_MNUMSHOWERSINACANUSED = 0x08A2B89A;
	public static final int PSID_MANCIENTCOINSCOLLECTED = 0x08A2B89B;
	public static final int PSID_MNUMESCAPEDUSTUSED = 0x08A2B89C;
	public static final int PSID_MNUMRUBBLEPILESCLEARED = 0x08A2B898;
	public static final int PSID_MNUMHOLESINSPECTED = 0x08A37A03;
	public static final int PSID_MMUMMYSDEFEATED = 0x08A37FD4;
	public static final int PSID_MSWITCHESSTOODUPON = 0x08A38205;
	public static final int PSID_MDIVEWELLSEXPLORED = 0x08A38206;
	public static final int PSID_MDRIEDFOODCONSUMED = 0x08A38207;
	public static final int PSID_MTOMBROOMSEXPLORED = 0x08A38208;
	public static final int PSID_MRUBBLEEXCAVATORISNEW = 0x08A39C99;
	public static final int PSID_MWELLEXPLORERISNEW = 0x08A39C9A;
	public static final int PSID_MHAZMATSIMISNEW = 0x08A39C9B;
	public static final int PSID_MTOMBSEXPLOREDINCHINA = 0xE4495859;
	public static final int PSID_MTOMBSEXPLOREDINEGYPT = 0xD5C44365;
	public static final int PSID_MTOMBSEXPLOREDINFRANCE = 0xDD2DE7A1;
	public static final int PSID_MLIFETIMEOPPSSHOWN = 0x08B509E9;

	private static final String XMLKEY_MNUMTREASURESOPENED = "MNumTreasuresOpened";
	private static final String XMLKEY_MNUMTRAPSDISARMED = "MNumTrapsDisarmed";
	private static final String XMLKEY_MNUMCRESCENTKEYSUSED = "MNumCrescentKeysUsed";
	private static final String XMLKEY_MNUMHEARTKEYSUSED = "MNumHeartKeysUsed";
	private static final String XMLKEY_MNUMSTARKEYSUSED = "MNumStarKeysUsed";
	private static final String XMLKEY_MNUMNAMEDKEYSUSED = "MNumNamedKeysUsed";
	private static final String XMLKEY_MNUMTIMESTORCHED = "MNumTimesTorched";
	private static final String XMLKEY_MNUMTIMESSOAKED = "MNumTimesSoaked";
	private static final String XMLKEY_MNUMTIMESCURSED = "MNumTimesCursed";
	private static final String XMLKEY_MFEARTIME = "MFearTime";
	private static final String XMLKEY_MMUMMYSNACKSEATEN = "MMummySnacksEaten";
	private static final String XMLKEY_MNUMSHOWERSINACANUSED = "MNumShowersInACanUsed";
	private static final String XMLKEY_MANCIENTCOINSCOLLECTED = "MAncientCoinsCollected";
	private static final String XMLKEY_MNUMESCAPEDUSTUSED = "MNumEscapeDustUsed";
	private static final String XMLKEY_MNUMRUBBLEPILESCLEARED = "MNumRubblePilesCleared";
	private static final String XMLKEY_MNUMHOLESINSPECTED = "MNumHolesInspected";
	private static final String XMLKEY_MMUMMYSDEFEATED = "MMummysDefeated";
	private static final String XMLKEY_MSWITCHESSTOODUPON = "MSwitchesStoodUpon";
	private static final String XMLKEY_MDIVEWELLSEXPLORED = "MDiveWellsExplored";
	private static final String XMLKEY_MDRIEDFOODCONSUMED = "MDriedFoodConsumed";
	private static final String XMLKEY_MTOMBROOMSEXPLORED = "MTombRoomsExplored";
	private static final String XMLKEY_MRUBBLEEXCAVATORISNEW = "MRubbleExcavatorIsNew";
	private static final String XMLKEY_MWELLEXPLORERISNEW = "MWellExplorerIsNew";
	private static final String XMLKEY_MHAZMATSIMISNEW = "MHazmatSimIsNew";
	private static final String XMLKEY_MTOMBSEXPLOREDINCHINA = "MTombsExploredInChina";
	private static final String XMLKEY_MTOMBSEXPLOREDINEGYPT = "MTombsExploredInEgypt";
	private static final String XMLKEY_MTOMBSEXPLOREDINFRANCE = "MTombsExploredInFrance";
	private static final String XMLKEY_MLIFETIMEOPPSSHOWN = "MLifetimeOppsShown";

	public int mNumTreasuresOpened;
	public int mNumTrapsDisarmed;
	public int mNumCrescentKeysUsed;
	public int mNumHeartKeysUsed;
	public int mNumStarKeysUsed;
	public int mNumNamedKeysUsed;
	public int mNumTimesTorched;
	public int mNumTimesSoaked;
	public int mNumTimesCursed;
	public float mFearTime;
	public int mMummySnacksEaten;
	public int mNumShowersInACanUsed;
	public int mAncientCoinsCollected;
	public int mNumEscapeDustUsed;
	public int mNumRubblePilesCleared;
	public int mNumHolesInspected;
	public int mMummysDefeated;
	public int mSwitchesStoodUpon;
	public int mDiveWellsExplored;
	public int mDriedFoodConsumed;
	public int mTombRoomsExplored;
	public boolean mRubbleExcavatorIsNew;
	public boolean mWellExplorerIsNew;
	public boolean mHazmatSimIsNew;
	public int mTombsExploredInChina;
	public int mTombsExploredInEgypt;
	public int mTombsExploredInFrance;
	public boolean[] mLifetimeOppsShown;

	public TombStatTracking() {
		xmlNodeName = "TombStatTracking";
		baseSize = 100;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mNumTreasuresOpened = dat.nextInt();
		mNumTrapsDisarmed = dat.nextInt();
		mNumCrescentKeysUsed = dat.nextInt();
		mNumHeartKeysUsed = dat.nextInt();
		mNumStarKeysUsed = dat.nextInt();
		mNumNamedKeysUsed = dat.nextInt();
		mNumTimesTorched = dat.nextInt();
		mNumTimesSoaked = dat.nextInt();
		mNumTimesCursed = dat.nextInt();
		mFearTime = Float.intBitsToFloat(dat.nextInt());
		mMummySnacksEaten = dat.nextInt();
		mNumShowersInACanUsed = dat.nextInt();
		mAncientCoinsCollected = dat.nextInt();
		mNumEscapeDustUsed = dat.nextInt();
		mNumRubblePilesCleared = dat.nextInt();
		mNumHolesInspected = dat.nextInt();
		mMummysDefeated = dat.nextInt();
		mSwitchesStoodUpon = dat.nextInt();
		mDiveWellsExplored = dat.nextInt();
		mDriedFoodConsumed = dat.nextInt();
		mTombRoomsExplored = dat.nextInt();
		mRubbleExcavatorIsNew = MaxisTypes.readBinaryBool(dat);
		mWellExplorerIsNew = MaxisTypes.readBinaryBool(dat);
		mHazmatSimIsNew = MaxisTypes.readBinaryBool(dat);
		mTombsExploredInChina = dat.nextInt();
		mTombsExploredInEgypt = dat.nextInt();
		mTombsExploredInFrance = dat.nextInt();
		
		int len = dat.nextInt(); //Addition
		if(len > 0) {
			mLifetimeOppsShown = new boolean[len];
			for(int i = 0; i < len; i++){
				mLifetimeOppsShown[i] = MaxisTypes.readBinaryBool(dat);
			}
		}
		else mLifetimeOppsShown = null;

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_MNUMTREASURESOPENED);
		if(aval != null) mNumTreasuresOpened = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMTRAPSDISARMED);
		if(aval != null) mNumTrapsDisarmed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMCRESCENTKEYSUSED);
		if(aval != null) mNumCrescentKeysUsed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMHEARTKEYSUSED);
		if(aval != null) mNumHeartKeysUsed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMSTARKEYSUSED);
		if(aval != null) mNumStarKeysUsed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMNAMEDKEYSUSED);
		if(aval != null) mNumNamedKeysUsed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMTIMESTORCHED);
		if(aval != null) mNumTimesTorched = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMTIMESSOAKED);
		if(aval != null) mNumTimesSoaked = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMTIMESCURSED);
		if(aval != null) mNumTimesCursed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MFEARTIME);
		if(aval != null) mFearTime = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MMUMMYSNACKSEATEN);
		if(aval != null) mMummySnacksEaten = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMSHOWERSINACANUSED);
		if(aval != null) mNumShowersInACanUsed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MANCIENTCOINSCOLLECTED);
		if(aval != null) mAncientCoinsCollected = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMESCAPEDUSTUSED);
		if(aval != null) mNumEscapeDustUsed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMRUBBLEPILESCLEARED);
		if(aval != null) mNumRubblePilesCleared = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMHOLESINSPECTED);
		if(aval != null) mNumHolesInspected = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MMUMMYSDEFEATED);
		if(aval != null) mMummysDefeated = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MSWITCHESSTOODUPON);
		if(aval != null) mSwitchesStoodUpon = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MDIVEWELLSEXPLORED);
		if(aval != null) mDiveWellsExplored = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MDRIEDFOODCONSUMED);
		if(aval != null) mDriedFoodConsumed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MTOMBROOMSEXPLORED);
		if(aval != null) mTombRoomsExplored = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MRUBBLEEXCAVATORISNEW);
		if(aval != null) mRubbleExcavatorIsNew = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MWELLEXPLORERISNEW);
		if(aval != null) mWellExplorerIsNew = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MHAZMATSIMISNEW);
		if(aval != null) mHazmatSimIsNew = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MTOMBSEXPLOREDINCHINA);
		if(aval != null) mTombsExploredInChina = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MTOMBSEXPLOREDINEGYPT);
		if(aval != null) mTombsExploredInEgypt = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MTOMBSEXPLOREDINFRANCE);
		if(aval != null) mTombsExploredInFrance = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MLIFETIMEOPPSSHOWN);
		if(child != null){
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int len = gclist.size();
			if(len > 0) {
				mLifetimeOppsShown = new boolean[len];
				int i = 0;
				for(Element gc : gclist){
					aval = gc.getAttribute("Value");
					if(aval != null) mLifetimeOppsShown[i] = Boolean.parseBoolean(aval);
					i++;
				}
			}
			else mLifetimeOppsShown = null;
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mNumTreasuresOpened = stream.getFieldAsInt(PSID_MNUMTREASURESOPENED);
		mNumTrapsDisarmed = stream.getFieldAsInt(PSID_MNUMTRAPSDISARMED);
		mNumCrescentKeysUsed = stream.getFieldAsInt(PSID_MNUMCRESCENTKEYSUSED);
		mNumHeartKeysUsed = stream.getFieldAsInt(PSID_MNUMHEARTKEYSUSED);
		mNumStarKeysUsed = stream.getFieldAsInt(PSID_MNUMSTARKEYSUSED);
		mNumNamedKeysUsed = stream.getFieldAsInt(PSID_MNUMNAMEDKEYSUSED);
		mNumTimesTorched = stream.getFieldAsInt(PSID_MNUMTIMESTORCHED);
		mNumTimesSoaked = stream.getFieldAsInt(PSID_MNUMTIMESSOAKED);
		mNumTimesCursed = stream.getFieldAsInt(PSID_MNUMTIMESCURSED);
		mFearTime = stream.getFieldAsFloat(PSID_MFEARTIME);
		mMummySnacksEaten = stream.getFieldAsInt(PSID_MMUMMYSNACKSEATEN);
		mNumShowersInACanUsed = stream.getFieldAsInt(PSID_MNUMSHOWERSINACANUSED);
		mAncientCoinsCollected = stream.getFieldAsInt(PSID_MANCIENTCOINSCOLLECTED);
		mNumEscapeDustUsed = stream.getFieldAsInt(PSID_MNUMESCAPEDUSTUSED);
		mNumRubblePilesCleared = stream.getFieldAsInt(PSID_MNUMRUBBLEPILESCLEARED);
		mNumHolesInspected = stream.getFieldAsInt(PSID_MNUMHOLESINSPECTED);
		mMummysDefeated = stream.getFieldAsInt(PSID_MMUMMYSDEFEATED);
		mSwitchesStoodUpon = stream.getFieldAsInt(PSID_MSWITCHESSTOODUPON);
		mDiveWellsExplored = stream.getFieldAsInt(PSID_MDIVEWELLSEXPLORED);
		mDriedFoodConsumed = stream.getFieldAsInt(PSID_MDRIEDFOODCONSUMED);
		mTombRoomsExplored = stream.getFieldAsInt(PSID_MTOMBROOMSEXPLORED);
		mRubbleExcavatorIsNew = stream.getFieldAsBool(PSID_MRUBBLEEXCAVATORISNEW);
		mWellExplorerIsNew = stream.getFieldAsBool(PSID_MWELLEXPLORERISNEW);
		mHazmatSimIsNew = stream.getFieldAsBool(PSID_MHAZMATSIMISNEW);
		mTombsExploredInChina = stream.getFieldAsInt(PSID_MTOMBSEXPLOREDINCHINA);
		mTombsExploredInEgypt = stream.getFieldAsInt(PSID_MTOMBSEXPLOREDINEGYPT);
		mTombsExploredInFrance = stream.getFieldAsInt(PSID_MTOMBSEXPLOREDINFRANCE);
		mLifetimeOppsShown = stream.getFieldAsBoolArray(PSID_MLIFETIMEOPPSSHOWN);

		return true;
	}
	
	public static TombStatTracking readBinary(BufferReference dat) {
		if(dat == null) return null;
		TombStatTracking str = new TombStatTracking();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static TombStatTracking readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		TombStatTracking str = new TombStatTracking();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static TombStatTracking readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static TombStatTracking readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		TombStatTracking str = new TombStatTracking();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		if(mLifetimeOppsShown != null){
			size += mLifetimeOppsShown.length;
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(mNumTreasuresOpened);
		target.addToFile(mNumTrapsDisarmed);
		target.addToFile(mNumCrescentKeysUsed);
		target.addToFile(mNumHeartKeysUsed);
		target.addToFile(mNumStarKeysUsed);
		target.addToFile(mNumNamedKeysUsed);
		target.addToFile(mNumTimesTorched);
		target.addToFile(mNumTimesSoaked);
		target.addToFile(mNumTimesCursed);
		target.addToFile(Float.floatToRawIntBits(mFearTime));
		target.addToFile(mMummySnacksEaten);
		target.addToFile(mNumShowersInACanUsed);
		target.addToFile(mAncientCoinsCollected);
		target.addToFile(mNumEscapeDustUsed);
		target.addToFile(mNumRubblePilesCleared);
		target.addToFile(mNumHolesInspected);
		target.addToFile(mMummysDefeated);
		target.addToFile(mSwitchesStoodUpon);
		target.addToFile(mDiveWellsExplored);
		target.addToFile(mDriedFoodConsumed);
		target.addToFile(mTombRoomsExplored);
		MaxisTypes.writeBinaryBool(target, mRubbleExcavatorIsNew);
		MaxisTypes.writeBinaryBool(target, mWellExplorerIsNew);
		MaxisTypes.writeBinaryBool(target, mHazmatSimIsNew);
		target.addToFile(mTombsExploredInChina);
		target.addToFile(mTombsExploredInEgypt);
		target.addToFile(mTombsExploredInFrance);
		
		if(mLifetimeOppsShown != null) {
			target.addToFile(mLifetimeOppsShown.length); //Addition
			for(int i = 0; i < mLifetimeOppsShown.length; i++){
				MaxisTypes.writeBinaryBool(target, mLifetimeOppsShown[i]);
			}
		}
		else target.addToFile(0);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMTREASURESOPENED, mNumTreasuresOpened));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMTRAPSDISARMED, mNumTrapsDisarmed));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMCRESCENTKEYSUSED, mNumCrescentKeysUsed));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMHEARTKEYSUSED, mNumHeartKeysUsed));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMSTARKEYSUSED, mNumStarKeysUsed));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMNAMEDKEYSUSED, mNumNamedKeysUsed));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMTIMESTORCHED, mNumTimesTorched));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMTIMESSOAKED, mNumTimesSoaked));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMTIMESCURSED, mNumTimesCursed));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MFEARTIME, mFearTime));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MMUMMYSNACKSEATEN, mMummySnacksEaten));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMSHOWERSINACANUSED, mNumShowersInACanUsed));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MANCIENTCOINSCOLLECTED, mAncientCoinsCollected));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMESCAPEDUSTUSED, mNumEscapeDustUsed));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMRUBBLEPILESCLEARED, mNumRubblePilesCleared));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMHOLESINSPECTED, mNumHolesInspected));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MMUMMYSDEFEATED, mMummysDefeated));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MSWITCHESSTOODUPON, mSwitchesStoodUpon));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MDIVEWELLSEXPLORED, mDiveWellsExplored));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MDRIEDFOODCONSUMED, mDriedFoodConsumed));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MTOMBROOMSEXPLORED, mTombRoomsExplored));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MRUBBLEEXCAVATORISNEW, mRubbleExcavatorIsNew));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MWELLEXPLORERISNEW, mWellExplorerIsNew));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MHAZMATSIMISNEW, mHazmatSimIsNew));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MTOMBSEXPLOREDINCHINA, mTombsExploredInChina));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MTOMBSEXPLOREDINEGYPT, mTombsExploredInEgypt));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MTOMBSEXPLOREDINFRANCE, mTombsExploredInFrance));
		out.write(">\n");
		if(mLifetimeOppsShown != null){
			out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MLIFETIMEOPPSSHOWN));
			for(int i = 0; i < mLifetimeOppsShown.length; i++){
				out.write(indent + String.format("\t\t<ArrayMember Value=\"%b\"/>\n", mLifetimeOppsShown[i]));
			}
			out.write(indent + "\t</Array>\n");
		}
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addInt(mNumTreasuresOpened, PSID_MNUMTREASURESOPENED);
		ps.addInt(mNumTrapsDisarmed, PSID_MNUMTRAPSDISARMED);
		ps.addInt(mNumCrescentKeysUsed, PSID_MNUMCRESCENTKEYSUSED);
		ps.addInt(mNumHeartKeysUsed, PSID_MNUMHEARTKEYSUSED);
		ps.addInt(mNumStarKeysUsed, PSID_MNUMSTARKEYSUSED);
		ps.addInt(mNumNamedKeysUsed, PSID_MNUMNAMEDKEYSUSED);
		ps.addInt(mNumTimesTorched, PSID_MNUMTIMESTORCHED);
		ps.addInt(mNumTimesSoaked, PSID_MNUMTIMESSOAKED);
		ps.addInt(mNumTimesCursed, PSID_MNUMTIMESCURSED);
		ps.addFloat(mFearTime, PSID_MFEARTIME);
		ps.addInt(mMummySnacksEaten, PSID_MMUMMYSNACKSEATEN);
		ps.addInt(mNumShowersInACanUsed, PSID_MNUMSHOWERSINACANUSED);
		ps.addInt(mAncientCoinsCollected, PSID_MANCIENTCOINSCOLLECTED);
		ps.addInt(mNumEscapeDustUsed, PSID_MNUMESCAPEDUSTUSED);
		ps.addInt(mNumRubblePilesCleared, PSID_MNUMRUBBLEPILESCLEARED);
		ps.addInt(mNumHolesInspected, PSID_MNUMHOLESINSPECTED);
		ps.addInt(mMummysDefeated, PSID_MMUMMYSDEFEATED);
		ps.addInt(mSwitchesStoodUpon, PSID_MSWITCHESSTOODUPON);
		ps.addInt(mDiveWellsExplored, PSID_MDIVEWELLSEXPLORED);
		ps.addInt(mDriedFoodConsumed, PSID_MDRIEDFOODCONSUMED);
		ps.addInt(mTombRoomsExplored, PSID_MTOMBROOMSEXPLORED);
		ps.addBool(mRubbleExcavatorIsNew, PSID_MRUBBLEEXCAVATORISNEW);
		ps.addBool(mWellExplorerIsNew, PSID_MWELLEXPLORERISNEW);
		ps.addBool(mHazmatSimIsNew, PSID_MHAZMATSIMISNEW);
		ps.addInt(mTombsExploredInChina, PSID_MTOMBSEXPLOREDINCHINA);
		ps.addInt(mTombsExploredInEgypt, PSID_MTOMBSEXPLOREDINEGYPT);
		ps.addInt(mTombsExploredInFrance, PSID_MTOMBSEXPLOREDINFRANCE);
		ps.addBoolArray(mLifetimeOppsShown, PSID_MLIFETIMEOPPSSHOWN);
	}
	
}
