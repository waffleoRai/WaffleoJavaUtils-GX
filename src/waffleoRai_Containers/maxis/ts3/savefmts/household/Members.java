/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 18:05:35 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 18:21

package waffleoRai_Containers.maxis.ts3.savefmts.household;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.SimDescription;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class Members extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.CAS.Household

	public static final int PSID_COUNT = 0xE9B96005;
	public static final int PSID_ALLSIMDESCRIPTIONLIST = 0x00000000;

	private static final String XMLKEY_COUNT = "Count";
	private static final String XMLKEY_ALLSIMDESCRIPTIONLIST = "AllSimDescriptionList";

	public int count;
	public ArrayList<SimDescription> allSimDescriptionList = new ArrayList<SimDescription>();

	public Members() {
		xmlNodeName = "Members";
		baseSize = 4;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		count = dat.nextInt();
		allSimDescriptionList.ensureCapacity(count);
		for(int i = 0; i < count; i++){
			SimDescription allSimDescription = SimDescription.readBinary(dat);
			if(allSimDescription != null) allSimDescriptionList.add(allSimDescription);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_COUNT);
		if(aval != null) count = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_ALLSIMDESCRIPTIONLIST);
		if(child != null){
			allSimDescriptionList.ensureCapacity(count);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "SimDescription");
			for(Element gc : gclist){
				allSimDescriptionList.add(SimDescription.readXMLNode(gc));
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;

		count = stream.getFieldAsInt(PSID_COUNT);
		allSimDescriptionList.ensureCapacity(count);
		for(int i = 0; i < count; i++){
			SimDescription allSimDescription = SimDescription.readPropertyStream(stream.getChildStream(PSID_ALLSIMDESCRIPTIONLIST+i));
			if(allSimDescription != null) allSimDescriptionList.add(allSimDescription);
		}

		return true;
	}
	
	public static Members readBinary(BufferReference dat) {
		if(dat == null) return null;
		Members str = new Members();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static Members readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		Members str = new Members();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static Members readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static Members readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		Members str = new Members();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(SimDescription allSimDescription : allSimDescriptionList){
			size += allSimDescription.getBinarySize();
		}
		return size;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		count = allSimDescriptionList.size();
		target.addToFile(count);
		for(SimDescription allSimDescription : allSimDescriptionList){
			allSimDescription.writeBinaryTo(target);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		count = allSimDescriptionList.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_COUNT, count));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_ALLSIMDESCRIPTIONLIST));
		for(SimDescription allSimDescription : allSimDescriptionList){
			allSimDescription.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;

		count = allSimDescriptionList.size();
		int i = 0;
		ps.addInt(count, PSID_COUNT);
		i = 0;
		for(SimDescription allSimDescription : allSimDescriptionList){
			ps.addChildStream(allSimDescription.toPropertyStream(
					ps.getByteOrder(), ps.getVersionFieldSize()), PSID_ALLSIMDESCRIPTIONLIST+i);
			i++;
		}
	}
	
}
