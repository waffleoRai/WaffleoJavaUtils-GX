/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 18:05:35 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 18:18

package waffleoRai_Containers.maxis.ts3.savefmts.household;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.social.Relationship;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class HouseholdRelations extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.CAS.Household

	public static final int PSID_RELATIONSHIPLIST = 0x00000000;
	public static final int PSID_COUNT = 0x1265C8A0;

	private static final String XMLKEY_RELATIONSHIPLIST = "RelationshipList";
	private static final String XMLKEY_COUNT = "Count";

	public ArrayList<MemberRelationship> relationshipList = new ArrayList<MemberRelationship>();
	public int count;

	public HouseholdRelations() {
		xmlNodeName = "HouseholdRelations";
		baseSize = 4;
	}
	
	/*----- Inner Classes -----*/

	public static class MemberRelationship extends TS3Saveable{

		public static final int PSID_SIMA = 0xC9C68605;
		public static final int PSID_SIMB = 0xBF0A71C2;
		//public static final int PSID_RELATIONDATA = 0x00000000;

		private static final String XMLKEY_SIMA = "SimA";
		private static final String XMLKEY_SIMB = "SimB";
		private static final String XMLKEY_RELATIONDATA = "RelationData";

		public long simA;
		public long simB;
		public Relationship relationData;

		public MemberRelationship() {
			xmlNodeName = "MemberRelationship";
			baseSize = 16;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			simA = dat.nextLong();
			simB = dat.nextLong();
			relationData = Relationship.readBinary(dat);

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_SIMA);
			if(aval != null) simA = StringUtils.parseUnsignedLong(aval);
			aval = xml_element.getAttribute(XMLKEY_SIMB);
			if(aval != null) simB = StringUtils.parseUnsignedLong(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Relationship", "VarName", XMLKEY_RELATIONDATA);
			if(child != null) relationData = Relationship.readXMLNode(child);

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			simA = stream.getFieldAsLong(PSID_SIMA);
			simB = stream.getFieldAsLong(PSID_SIMB);
			relationData = Relationship.readPropertyStream(stream); //Same stream

			return true;
		}
		
		public static MemberRelationship readBinary(BufferReference dat) {
			if(dat == null) return null;
			MemberRelationship str = new MemberRelationship();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static MemberRelationship readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			MemberRelationship str = new MemberRelationship();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static MemberRelationship readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static MemberRelationship readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			MemberRelationship str = new MemberRelationship();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			size += relationData.getBinarySize();
			return size;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			target.addToFile(simA);
			target.addToFile(simB);
			relationData.writeBinaryTo(target);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"0x%016x\"", XMLKEY_SIMA, simA));
			out.write(String.format(" %s=\"0x%016x\"", XMLKEY_SIMB, simB));
			out.write(">\n");
			relationData.writeXMLNode(out, indent + "\t", XMLKEY_RELATIONDATA);
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			
			ps.addLong(simA, PSID_SIMA);
			ps.addLong(simB, PSID_SIMB);
			relationData.addToPropertyStream(ps); //Same stream
		}
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		count = dat.nextInt(); //THIS IS SWAPPED FROM VANILLA
		relationshipList.ensureCapacity(count);
		for(int i = 0; i < count; i++){
			MemberRelationship memRelation = MemberRelationship.readBinary(dat);
			if(memRelation != null) relationshipList.add(memRelation);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_RELATIONSHIPLIST);
		if(child != null){
			relationshipList.ensureCapacity(count);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "MemberRelationship");
			for(Element gc : gclist){
				relationshipList.add(MemberRelationship.readXMLNode(gc));
			}
		}
		aval = xml_element.getAttribute(XMLKEY_COUNT);
		if(aval != null) count = StringUtils.parseUnsignedInt(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		count = stream.getFieldAsInt(PSID_COUNT);
		relationshipList.ensureCapacity(count);
		for(int i = 0; i < count; i++){
			MemberRelationship memRelation = MemberRelationship.readPropertyStream(stream.getChildStream(PSID_RELATIONSHIPLIST+i));
			if(memRelation != null) relationshipList.add(memRelation);
		}

		return true;
	}
	
	public static HouseholdRelations readBinary(BufferReference dat) {
		if(dat == null) return null;
		HouseholdRelations str = new HouseholdRelations();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static HouseholdRelations readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		HouseholdRelations str = new HouseholdRelations();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static HouseholdRelations readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static HouseholdRelations readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		HouseholdRelations str = new HouseholdRelations();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(MemberRelationship memRelation : relationshipList){
			size += memRelation.getBinarySize();
		}
		return size;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		count = relationshipList.size();
		for(MemberRelationship memRelation : relationshipList){
			memRelation.writeBinaryTo(target);
		}
		target.addToFile(count);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		count = relationshipList.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_COUNT, count));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_RELATIONSHIPLIST));
		for(MemberRelationship memRelation : relationshipList){
			memRelation.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		
		count = relationshipList.size();
		int i = 0;
		i = 0;
		for(MemberRelationship memRelation : relationshipList){
			ps.addChildStream(memRelation.toPropertyStream(ps.getByteOrder(), ps.getVersionFieldSize()), PSID_RELATIONSHIPLIST+i);
			i++;
		}
		ps.addInt(count, PSID_COUNT);

	}
	
}
