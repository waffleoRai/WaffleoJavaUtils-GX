/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 18:05:35 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 18:42

package waffleoRai_Containers.maxis.ts3.savefmts.household;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.ServiceType;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.WorldName;
import waffleoRai_Containers.maxis.ts3.savefmts.travel.UniqueObjectKey;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class Household extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.CAS.Household
	
	public static final int COMPL_OPPS_LEN = 0; //TODO
	public static final int WARDROBE_LEN = 0; //TODO

	public static final int PSID_NAME = 0x50E3D25C;
	public static final int PSID_MFAMILYFUNDS = 0x33B96433;
	public static final int PSID_BIOTEXT = 0xD96B03F8;
	public static final int PSID_TIMESTAMP = 0x6384BBE4;
	public static final int PSID_MBLIFETIMEHAPPINESSNOTIFICATIONSHOWN = 0x2213CA71;
	public static final int PSID_MUNPAIDBILLS = 0x08AF84D8;
	public static final int PSID_LOTHOMECOST = 0xC6FDB12D;
	public static final int PSID_MMEMBERS = 0x91FA3ACE;
	public static final int PSID_MRELATIONSHIPS = 0xA14EE9B6;
	public static final int PSID_MANCIENTCOINCOUNT = 0x0872A7C9;
	public static final int PSID_UNIQUEOBJECTSOBTAINED = 0x4723B840;
	public static final int PSID_KEYSTONEPANELSUSEDCOUNT = 0x07BCD11D;
	public static final int PSID_KEYSTONEPANELSUSEDKEYS = 0x00000000;
	public static final int PSID_KEYSTONEPANELWORLD_BASE = 0x08BC9C54;
	public static final int PSID_KEYSTONEPANELUSED_BASE = 0x09BCD0E7;
	public static final int PSID_MCOMPLETEDHOUSEHOLDOPPORTUNITIES = 0x08EAE351;
	public static final int PSID_MMONEYSAVED = 0x08EAE352;
	public static final int PSID_MWARDROBECASPARTS = 0x092B562C;
	public static final int PSID_MSERVICEUNIFORMS = 0x095175F0;

	private static final String XMLKEY_NAME = "Name";
	private static final String XMLKEY_MFAMILYFUNDS = "FamilyFunds";
	private static final String XMLKEY_BIOTEXT = "BioText";
	private static final String XMLKEY_TIMESTAMP = "Timestamp";
	private static final String XMLKEY_MBLIFETIMEHAPPINESSNOTIFICATIONSHOWN = "bLifetimeHappinessNotificationShown";
	private static final String XMLKEY_MUNPAIDBILLS = "UnpaidBills";
	private static final String XMLKEY_LOTHOMECOST = "LotHomeCost";
	private static final String XMLKEY_MMEMBERS = "Members";
	private static final String XMLKEY_MRELATIONSHIPS = "Relationships";
	private static final String XMLKEY_MANCIENTCOINCOUNT = "AncientCoinCount";
	private static final String XMLKEY_UNIQUEOBJECTSOBTAINED = "UniqueObjectsObtained";
	private static final String XMLKEY_KEYSTONEPANELSUSEDCOUNT = "KeystonePanelsUsedCount";
	private static final String XMLKEY_KEYSTONEPANELSUSEDKEYS = "KeystonePanelsUsedKeys";
	private static final String XMLKEY_MCOMPLETEDHOUSEHOLDOPPORTUNITIES = "CompletedHouseholdOpportunities";
	private static final String XMLKEY_MMONEYSAVED = "MoneySaved";
	private static final String XMLKEY_MWARDROBECASPARTS = "WardrobeCasParts";
	private static final String XMLKEY_MSERVICEUNIFORMS = "ServiceUniforms";

	public String name;
	public int mFamilyFunds;
	public String bioText;
	public long timestamp;
	public boolean mbLifetimeHappinessNotificationShown;
	public int mUnpaidBills;
	public int lotHomeCost;
	public Members mMembers;
	public HouseholdRelations mRelationships;
	public int mAncientCoinCount;
	public long uniqueObjectsObtained;
	public int keystonePanelsUsedCount;
	public ArrayList<UsedKeystonePanelInfo> keystonePanelsUsedKeys = new ArrayList<UsedKeystonePanelInfo>();
	public long[] mCompletedHouseholdOpportunities;
	public int mMoneySaved;
	public long[] mWardrobeCasParts;
	public long mServiceUniforms;

	public Household() {
		xmlNodeName = "Household";
		baseSize = 73;
	}
	
	/*----- Inner Classes -----*/

	public static class UsedKeystonePanelInfo extends TS3Saveable{

		public static final int PANELSUSED_LEN = 1; //TODO
		
		private static final String XMLKEY_KEY = "KeyValue";
		private static final String XMLKEY_MKEYSTONEPANELSUSED = "KeystonePanelsUsed";

		public int key;
		public String[] mKeystonePanelsUsed;
		
		public int psidKey_Key;
		public int psidKey_PanelsUsed;

		public UsedKeystonePanelInfo() {
			xmlNodeName = "UsedKeystonePanelInfo";
			baseSize = 4;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			key = dat.nextInt();
			mKeystonePanelsUsed = new String[PANELSUSED_LEN];
			for(int i = 0; i < PANELSUSED_LEN; i++){
				mKeystonePanelsUsed[i] = MaxisTypes.readMaxisString(dat);
			}

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_KEY);
			if(aval != null) key = WorldName.valueFromString(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MKEYSTONEPANELSUSED);
			if(child != null){
				mKeystonePanelsUsed = new String[PANELSUSED_LEN];
				List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
				int i = 0;
				for(Element gc : gclist){
					aval = gc.getAttribute("Value");
					if(aval != null) mKeystonePanelsUsed[i] = aval;
					i++;
				}
			}

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			key = stream.getFieldAsInt(psidKey_Key);
			mKeystonePanelsUsed = stream.getFieldAsStringArray(psidKey_PanelsUsed);

			return true;
		}
		
		public static UsedKeystonePanelInfo readBinary(BufferReference dat) {
			if(dat == null) return null;
			UsedKeystonePanelInfo str = new UsedKeystonePanelInfo();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static UsedKeystonePanelInfo readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			UsedKeystonePanelInfo str = new UsedKeystonePanelInfo();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			for(int i = 0; i < mKeystonePanelsUsed.length; i++){
				size += (mKeystonePanelsUsed[i].length() << 1);
			}
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			//count = mKeystonePanelsUsed.length;
			target.addToFile(key);
			for(int i = 0; i < mKeystonePanelsUsed.length; i++){
				MaxisTypes.serializeMaxisStringTo(mKeystonePanelsUsed[i], target);
			}

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			//count = mKeystonePanelsUsed.length;
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"%s\"", XMLKEY_KEY, WorldName.stringFromValue(key)));
			out.write(">\n");
			out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MKEYSTONEPANELSUSED));
			for(int i = 0; i < mKeystonePanelsUsed.length; i++){
				out.write(indent + String.format("\t\t<ArrayMember Value=\"%s\"/>\n", mKeystonePanelsUsed[i]));
			}
			out.write(indent + "\t</Array>\n");
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			//count = mKeystonePanelsUsed.length;
			ps.addInt(key, psidKey_Key);
			ps.addStringArray(mKeystonePanelsUsed, psidKey_PanelsUsed);
		}
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		name = MaxisTypes.readMaxisString(dat);
		mFamilyFunds = dat.nextInt();
		bioText = MaxisTypes.readMaxisString(dat);
		timestamp = dat.nextLong();
		mbLifetimeHappinessNotificationShown = MaxisTypes.readBinaryBool(dat);
		mUnpaidBills = dat.nextInt();
		lotHomeCost = dat.nextInt();
		mMembers = Members.readBinary(dat);
		mRelationships = HouseholdRelations.readBinary(dat);
		mAncientCoinCount = dat.nextInt();
		uniqueObjectsObtained = dat.nextLong();
		keystonePanelsUsedCount = dat.nextInt();
		keystonePanelsUsedKeys.ensureCapacity(keystonePanelsUsedCount);
		for(int i = 0; i < keystonePanelsUsedCount; i++){
			UsedKeystonePanelInfo keystonePanelsUsedKey = UsedKeystonePanelInfo.readBinary(dat);
			if(keystonePanelsUsedKey != null) keystonePanelsUsedKeys.add(keystonePanelsUsedKey);
		}
		mCompletedHouseholdOpportunities = new long[COMPL_OPPS_LEN];
		for(int i = 0; i < COMPL_OPPS_LEN; i++){
			mCompletedHouseholdOpportunities[i] = dat.nextLong();
		}
		mMoneySaved = dat.nextInt();
		mWardrobeCasParts = new long[WARDROBE_LEN];
		for(int i = 0; i < WARDROBE_LEN; i++){
			mWardrobeCasParts[i] = dat.nextLong();
		}
		mServiceUniforms = dat.nextLong();

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_NAME);
		if(aval != null) name = aval;
		aval = xml_element.getAttribute(XMLKEY_MFAMILYFUNDS);
		if(aval != null) mFamilyFunds = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_BIOTEXT);
		if(aval != null) bioText = aval;
		aval = xml_element.getAttribute(XMLKEY_TIMESTAMP);
		if(aval != null) timestamp = StringUtils.parseSignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MBLIFETIMEHAPPINESSNOTIFICATIONSHOWN);
		if(aval != null) mbLifetimeHappinessNotificationShown = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MUNPAIDBILLS);
		if(aval != null) mUnpaidBills = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_LOTHOMECOST);
		if(aval != null) lotHomeCost = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Members", "VarName", XMLKEY_MMEMBERS);
		if(child != null) mMembers = Members.readXMLNode(child);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "HouseholdRelations", "VarName", XMLKEY_MRELATIONSHIPS);
		if(child != null) mRelationships = HouseholdRelations.readXMLNode(child);
		aval = xml_element.getAttribute(XMLKEY_MANCIENTCOINCOUNT);
		if(aval != null) mAncientCoinCount = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_UNIQUEOBJECTSOBTAINED);
		if(aval != null) uniqueObjectsObtained = UniqueObjectKey.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_KEYSTONEPANELSUSEDCOUNT);
		if(aval != null) keystonePanelsUsedCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_KEYSTONEPANELSUSEDKEYS);
		if(child != null){
			keystonePanelsUsedKeys.ensureCapacity(keystonePanelsUsedCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "UsedKeystonePanelInfo");
			for(Element gc : gclist){
				keystonePanelsUsedKeys.add(UsedKeystonePanelInfo.readXMLNode(gc));
			}
		}
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MCOMPLETEDHOUSEHOLDOPPORTUNITIES);
		if(child != null){
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int len = gclist.size();
			if(len > 0) {
				mCompletedHouseholdOpportunities = new long[len];
				int i = 0;
				for(Element gc : gclist){
					aval = gc.getAttribute("Value");
					if(aval != null) mCompletedHouseholdOpportunities[i] = StringUtils.parseUnsignedLong(aval);
					i++;
				}	
			}
			else mCompletedHouseholdOpportunities = new long[COMPL_OPPS_LEN];
		}
		aval = xml_element.getAttribute(XMLKEY_MMONEYSAVED);
		if(aval != null) mMoneySaved = StringUtils.parseUnsignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MWARDROBECASPARTS);
		if(child != null){
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int len = gclist.size();
			if(len > 0) {
				mWardrobeCasParts = new long[len];
				int i = 0;
				for(Element gc : gclist){
					aval = gc.getAttribute("Value");
					if(aval != null) mWardrobeCasParts[i] = StringUtils.parseUnsignedLong(aval);
					i++;
				}	
			}
			else mWardrobeCasParts = new long[WARDROBE_LEN];
		}
		aval = xml_element.getAttribute(XMLKEY_MSERVICEUNIFORMS);
		if(aval != null) mServiceUniforms = ServiceType.valueFromString(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		name = stream.getFieldAsString(PSID_NAME);
		mFamilyFunds = stream.getFieldAsInt(PSID_MFAMILYFUNDS);
		bioText = stream.getFieldAsString(PSID_BIOTEXT);
		timestamp = stream.getFieldAsLong(PSID_TIMESTAMP);
		mbLifetimeHappinessNotificationShown = stream.getFieldAsBool(PSID_MBLIFETIMEHAPPINESSNOTIFICATIONSHOWN);
		mUnpaidBills = stream.getFieldAsInt(PSID_MUNPAIDBILLS);
		lotHomeCost = stream.getFieldAsInt(PSID_LOTHOMECOST);
		mMembers = Members.readPropertyStream(stream.getChildStream(PSID_MMEMBERS));
		mRelationships = HouseholdRelations.readPropertyStream(stream.getChildStream(PSID_MRELATIONSHIPS));
		mAncientCoinCount = stream.getFieldAsInt(PSID_MANCIENTCOINCOUNT);
		uniqueObjectsObtained = stream.getFieldAsLong(PSID_UNIQUEOBJECTSOBTAINED);
		keystonePanelsUsedCount = stream.getFieldAsInt(PSID_KEYSTONEPANELSUSEDCOUNT);
		keystonePanelsUsedKeys.ensureCapacity(keystonePanelsUsedCount);
		for(int i = 0; i < keystonePanelsUsedCount; i++){
			UsedKeystonePanelInfo keystonePanelsUsedKey = new UsedKeystonePanelInfo();
			keystonePanelsUsedKey.psidKey_Key = PSID_KEYSTONEPANELWORLD_BASE + i;
			keystonePanelsUsedKey.psidKey_PanelsUsed = PSID_KEYSTONEPANELUSED_BASE + i;
			keystonePanelsUsedKey.readPropertyStream_internal(stream);
			keystonePanelsUsedKeys.add(keystonePanelsUsedKey);
		}
		mCompletedHouseholdOpportunities = stream.getFieldAsLongArray(PSID_MCOMPLETEDHOUSEHOLDOPPORTUNITIES);
		mMoneySaved = stream.getFieldAsInt(PSID_MMONEYSAVED);
		mWardrobeCasParts = stream.getFieldAsLongArray(PSID_MWARDROBECASPARTS);
		mServiceUniforms = stream.getFieldAsLong(PSID_MSERVICEUNIFORMS);

		return true;
	}
	
	public static Household readBinary(BufferReference dat) {
		if(dat == null) return null;
		Household str = new Household();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static Household readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		Household str = new Household();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static Household readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static Household readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		Household str = new Household();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += (name.length() << 1);
		size += (bioText.length() << 1);
		size += mMembers.getBinarySize();
		size += mRelationships.getBinarySize();
		for(UsedKeystonePanelInfo keystonePanelsUsedKeys : keystonePanelsUsedKeys){
			size += keystonePanelsUsedKeys.getBinarySize();
		}
		size += (mCompletedHouseholdOpportunities.length * 8);
		size += (mWardrobeCasParts.length * 8);
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		keystonePanelsUsedCount = keystonePanelsUsedKeys.size();
		MaxisTypes.serializeMaxisStringTo( name, target);
		target.addToFile(mFamilyFunds);
		MaxisTypes.serializeMaxisStringTo( bioText, target);
		target.addToFile(timestamp);
		MaxisTypes.writeBinaryBool(target, mbLifetimeHappinessNotificationShown);
		target.addToFile(mUnpaidBills);
		target.addToFile(lotHomeCost);
		mMembers.writeBinaryTo(target);
		mRelationships.writeBinaryTo(target);
		target.addToFile(mAncientCoinCount);
		target.addToFile(uniqueObjectsObtained);
		target.addToFile(keystonePanelsUsedCount);
		for(UsedKeystonePanelInfo keystonePanelsUsedKeys : keystonePanelsUsedKeys){
			keystonePanelsUsedKeys.writeBinaryTo(target);
		}
		for(int i = 0; i < mCompletedHouseholdOpportunities.length; i++){
			target.addToFile(mCompletedHouseholdOpportunities[i]);
		}
		target.addToFile(mMoneySaved);
		for(int i = 0; i < mWardrobeCasParts.length; i++){
			target.addToFile(mWardrobeCasParts[i]);
		}
		target.addToFile(mServiceUniforms);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		keystonePanelsUsedCount = keystonePanelsUsedKeys.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%s\"", XMLKEY_NAME, name));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MFAMILYFUNDS, mFamilyFunds));
		out.write(String.format(" %s=\"%s\"", XMLKEY_BIOTEXT, bioText));
		out.write(String.format(" %s=\"%d\"", XMLKEY_TIMESTAMP, timestamp));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MBLIFETIMEHAPPINESSNOTIFICATIONSHOWN, mbLifetimeHappinessNotificationShown));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MUNPAIDBILLS, mUnpaidBills));
		out.write(String.format(" %s=\"%d\"", XMLKEY_LOTHOMECOST, lotHomeCost));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MANCIENTCOINCOUNT, mAncientCoinCount));
		out.write(String.format(" %s=\"%s\"", XMLKEY_UNIQUEOBJECTSOBTAINED, UniqueObjectKey.stringFromValue(uniqueObjectsObtained)));
		out.write(String.format(" %s=\"%d\"", XMLKEY_KEYSTONEPANELSUSEDCOUNT, keystonePanelsUsedCount));
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_MMONEYSAVED, mMoneySaved));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MSERVICEUNIFORMS, ServiceType.stringFromValue(mServiceUniforms)));
		out.write(">\n");
		mMembers.writeXMLNode(out, indent + "\t", XMLKEY_MMEMBERS);
		mRelationships.writeXMLNode(out, indent + "\t", XMLKEY_MRELATIONSHIPS);
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_KEYSTONEPANELSUSEDKEYS));
		for(UsedKeystonePanelInfo keystonePanelsUsedKeys : keystonePanelsUsedKeys){
			keystonePanelsUsedKeys.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MCOMPLETEDHOUSEHOLDOPPORTUNITIES));
		for(int i = 0; i < mCompletedHouseholdOpportunities.length; i++){
			out.write(indent + String.format("\t\t<ArrayMember Value=\"0x%016x\"/>\n", mCompletedHouseholdOpportunities[i]));
		}
		out.write(indent + "\t</Array>\n");
		out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MWARDROBECASPARTS));
		for(int i = 0; i < mWardrobeCasParts.length; i++){
			out.write(indent + String.format("\t\t<ArrayMember Value=\"0x%016x\"/>\n", mWardrobeCasParts[i]));
		}
		out.write(indent + "\t</Array>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		keystonePanelsUsedCount = keystonePanelsUsedKeys.size();
		int i = 0;
		ps.addString(name, PSID_NAME);
		ps.addInt(mFamilyFunds, PSID_MFAMILYFUNDS);
		ps.addString(bioText, PSID_BIOTEXT);
		ps.addLong(timestamp, PSID_TIMESTAMP);
		ps.addBool(mbLifetimeHappinessNotificationShown, PSID_MBLIFETIMEHAPPINESSNOTIFICATIONSHOWN);
		ps.addInt(mUnpaidBills, PSID_MUNPAIDBILLS);
		ps.addInt(lotHomeCost, PSID_LOTHOMECOST);
		ps.addChildStream(mMembers.toPropertyStream(byte_order, verFieldSize), PSID_MMEMBERS);
		ps.addChildStream(mRelationships.toPropertyStream(byte_order, verFieldSize), PSID_MRELATIONSHIPS);
		ps.addInt(mAncientCoinCount, PSID_MANCIENTCOINCOUNT);
		ps.addLong(uniqueObjectsObtained, PSID_UNIQUEOBJECTSOBTAINED);
		ps.addInt(keystonePanelsUsedCount, PSID_KEYSTONEPANELSUSEDCOUNT);
		i = 0;
		for(UsedKeystonePanelInfo keystonePanelsUsedKey : keystonePanelsUsedKeys){
			keystonePanelsUsedKey.psidKey_Key = PSID_KEYSTONEPANELWORLD_BASE + i;
			keystonePanelsUsedKey.psidKey_PanelsUsed = PSID_KEYSTONEPANELUSED_BASE + i;
			keystonePanelsUsedKey.addToPropertyStream(ps);
			i++;
		}
		ps.addLongArray(mCompletedHouseholdOpportunities, PSID_MCOMPLETEDHOUSEHOLDOPPORTUNITIES);
		ps.addInt(mMoneySaved, PSID_MMONEYSAVED);
		ps.addLongArray(mWardrobeCasParts, PSID_MWARDROBECASPARTS);
		ps.addLong(mServiceUniforms, PSID_MSERVICEUNIFORMS);
	}
	
}
