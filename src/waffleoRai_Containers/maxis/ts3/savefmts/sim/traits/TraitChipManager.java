/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Tue, 31 Dec 2024 15:23:12 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 22:54

package waffleoRai_Containers.maxis.ts3.savefmts.sim.traits;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class TraitChipManager extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.ActorSystems.TraitChipManager

	public static final int PSID_TRAITCHIPCOUNT = 0x0F44789D;
	public static final int PSID_MNUMTRAITCHIPSLOTS = 0xD3852F9E;
	public static final int PSID_TRAITCHIPS = 0x0F44789D;

	private static final String XMLKEY_TRAITCHIPCOUNT = "TraitChipCount";
	private static final String XMLKEY_MNUMTRAITCHIPSLOTS = "NumTraitChipSlots";
	private static final String XMLKEY_TRAITCHIPS = "TraitChips";

	public int traitChipCount;
	public int mNumTraitChipSlots;
	public ArrayList<TraitChipEntry> traitChips = new ArrayList<TraitChipEntry>();

	public TraitChipManager() {
		xmlNodeName = "TraitChipManager";
		baseSize = 8;
	}
	
	/*----- Inner Classes -----*/

	public static class TraitChipEntry extends TS3Saveable{

		public static final int PSID_TRAITCHIPNAME = 0x0F447900;
		public static final int PSID_TRAITCHIPSLOT = 0x0F448000;

		private static final String XMLKEY_TRAITCHIPNAME = "TraitChipName";
		private static final String XMLKEY_TRAITCHIPSLOT = "TraitChipSlot";

		public long traitChipName;
		public int traitChipSlot;

		public TraitChipEntry() {
			xmlNodeName = "TraitChipEntry";
			baseSize = 4;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			traitChipName = dat.nextLong();
			traitChipSlot = dat.nextInt();

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			aval = xml_element.getAttribute(XMLKEY_TRAITCHIPNAME);
			if(aval != null) traitChipName = TraitChipName.valueFromString(aval);
			aval = xml_element.getAttribute(XMLKEY_TRAITCHIPSLOT);
			if(aval != null) traitChipSlot = StringUtils.parseSignedInt(aval);

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			traitChipName = stream.getFieldAsLong(PSID_TRAITCHIPNAME);
			traitChipSlot = stream.getFieldAsInt(PSID_TRAITCHIPSLOT);
			return true;
		}
		
		public static TraitChipEntry readBinary(BufferReference dat) {
			if(dat == null) return null;
			TraitChipEntry str = new TraitChipEntry();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static TraitChipEntry readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			TraitChipEntry str = new TraitChipEntry();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static TraitChipEntry readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static TraitChipEntry readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			TraitChipEntry str = new TraitChipEntry();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			target.addToFile(traitChipName);
			target.addToFile(traitChipSlot);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"%s\"", XMLKEY_TRAITCHIPNAME, TraitChipName.stringFromValue(traitChipName)));
			out.write(String.format(" %s=\"%d\"", XMLKEY_TRAITCHIPSLOT, traitChipSlot));
			out.write("/>\n");

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			ps.addLong(traitChipName, PSID_TRAITCHIPNAME);
			ps.addInt(traitChipSlot, PSID_TRAITCHIPSLOT);
		}
		
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		traitChipCount = dat.nextInt();
		mNumTraitChipSlots = dat.nextInt();
		traitChips.ensureCapacity(traitChipCount);
		for(int i = 0; i < traitChipCount; i++){
			TraitChipEntry traitChip = TraitChipEntry.readBinary(dat);
			if(traitChip != null) traitChips.add(traitChip);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_TRAITCHIPCOUNT);
		if(aval != null) traitChipCount = StringUtils.parseUnsignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMTRAITCHIPSLOTS);
		if(aval != null) mNumTraitChipSlots = StringUtils.parseUnsignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_TRAITCHIPS);
		if(child != null){
			traitChips.ensureCapacity(traitChipCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "TraitChipEntry");
			for(Element gc : gclist){
				traitChips.add(TraitChipEntry.readXMLNode(gc));
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		traitChipCount = stream.getFieldAsInt(PSID_TRAITCHIPCOUNT);
		mNumTraitChipSlots = stream.getFieldAsInt(PSID_MNUMTRAITCHIPSLOTS);
		traitChips.ensureCapacity(traitChipCount);
		for(int i = 0; i < traitChipCount; i++){
			TraitChipEntry traitChip = TraitChipEntry.readPropertyStream(stream.getChildStream(PSID_TRAITCHIPS+i));
			if(traitChip != null) traitChips.add(traitChip);
		}

		return true;
	}
	
	public static TraitChipManager readBinary(BufferReference dat) {
		if(dat == null) return null;
		TraitChipManager str = new TraitChipManager();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static TraitChipManager readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		TraitChipManager str = new TraitChipManager();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static TraitChipManager readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static TraitChipManager readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		TraitChipManager str = new TraitChipManager();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(TraitChipEntry traitChip : traitChips){
			size += traitChip.getBinarySize();
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		traitChipCount = traitChips.size();
		target.addToFile(traitChipCount);
		target.addToFile(mNumTraitChipSlots);
		for(TraitChipEntry traitChip : traitChips){
			traitChip.writeBinaryTo(target);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		traitChipCount = traitChips.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_TRAITCHIPCOUNT, traitChipCount));
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_MNUMTRAITCHIPSLOTS, mNumTraitChipSlots));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_TRAITCHIPS));
		for(TraitChipEntry traitChip : traitChips){
			traitChip.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		traitChipCount = traitChips.size();
		int i = 0;
		ps.addInt(traitChipCount, PSID_TRAITCHIPCOUNT);
		ps.addInt(mNumTraitChipSlots, PSID_MNUMTRAITCHIPSLOTS);
		i = 0;
		for(TraitChipEntry traitChip : traitChips){
			ps.addChildStream(traitChip.toPropertyStream(byte_order, verFieldSize), PSID_TRAITCHIPS+i);
			i++;
		}
	}
	
}
