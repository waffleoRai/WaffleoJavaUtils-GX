/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:03:15 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:23

package waffleoRai_Containers.maxis.ts3.savefmts.sim.cas;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class OutfitCategoryMap extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.CAS.OutfitCategoryMap

	public static final int PSID_CATEGORYCOUNT = 0x8D89FE46;
	public static final int PSID_OUTFITCATEGORYENTRIES = 0x00000000;

	private static final String XMLKEY_CATEGORYCOUNT = "CategoryCount";
	private static final String XMLKEY_OUTFITCATEGORYENTRIES = "OutfitCategoryEntries";

	public int categoryCount;
	public ArrayList<OutfitCategoryEntry> outfitCategoryEntries = new ArrayList<OutfitCategoryEntry>();

	public OutfitCategoryMap() {
		xmlNodeName = "OutfitCategoryMap";
		baseSize = 4;
	}
	
	/*----- Inner Classes -----*/

	public static class OutfitCategoryEntry extends TS3Saveable{
		
		public static final int OUTFITS_LEN = 0;

		public static final int PSID_CATEGORY = 0xA1865FE1;
		public static final int PSID_OUTFITS = 0xE15A06AC;

		private static final String XMLKEY_CATEGORY = "Category";
		private static final String XMLKEY_OUTFITS = "Outfits";

		public int category;
		public int[] outfits;

		public OutfitCategoryEntry() {
			xmlNodeName = "OutfitCategoryEntry";
			baseSize = 8;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			category = dat.nextInt();
			outfits = new int[OUTFITS_LEN];
			for(int i = 0; i < OUTFITS_LEN; i++){
				outfits[i] = dat.nextInt();
			}

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_CATEGORY);
			if(aval != null) category = OutfitCategories.valueFromString(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_OUTFITS);
			if(child != null){
				outfits = new int[OUTFITS_LEN];
				List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
				int i = 0;
				for(Element gc : gclist){
					aval = gc.getAttribute("Value");
					if(aval != null) outfits[i] = StringUtils.parseSignedInt(aval);
					i++;
				}
			}

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			category = stream.getFieldAsInt(PSID_CATEGORY);
			outfits = stream.getFieldAsIntArray(PSID_OUTFITS);

			return true;
		}
		
		public static OutfitCategoryEntry readBinary(BufferReference dat) {
			if(dat == null) return null;
			OutfitCategoryEntry str = new OutfitCategoryEntry();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static OutfitCategoryEntry readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			OutfitCategoryEntry str = new OutfitCategoryEntry();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static OutfitCategoryEntry readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static OutfitCategoryEntry readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			OutfitCategoryEntry str = new OutfitCategoryEntry();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			size += (outfits.length * 4);
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			target.addToFile(category);
			for(int i = 0; i < OUTFITS_LEN; i++){
				target.addToFile(outfits[i]);
			}

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"%s\"", XMLKEY_CATEGORY, OutfitCategories.stringFromValue(category)));
			out.write(">\n");
			out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_OUTFITS));
			for(int i = 0; i < OUTFITS_LEN; i++){
				out.write(indent + String.format("\t\t<ArrayMember Value=\"%d\"/>\n", outfits[i]));
			}
			out.write(indent + "\t</Array>\n");
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			ps.addInt(category, PSID_CATEGORY);
			ps.addIntArray(outfits, PSID_OUTFITS);
		}
		
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		categoryCount = dat.nextInt();
		outfitCategoryEntries.ensureCapacity(categoryCount);
		for(int i = 0; i < categoryCount; i++){
			OutfitCategoryEntry outfitCategoryEntry = OutfitCategoryEntry.readBinary(dat);
			if(outfitCategoryEntry != null) outfitCategoryEntries.add(outfitCategoryEntry);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_CATEGORYCOUNT);
		if(aval != null) categoryCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_OUTFITCATEGORYENTRIES);
		if(child != null){
			outfitCategoryEntries.ensureCapacity(categoryCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "OutfitCategoryEntry");
			for(Element gc : gclist){
				outfitCategoryEntries.add(OutfitCategoryEntry.readXMLNode(gc));
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		categoryCount = stream.getFieldAsInt(PSID_CATEGORYCOUNT);
		outfitCategoryEntries.ensureCapacity(categoryCount);
		for(int i = 0; i < categoryCount; i++){
			OutfitCategoryEntry outfitCategoryEntry = OutfitCategoryEntry.readPropertyStream(stream.getChildStream(PSID_OUTFITCATEGORYENTRIES+i));
			if(outfitCategoryEntry != null) outfitCategoryEntries.add(outfitCategoryEntry);
		}

		return true;
	}
	
	public static OutfitCategoryMap readBinary(BufferReference dat) {
		if(dat == null) return null;
		OutfitCategoryMap str = new OutfitCategoryMap();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static OutfitCategoryMap readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		OutfitCategoryMap str = new OutfitCategoryMap();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static OutfitCategoryMap readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static OutfitCategoryMap readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		OutfitCategoryMap str = new OutfitCategoryMap();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(OutfitCategoryEntry outfitCategoryEntry : outfitCategoryEntries){
			size += outfitCategoryEntry.getBinarySize();
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		categoryCount = outfitCategoryEntries.size();
		target.addToFile(categoryCount);
		for(OutfitCategoryEntry outfitCategoryEntry : outfitCategoryEntries){
			outfitCategoryEntry.writeBinaryTo(target);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		categoryCount = outfitCategoryEntries.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_CATEGORYCOUNT, categoryCount));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_OUTFITCATEGORYENTRIES));
		for(OutfitCategoryEntry outfitCategoryEntry : outfitCategoryEntries){
			outfitCategoryEntry.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		categoryCount = outfitCategoryEntries.size();
		int i = 0;
		ps.addInt(categoryCount, PSID_CATEGORYCOUNT);
		i = 0;
		for(OutfitCategoryEntry outfitCategoryEntry : outfitCategoryEntries){
			ps.addChildStream(outfitCategoryEntry.toPropertyStream(byte_order, verFieldSize), PSID_OUTFITCATEGORYENTRIES+i);
			i++;
		}
	}
	
}
