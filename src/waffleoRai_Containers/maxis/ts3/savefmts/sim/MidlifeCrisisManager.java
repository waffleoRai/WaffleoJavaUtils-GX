/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 12:37:13 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:03

package waffleoRai_Containers.maxis.ts3.savefmts.sim;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class MidlifeCrisisManager extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.ActorSystems.MidlifeCrisisManager

	public static final int PSID_MGOTMARRIED = 0x0AD3E489;
	public static final int PSID_MMARRIAGEAGEPERCENT = 0x0AD3E48F;
	public static final int PSID_MHADKIDS = 0x0AD3F421;
	public static final int PSID_MHADKIDSAGEPERCENT = 0x0AD3E495;
	public static final int PSID_MHASMOVED = 0x0AD3E49C;
	public static final int PSID_MNUMBERBREAKUPS = 0x0AD3E4A3;
	public static final int PSID_MNUMBERDIVORCES = 0x0AD3E4AA;
	public static final int PSID_MFAMILYMEMBERSDIED = 0x0AD3E4B0;

	private static final String XMLKEY_MGOTMARRIED = "GotMarried";
	private static final String XMLKEY_MMARRIAGEAGEPERCENT = "MarriageAgePercent";
	private static final String XMLKEY_MHADKIDS = "HadKids";
	private static final String XMLKEY_MHADKIDSAGEPERCENT = "HadKidsAgePercent";
	private static final String XMLKEY_MHASMOVED = "HasMoved";
	private static final String XMLKEY_MNUMBERBREAKUPS = "NumberBreakups";
	private static final String XMLKEY_MNUMBERDIVORCES = "NumberDivorces";
	private static final String XMLKEY_MFAMILYMEMBERSDIED = "FamilyMembersDied";

	public boolean mGotMarried;
	public float mMarriageAgePercent;
	public boolean mHadKids;
	public float mHadKidsAgePercent;
	public boolean mHasMoved;
	public int mNumberBreakups;
	public int mNumberDivorces;
	public int mFamilyMembersDied;

	public MidlifeCrisisManager() {
		xmlNodeName = "MidlifeCrisisManager";
		baseSize = 23;
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mGotMarried = MaxisTypes.readBinaryBool(dat);
		mMarriageAgePercent = Float.intBitsToFloat(dat.nextInt());
		mHadKids = MaxisTypes.readBinaryBool(dat);
		mHadKidsAgePercent = Float.intBitsToFloat(dat.nextInt());
		mHasMoved = MaxisTypes.readBinaryBool(dat);
		mNumberBreakups = dat.nextInt();
		mNumberDivorces = dat.nextInt();
		mFamilyMembersDied = dat.nextInt();

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_MGOTMARRIED);
		if(aval != null) mGotMarried = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MMARRIAGEAGEPERCENT);
		if(aval != null) mMarriageAgePercent = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MHADKIDS);
		if(aval != null) mHadKids = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MHADKIDSAGEPERCENT);
		if(aval != null) mHadKidsAgePercent = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MHASMOVED);
		if(aval != null) mHasMoved = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMBERBREAKUPS);
		if(aval != null) mNumberBreakups = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MNUMBERDIVORCES);
		if(aval != null) mNumberDivorces = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MFAMILYMEMBERSDIED);
		if(aval != null) mFamilyMembersDied = StringUtils.parseSignedInt(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mGotMarried = stream.getFieldAsBool(PSID_MGOTMARRIED);
		mMarriageAgePercent = stream.getFieldAsFloat(PSID_MMARRIAGEAGEPERCENT);
		mHadKids = stream.getFieldAsBool(PSID_MHADKIDS);
		mHadKidsAgePercent = stream.getFieldAsFloat(PSID_MHADKIDSAGEPERCENT);
		mHasMoved = stream.getFieldAsBool(PSID_MHASMOVED);
		mNumberBreakups = stream.getFieldAsInt(PSID_MNUMBERBREAKUPS);
		mNumberDivorces = stream.getFieldAsInt(PSID_MNUMBERDIVORCES);
		mFamilyMembersDied = stream.getFieldAsInt(PSID_MFAMILYMEMBERSDIED);

		return true;
	}
	
	public static MidlifeCrisisManager readBinary(BufferReference dat) {
		if(dat == null) return null;
		MidlifeCrisisManager str = new MidlifeCrisisManager();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static MidlifeCrisisManager readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		MidlifeCrisisManager str = new MidlifeCrisisManager();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static MidlifeCrisisManager readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static MidlifeCrisisManager readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		MidlifeCrisisManager str = new MidlifeCrisisManager();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		MaxisTypes.writeBinaryBool(target, mGotMarried);
		target.addToFile(Float.floatToRawIntBits(mMarriageAgePercent));
		MaxisTypes.writeBinaryBool(target, mHadKids);
		target.addToFile(Float.floatToRawIntBits(mHadKidsAgePercent));
		MaxisTypes.writeBinaryBool(target, mHasMoved);
		target.addToFile(mNumberBreakups);
		target.addToFile(mNumberDivorces);
		target.addToFile(mFamilyMembersDied);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%b\"", XMLKEY_MGOTMARRIED, mGotMarried));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MMARRIAGEAGEPERCENT, mMarriageAgePercent));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MHADKIDS, mHadKids));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MHADKIDSAGEPERCENT, mHadKidsAgePercent));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MHASMOVED, mHasMoved));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMBERBREAKUPS, mNumberBreakups));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MNUMBERDIVORCES, mNumberDivorces));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MFAMILYMEMBERSDIED, mFamilyMembersDied));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addBool(mGotMarried, PSID_MGOTMARRIED);
		ps.addFloat(mMarriageAgePercent, PSID_MMARRIAGEAGEPERCENT);
		ps.addBool(mHadKids, PSID_MHADKIDS);
		ps.addFloat(mHadKidsAgePercent, PSID_MHADKIDSAGEPERCENT);
		ps.addBool(mHasMoved, PSID_MHASMOVED);
		ps.addInt(mNumberBreakups, PSID_MNUMBERBREAKUPS);
		ps.addInt(mNumberDivorces, PSID_MNUMBERDIVORCES);
		ps.addInt(mFamilyMembersDied, PSID_MFAMILYMEMBERSDIED);
	}
	
}
