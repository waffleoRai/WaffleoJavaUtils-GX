/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:57:49 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:13

package waffleoRai_Containers.maxis.ts3.savefmts.sim;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class SpecialOutfitIndices extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.CAS.SimDescriptionCore

	public static final int PSID_OUTFITCOUNT = 0x00000000;
	public static final int PSID_OUTFITENTRIES = 0x00000001;

	private static final String XMLKEY_OUTFITCOUNT = "OutfitCount";
	private static final String XMLKEY_OUTFITENTRIES = "OutfitEntries";

	public int outfitCount;
	public ArrayList<OutfitEntry> outfitEntries = new ArrayList<OutfitEntry>();

	public SpecialOutfitIndices() {
		xmlNodeName = "SpecialOutfitIndices";
		baseSize = 4;
	}
	
	/*----- Inner Classes -----*/

	public static class OutfitEntry extends TS3Saveable{

		private static final String XMLKEY_KEY = "Key";
		private static final String XMLKEY_VALUE = "Value";

		public int key;
		public int value;
		
		public int psidKey_key = 0;
		public int psidKey_val = 0;

		public OutfitEntry() {
			xmlNodeName = "OutfitEntry";
			baseSize = 8;
		}

		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			key = dat.nextInt();
			value = dat.nextInt();

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			aval = xml_element.getAttribute(XMLKEY_KEY);
			if(aval != null) key = StringUtils.parseUnsignedInt(aval);
			aval = xml_element.getAttribute(XMLKEY_VALUE);
			if(aval != null) value = StringUtils.parseSignedInt(aval);

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			key = stream.getFieldAsInt(psidKey_key);
			value = stream.getFieldAsInt(psidKey_val);
			return true;
		}
		
		public static OutfitEntry readBinary(BufferReference dat) {
			if(dat == null) return null;
			OutfitEntry str = new OutfitEntry();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static OutfitEntry readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			OutfitEntry str = new OutfitEntry();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static OutfitEntry readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static OutfitEntry readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			OutfitEntry str = new OutfitEntry();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			target.addToFile(key);
			target.addToFile(value);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"0x%08x\"", XMLKEY_KEY, key));
			out.write(String.format(" %s=\"%d\"", XMLKEY_VALUE, value));
			out.write("/>\n");

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			ps.addInt(key, psidKey_key);
			ps.addInt(value, psidKey_val);
		}
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		outfitCount = dat.nextInt();
		outfitEntries.ensureCapacity(outfitCount);
		for(int i = 0; i < outfitCount; i++){
			OutfitEntry outfitEntry = OutfitEntry.readBinary(dat);
			if(outfitEntry != null) outfitEntries.add(outfitEntry);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_OUTFITCOUNT);
		if(aval != null) outfitCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_OUTFITENTRIES);
		if(child != null){
			outfitEntries.ensureCapacity(outfitCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "OutfitEntry");
			for(Element gc : gclist){
				outfitEntries.add(OutfitEntry.readXMLNode(gc));
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		outfitCount = stream.getFieldAsInt(PSID_OUTFITCOUNT);
		outfitEntries.ensureCapacity(outfitCount);
		int psidBase = PSID_OUTFITENTRIES;
		for(int i = 0; i < outfitCount; i++){
			OutfitEntry outfitEntry = new OutfitEntry();
			outfitEntry.psidKey_key = psidBase;
			outfitEntry.psidKey_val = psidBase + 1;
			outfitEntry.readPropertyStream_internal(stream);
			if(outfitEntry != null) outfitEntries.add(outfitEntry);
			psidBase += 2;
		}

		return true;
	}
	
	public static SpecialOutfitIndices readBinary(BufferReference dat) {
		if(dat == null) return null;
		SpecialOutfitIndices str = new SpecialOutfitIndices();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static SpecialOutfitIndices readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		SpecialOutfitIndices str = new SpecialOutfitIndices();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static SpecialOutfitIndices readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static SpecialOutfitIndices readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		SpecialOutfitIndices str = new SpecialOutfitIndices();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(OutfitEntry outfitEntries : outfitEntries){
			size += outfitEntries.getBinarySize();
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		outfitCount = outfitEntries.size();
		target.addToFile(outfitCount);
		for(OutfitEntry outfitEntries : outfitEntries){
			outfitEntries.writeBinaryTo(target);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		outfitCount = outfitEntries.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_OUTFITCOUNT, outfitCount));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_OUTFITENTRIES));
		for(OutfitEntry outfitEntries : outfitEntries){
			outfitEntries.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		outfitCount = outfitEntries.size();
		ps.addInt(outfitCount, PSID_OUTFITCOUNT);
		int psidBase = PSID_OUTFITENTRIES;
		for(OutfitEntry outfitEntry : outfitEntries){
			outfitEntry.psidKey_key = psidBase;
			outfitEntry.psidKey_val = psidBase + 1;
			outfitEntry.addToPropertyStream(ps);
			psidBase += 2;
		}
	}
	
}
