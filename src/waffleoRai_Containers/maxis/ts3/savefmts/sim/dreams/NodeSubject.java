/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 00:03:22 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 21:21

package waffleoRai_Containers.maxis.ts3.savefmts.sim.dreams;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class NodeSubject extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.DreamsAndPromises.ActiveNodeBase

	public static final int PSID_VERSION = 0x087EB06A;
	public static final int PSID_MTYPE = 0x087EB06B;

	private static final String XMLKEY_VERSION = "Version";
	private static final String XMLKEY_MTYPE = "Type";
	private static final String XMLKEY_SUBJECTID = "SubjectId";

	public int version;
	public byte mType;
	public NodeSubjectId subjectId;

	public NodeSubject() {
		xmlNodeName = "NodeSubject";
		baseSize = 5;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		version = dat.nextInt();
		mType = dat.nextByte();
		subjectId = NodeSubjectId.readBinary(dat, mType);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_VERSION);
		if(aval != null) version = StringUtils.parseUnsignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MTYPE);
		if(aval != null) mType = DreamInputSubjectType.valueFromString(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "NodeSubjectId", "VarName", XMLKEY_SUBJECTID);
		if(child != null) subjectId = NodeSubjectId.readXMLNode(child);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		version = stream.getFieldAsInt(PSID_VERSION);
		mType = stream.getFieldAsByte(PSID_MTYPE);
		subjectId = NodeSubjectId.readPropertyStream(stream, mType);

		return true;
	}
	
	public static NodeSubject readBinary(BufferReference dat) {
		if(dat == null) return null;
		NodeSubject str = new NodeSubject();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static NodeSubject readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		NodeSubject str = new NodeSubject();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static NodeSubject readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static NodeSubject readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		NodeSubject str = new NodeSubject();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += subjectId.getBinarySize();
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(version);
		target.addToFile(mType);
		subjectId.writeBinaryTo(target);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_VERSION, version));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MTYPE, DreamInputSubjectType.stringFromValue(mType)));
		out.write(">\n");
		subjectId.writeXMLNode(out, indent + "\t", XMLKEY_SUBJECTID);
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addInt(version, PSID_VERSION);
		ps.addByte(mType, PSID_MTYPE);
		subjectId.addToPropertyStream(ps);
	}
	
}
