/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 00:03:22 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 21:23

package waffleoRai_Containers.maxis.ts3.savefmts.sim.dreams;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class NodeSubjectSimDesc extends TS3Saveable{
//TS3 Script: 

	public static final int PSID_MSIMDESCRIPTIONID = 0x087EB963;
	public static final int PSID_MFIRSTNAME = 0xEB5173A0;
	public static final int PSID_MLASTNAME = 0x7047CB14;
	public static final int PSID_MISFEMALE = 0x764728A9;

	private static final String XMLKEY_MSIMDESCRIPTIONID = "MSimDescriptionId";
	private static final String XMLKEY_MFIRSTNAME = "MFirstName";
	private static final String XMLKEY_MLASTNAME = "MLastName";
	private static final String XMLKEY_MISFEMALE = "MIsFemale";

	public long mSimDescriptionId;
	public String mFirstName;
	public String mLastName;
	public boolean mIsFemale;

	public NodeSubjectSimDesc() {
		xmlNodeName = "NodeSubjectSimDesc";
		baseSize = 17;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mSimDescriptionId = dat.nextLong();
		mFirstName = MaxisTypes.readMaxisString(dat);
		mLastName = MaxisTypes.readMaxisString(dat);
		mIsFemale = MaxisTypes.readBinaryBool(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_MSIMDESCRIPTIONID);
		if(aval != null) mSimDescriptionId = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MFIRSTNAME);
		if(aval != null) mFirstName = aval;
		aval = xml_element.getAttribute(XMLKEY_MLASTNAME);
		if(aval != null) mLastName = aval;
		aval = xml_element.getAttribute(XMLKEY_MISFEMALE);
		if(aval != null) mIsFemale = Boolean.parseBoolean(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mSimDescriptionId = stream.getFieldAsLong(PSID_MSIMDESCRIPTIONID);
		mFirstName = stream.getFieldAsString(PSID_MFIRSTNAME);
		mLastName = stream.getFieldAsString(PSID_MLASTNAME);
		mIsFemale = stream.getFieldAsBool(PSID_MISFEMALE);

		return true;
	}
	
	public static NodeSubjectSimDesc readBinary(BufferReference dat) {
		if(dat == null) return null;
		NodeSubjectSimDesc str = new NodeSubjectSimDesc();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static NodeSubjectSimDesc readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		NodeSubjectSimDesc str = new NodeSubjectSimDesc();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static NodeSubjectSimDesc readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static NodeSubjectSimDesc readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		NodeSubjectSimDesc str = new NodeSubjectSimDesc();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += (mFirstName.length() << 1);
		size += (mLastName.length() << 1);
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(mSimDescriptionId);
		MaxisTypes.serializeMaxisStringTo( mFirstName, target);
		MaxisTypes.serializeMaxisStringTo( mLastName, target);
		MaxisTypes.writeBinaryBool(target, mIsFemale);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%016x\"", XMLKEY_MSIMDESCRIPTIONID, mSimDescriptionId));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MFIRSTNAME, mFirstName));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MLASTNAME, mLastName));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MISFEMALE, mIsFemale));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addLong(mSimDescriptionId, PSID_MSIMDESCRIPTIONID);
		ps.addString(mFirstName, PSID_MFIRSTNAME);
		ps.addString(mLastName, PSID_MLASTNAME);
		ps.addBool(mIsFemale, PSID_MISFEMALE);
	}
	
}
