/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 00:03:22 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:31

package waffleoRai_Containers.maxis.ts3.savefmts.sim.dreams;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class DreamExport extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.DreamsAndPromises.DreamExport

	public static final int PSID_MOWNERTREEID = 0x087E9403;
	public static final int PSID_MINSTANCEID = 0x087E9404;
	public static final int PSID_MPRIMITIVEID = 0x087E9405;
	public static final int PSID_MPROMISEPARENTINDEX = 0x088E64E8;

	private static final String XMLKEY_MOWNERTREEID = "OwnerTreeId";
	private static final String XMLKEY_MINSTANCEID = "InstanceId";
	private static final String XMLKEY_MPRIMITIVEID = "PrimitiveId";
	private static final String XMLKEY_MPROMISEPARENTINDEX = "PromiseParentIndex";
	private static final String XMLKEY_MNODESUBJECT = "NodeSubject";

	public long mOwnerTreeId;
	public int mInstanceId;
	public int mPrimitiveId;
	public int mPromiseParentIndex;
	public NodeSubject mNodeSubject;

	public DreamExport() {
		xmlNodeName = "DreamExport";
		baseSize = 20;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mOwnerTreeId = dat.nextLong();
		mInstanceId = dat.nextInt();
		mPrimitiveId = dat.nextInt();
		mPromiseParentIndex = dat.nextInt();
		mNodeSubject = NodeSubject.readBinary(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_MOWNERTREEID);
		if(aval != null) mOwnerTreeId = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MINSTANCEID);
		if(aval != null) mInstanceId = StringUtils.parseUnsignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MPRIMITIVEID);
		if(aval != null) mPrimitiveId = StringUtils.parseUnsignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MPROMISEPARENTINDEX);
		if(aval != null) mPromiseParentIndex = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "NodeSubject", "VarName", XMLKEY_MNODESUBJECT);
		if(child != null) mNodeSubject = NodeSubject.readXMLNode(child);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mOwnerTreeId = stream.getFieldAsLong(PSID_MOWNERTREEID);
		mInstanceId = stream.getFieldAsInt(PSID_MINSTANCEID);
		mPrimitiveId = stream.getFieldAsInt(PSID_MPRIMITIVEID);
		mPromiseParentIndex = stream.getFieldAsInt(PSID_MPROMISEPARENTINDEX);
		mNodeSubject = NodeSubject.readPropertyStream(stream);

		return true;
	}
	
	public static DreamExport readBinary(BufferReference dat) {
		if(dat == null) return null;
		DreamExport str = new DreamExport();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static DreamExport readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		DreamExport str = new DreamExport();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static DreamExport readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static DreamExport readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		DreamExport str = new DreamExport();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += mNodeSubject.getBinarySize();
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(mOwnerTreeId);
		target.addToFile(mInstanceId);
		target.addToFile(mPrimitiveId);
		target.addToFile(mPromiseParentIndex);
		mNodeSubject.writeBinaryTo(target);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%016x\"", XMLKEY_MOWNERTREEID, mOwnerTreeId));
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_MINSTANCEID, mInstanceId));
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_MPRIMITIVEID, mPrimitiveId));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MPROMISEPARENTINDEX, mPromiseParentIndex));
		out.write(">\n");
		mNodeSubject.writeXMLNode(out, indent + "\t", XMLKEY_MNODESUBJECT);
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}
	
	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		
		ps.addLong(mOwnerTreeId, PSID_MOWNERTREEID);
		ps.addInt(mInstanceId, PSID_MINSTANCEID);
		ps.addInt(mPrimitiveId, PSID_MPRIMITIVEID);
		ps.addInt(mPromiseParentIndex, PSID_MPROMISEPARENTINDEX);
		mNodeSubject.addToPropertyStream(ps);
	}
	
}
