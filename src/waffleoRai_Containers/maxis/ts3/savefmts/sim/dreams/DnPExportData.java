/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 00:03:22 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:27

package waffleoRai_Containers.maxis.ts3.savefmts.sim.dreams;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class DnPExportData extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.DreamsAndPromises.DnPExportData

	public static final int PSID_MACTIVEDREAMSCOUNT = 0x087D9E91;
	public static final int PSID_MACTIVEDREAMS = 0x00000000;
	public static final int PSID_MSLEEPINGDREAMSCOUNT = 0x08F98DC1;

	private static final String XMLKEY_MACTIVEDREAMSCOUNT = "ActiveDreamsCount";
	private static final String XMLKEY_MACTIVEDREAMS = "ActiveDreams";
	private static final String XMLKEY_MSLEEPINGDREAMSCOUNT = "SleepingDreamsCount";
	private static final String XMLKEY_MSLEEPINGDREAMS = "SleepingDreams";

	public int mActiveDreamsCount;
	public ArrayList<DreamExport> mActiveDreams = new ArrayList<DreamExport>();
	public int mSleepingDreamsCount;
	public ArrayList<DreamExport> mSleepingDreams = new ArrayList<DreamExport>();

	public DnPExportData() {
		xmlNodeName = "DnPExportData";
		baseSize = 8;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mActiveDreamsCount = dat.nextInt();
		mActiveDreams.ensureCapacity(mActiveDreamsCount);
		for(int i = 0; i < mActiveDreamsCount; i++){
			DreamExport dream = DreamExport.readBinary(dat);
			if(dream != null) mActiveDreams.add(dream);
		}
		mSleepingDreamsCount = dat.nextInt();
		mSleepingDreams.ensureCapacity(mSleepingDreamsCount);
		for(int i = 0; i < mSleepingDreamsCount; i++){
			DreamExport dream = DreamExport.readBinary(dat);
			if(dream != null) mSleepingDreams.add(dream);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_MACTIVEDREAMSCOUNT);
		if(aval != null) mActiveDreamsCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MACTIVEDREAMS);
		if(child != null){
			mActiveDreams.ensureCapacity(mActiveDreamsCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "DreamExport");
			for(Element gc : gclist){
				mActiveDreams.add(DreamExport.readXMLNode(gc));
			}
		}
		aval = xml_element.getAttribute(XMLKEY_MSLEEPINGDREAMSCOUNT);
		if(aval != null) mSleepingDreamsCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MSLEEPINGDREAMS);
		if(child != null){
			mSleepingDreams.ensureCapacity(mSleepingDreamsCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "DreamExport");
			for(Element gc : gclist){
				mSleepingDreams.add(DreamExport.readXMLNode(gc));
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mActiveDreamsCount = stream.getFieldAsInt(PSID_MACTIVEDREAMSCOUNT);
		mActiveDreams.ensureCapacity(mActiveDreamsCount);
		for(int i = 0; i < mActiveDreamsCount; i++){
			DreamExport dream = DreamExport.readPropertyStream(stream.getChildStream(PSID_MACTIVEDREAMS+i));
			if(dream != null) mActiveDreams.add(dream);
		}
		mSleepingDreamsCount = stream.getFieldAsInt(PSID_MSLEEPINGDREAMSCOUNT);
		mSleepingDreams.ensureCapacity(mSleepingDreamsCount);
		for(int i = 0; i < mSleepingDreamsCount; i++){
			DreamExport dream = DreamExport.readPropertyStream(stream.getChildStream(mActiveDreamsCount+i));
			if(dream != null) mSleepingDreams.add(dream);
		}

		return true;
	}
	
	public static DnPExportData readBinary(BufferReference dat) {
		if(dat == null) return null;
		DnPExportData str = new DnPExportData();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static DnPExportData readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		DnPExportData str = new DnPExportData();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static DnPExportData readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static DnPExportData readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		DnPExportData str = new DnPExportData();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(DreamExport dream : mActiveDreams){
			size += dream.getBinarySize();
		}
		for(DreamExport dream : mSleepingDreams){
			size += dream.getBinarySize();
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		mActiveDreamsCount = mActiveDreams.size();
		mSleepingDreamsCount = mSleepingDreams.size();
		target.addToFile(mActiveDreamsCount);
		for(DreamExport dream : mActiveDreams){
			dream.writeBinaryTo(target);
		}
		target.addToFile(mSleepingDreamsCount);
		for(DreamExport dream : mSleepingDreams){
			dream.writeBinaryTo(target);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		mActiveDreamsCount = mActiveDreams.size();
		mSleepingDreamsCount = mSleepingDreams.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_MACTIVEDREAMSCOUNT, mActiveDreamsCount));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MSLEEPINGDREAMSCOUNT, mSleepingDreamsCount));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_MACTIVEDREAMS));
		for(DreamExport dream : mActiveDreams){
			dream.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_MSLEEPINGDREAMS));
		for(DreamExport dream : mSleepingDreams){
			dream.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		mActiveDreamsCount = mActiveDreams.size();
		mSleepingDreamsCount = mSleepingDreams.size();
		int i = 0;
		ps.addInt(mActiveDreamsCount, PSID_MACTIVEDREAMSCOUNT);
		i = 0;
		for(DreamExport dream : mActiveDreams){
			ps.addChildStream(dream.toPropertyStream(byte_order, verFieldSize), PSID_MACTIVEDREAMS+i);
			i++;
		}
		ps.addInt(mSleepingDreamsCount, PSID_MSLEEPINGDREAMSCOUNT);
		i = 0;
		for(DreamExport dream : mSleepingDreams){
			ps.addChildStream(dream.toPropertyStream(byte_order, verFieldSize), mActiveDreamsCount+i);
			i++;
		}
	}
	
}
