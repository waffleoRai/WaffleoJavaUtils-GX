/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 01:06:20 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:02

package waffleoRai_Containers.maxis.ts3.savefmts.sim;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class Genealogy extends TS3Saveable {
//TS3 Script: Sims3.Gameplay.Socializing.Genealogy

	public static final int PSID_MNAME = 0x2F8B3BF4;
	public static final int PSID_MSIMID = 0x22706EFA;
	public static final int PSID_MSPOUSEID = 0x59A7BE20;
	public static final int PSID_MPARTNERTYPE = 0x094C70FE;
	public static final int PSID_CHILDCOUNT = 0x99BC17E9;
	public static final int PSID_MCHILDREN = 0x99BC17E8;
	public static final int PSID_PARENTCOUNT = 0xFDFE843D;
	public static final int PSID_MNATURALPARENTS = 0xFDFE843C;
	public static final int PSID_SIBLINGCOUNT = 0xB88447D5;
	public static final int PSID_MSIBLINGS = 0xB88447D4;

	private static final String XMLKEY_MNAME = "Name";
	private static final String XMLKEY_MSIMID = "SimId";
	private static final String XMLKEY_MSPOUSEID = "SpouseId";
	private static final String XMLKEY_MPARTNERTYPE = "PartnerType";
	private static final String XMLKEY_CHILDCOUNT = "ChildCount";
	private static final String XMLKEY_MCHILDREN = "Children";
	private static final String XMLKEY_PARENTCOUNT = "ParentCount";
	private static final String XMLKEY_MNATURALPARENTS = "NaturalParents";
	private static final String XMLKEY_SIBLINGCOUNT = "SiblingCount";
	private static final String XMLKEY_MSIBLINGS = "Siblings";

	public String mName;
	public long mSimId;
	public long mSpouseId;
	public int mPartnerType;
	public int childCount;
	public ArrayList<Long> mChildren = new ArrayList<Long>();
	public int parentCount;
	public ArrayList<Long> mNaturalParents = new ArrayList<Long>();
	public int siblingCount;
	public ArrayList<Long> mSiblings = new ArrayList<Long>();

	public Genealogy() {
		xmlNodeName = "Genealogy";
		baseSize = 36;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;

		mName = MaxisTypes.readMaxisString(dat);
		mSimId = dat.nextLong();
		mSpouseId = dat.nextLong();
		mPartnerType = dat.nextInt();
		childCount = dat.nextInt();
		mChildren.ensureCapacity(childCount);
		for(int i = 0; i < childCount; i++) mChildren.add(dat.nextLong());
		parentCount = dat.nextInt();
		mNaturalParents.ensureCapacity(parentCount);
		for(int i = 0; i < parentCount; i++) mNaturalParents.add(dat.nextLong());
		siblingCount = dat.nextInt();
		mSiblings.ensureCapacity(siblingCount);
		for(int i = 0; i < siblingCount; i++) mSiblings.add(dat.nextLong());

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;

		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_MNAME);
		if(aval != null) mName = aval;
		aval = xml_element.getAttribute(XMLKEY_MSIMID);
		if(aval != null) mSimId = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MSPOUSEID);
		if(aval != null) mSpouseId = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MPARTNERTYPE);
		if(aval != null) mPartnerType = PartnerType.valueFromString(aval);
		
		aval = xml_element.getAttribute(XMLKEY_CHILDCOUNT);
		if(aval != null) childCount = StringUtils.parseSignedInt(aval);
		mChildren.clear(); mChildren.ensureCapacity(childCount);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MCHILDREN);
		if(child != null) {
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ListMember");
			for(Element gc : gclist) {
				aval = gc.getAttribute("Value");
				if(aval != null) mChildren.add(StringUtils.parseUnsignedLong(aval));
			}
		}
		
		aval = xml_element.getAttribute(XMLKEY_PARENTCOUNT);
		if(aval != null) parentCount = StringUtils.parseSignedInt(aval);
		mNaturalParents.clear(); mNaturalParents.ensureCapacity(parentCount);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MNATURALPARENTS);
		if(child != null) {
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ListMember");
			for(Element gc : gclist) {
				aval = gc.getAttribute("Value");
				if(aval != null) mNaturalParents.add(StringUtils.parseUnsignedLong(aval));
			}
		}
		
		aval = xml_element.getAttribute(XMLKEY_SIBLINGCOUNT);
		if(aval != null) siblingCount = StringUtils.parseSignedInt(aval);
		mSiblings.clear(); mSiblings.ensureCapacity(siblingCount);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MSIBLINGS);
		if(child != null) {
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ListMember");
			for(Element gc : gclist) {
				aval = gc.getAttribute("Value");
				if(aval != null) mSiblings.add(StringUtils.parseUnsignedLong(aval));
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;

		mName = stream.getFieldAsString(PSID_MNAME);
		mSimId = stream.getFieldAsLong(PSID_MSIMID);
		mSpouseId = stream.getFieldAsLong(PSID_MSPOUSEID);
		mPartnerType = stream.getFieldAsInt(PSID_MPARTNERTYPE);
		
		MaxisPropertyStream innerStream = null;
		childCount = stream.getFieldAsInt(PSID_CHILDCOUNT);
		mChildren.ensureCapacity(childCount);
		innerStream = stream.getChildStream(PSID_MCHILDREN);
		for(int i = 0; i < childCount; i++) mChildren.add(innerStream.getFieldAsLong(i));

		parentCount = stream.getFieldAsInt(PSID_PARENTCOUNT);
		mNaturalParents.clear(); mNaturalParents.ensureCapacity(parentCount);
		innerStream = stream.getChildStream(PSID_MNATURALPARENTS);
		for(int i = 0; i < parentCount; i++) mNaturalParents.add(innerStream.getFieldAsLong(i));
		
		siblingCount = stream.getFieldAsInt(PSID_SIBLINGCOUNT);
		mSiblings.clear(); mSiblings.ensureCapacity(siblingCount);
		innerStream = stream.getChildStream(PSID_MSIBLINGS);
		for(int i = 0; i < siblingCount; i++) mSiblings.add(innerStream.getFieldAsLong(i));

		return true;
	}
	
	public static Genealogy readBinary(BufferReference dat) {
		if(dat == null) return null;
		Genealogy str = new Genealogy();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static Genealogy readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		Genealogy str = new Genealogy();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static Genealogy readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static Genealogy readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		Genealogy str = new Genealogy();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += (mName.length() << 1);
		size += (mChildren.size() << 3);
		size += (mNaturalParents.size() << 3);
		size += (mSiblings.size() << 3);
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		MaxisTypes.serializeMaxisStringTo( mName, target);
		target.addToFile(mSimId);
		target.addToFile(mSpouseId);
		target.addToFile(mPartnerType);
		
		childCount = mChildren.size();
		target.addToFile(childCount);
		for(Long l : mChildren) target.addToFile(l);
		
		parentCount = mNaturalParents.size();
		target.addToFile(parentCount);
		for(Long l : mNaturalParents) target.addToFile(l);

		siblingCount = mSiblings.size();
		target.addToFile(siblingCount);
		for(Long l : mSiblings) target.addToFile(l);
		
		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%s\"", XMLKEY_MNAME, mName));
		out.write(String.format(" %s=\"0x%016x\"", XMLKEY_MSIMID, mSimId));
		out.write(String.format(" %s=\"0x%016x\"", XMLKEY_MSPOUSEID, mSpouseId));
		
		childCount = mChildren.size();
		parentCount = mNaturalParents.size();
		siblingCount = mSiblings.size();
		
		out.write(String.format(" %s=\"%s\"", XMLKEY_MPARTNERTYPE, PartnerType.stringFromValue(mPartnerType)));
		out.write(String.format(" %s=\"%d\"", XMLKEY_CHILDCOUNT, childCount));
		out.write(String.format(" %s=\"%d\"", XMLKEY_PARENTCOUNT, parentCount));
		out.write(String.format(" %s=\"%d\"", XMLKEY_SIBLINGCOUNT, siblingCount));
		out.write(">\n");
		
		out.write(String.format(indent + "\t<%s VarName=\"%s\">\n", "List", XMLKEY_MCHILDREN));
		for(Long id : mChildren) {
			out.write(String.format(indent + "\t\t<%s Value=\"0x%016x\">\n", "ListMember", id));
		}
		out.write(indent + "\t</List>\n");
		
		out.write(String.format(indent + "\t<%s VarName=\"%s\">\n", "List", XMLKEY_MNATURALPARENTS));
		for(Long id : mNaturalParents) {
			out.write(String.format(indent + "\t\t<%s Value=\"0x%016x\">\n", "ListMember", id));
		}
		out.write(indent + "\t</List>\n");
		
		out.write(String.format(indent + "\t<%s VarName=\"%s\">\n", "List", XMLKEY_MSIBLINGS));
		for(Long id : mSiblings) {
			out.write(String.format(indent + "\t\t<%s Value=\"0x%016x\">\n", "ListMember", id));
		}
		out.write(indent + "\t</List>\n");
		
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		childCount = mChildren.size();
		parentCount = mNaturalParents.size();
		siblingCount = mSiblings.size();
		
		ps.addString(mName, PSID_MNAME);
		ps.addLong(mSimId, PSID_MSIMID);
		ps.addLong(mSpouseId, PSID_MSPOUSEID);
		ps.addInt(mPartnerType, PSID_MPARTNERTYPE);
		
		MaxisPropertyStream inner = null;
		ps.addInt(childCount, PSID_CHILDCOUNT);
		inner = MaxisPropertyStream.openForWrite(byte_order, verFieldSize);
		int i = 0;
		for(Long l : mChildren) {
			inner.addLong(l, i++);
		}
		ps.addChildStream(inner, PSID_MCHILDREN);
		
		ps.addInt(parentCount, PSID_PARENTCOUNT);
		inner = MaxisPropertyStream.openForWrite(byte_order, verFieldSize);
		i = 0;
		for(Long l : mNaturalParents) {
			inner.addLong(l, i++);
		}
		ps.addChildStream(inner, PSID_MNATURALPARENTS);
		
		ps.addInt(siblingCount, PSID_SIBLINGCOUNT);
		inner = MaxisPropertyStream.openForWrite(byte_order, verFieldSize);
		i = 0;
		for(Long l : mSiblings) {
			inner.addLong(l, i++);
		}
		ps.addChildStream(inner, PSID_MSIBLINGS);
	}
	
}
