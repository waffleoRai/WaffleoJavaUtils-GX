/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 12:41:16 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 22:42

package waffleoRai_Containers.maxis.ts3.savefmts.sim.event;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class LifeEventManager extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.ActorSystems.LifeEventManager

	public static final int PSID_MLIFEEVENTS = 0x57A29001;
	public static final int PSID_MLIFEEVENTKEYCOUNT = 0x57A29000;
	public static final int PSID_MACTIVENODES = 0x064C9C01;
	public static final int PSID_MACTIVENODESKEYCOUNT = 0x064C9C00;
	public static final int PSID_MHASSHOWNWARNINGDIALOG = 0xCE7EF0F6;

	private static final String XMLKEY_MLIFEEVENTS = "LifeEvents";
	private static final String XMLKEY_MLIFEEVENTKEYCOUNT = "LifeEventKeyCount";
	private static final String XMLKEY_MACTIVENODES = "ActiveNodes";
	private static final String XMLKEY_MACTIVENODESKEYCOUNT = "ActiveNodesKeyCount";
	private static final String XMLKEY_MHASSHOWNWARNINGDIALOG = "HasShownWarningDialog";

	public ArrayList<LifeEventEntry> mLifeEvents = new ArrayList<LifeEventEntry>();
	public int mLifeEventKeyCount;
	public ArrayList<ActiveNodeEntry> mActiveNodes = new ArrayList<ActiveNodeEntry>();
	public int mActiveNodesKeyCount;
	public boolean mHasShownWarningDialog;

	public LifeEventManager() {
		xmlNodeName = "LifeEventManager";
		baseSize = 9;
	}
	
	/*----- Inner Classes -----*/

	public static class LifeEventEntry extends TS3Saveable{

		private static final String XMLKEY_KEY = "Key";
		private static final String XMLKEY_EVENTLIST = "EventList";

		public int key;
		public LifeEventList eventList;
		
		public int psidBase;

		public LifeEventEntry() {
			xmlNodeName = "LifeEventEntry";
			baseSize = 4;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			key = dat.nextInt();
			eventList = LifeEventList.readBinary(dat);

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_KEY);
			if(aval != null) key = StringUtils.parseUnsignedInt(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "LifeEventList", "VarName", XMLKEY_EVENTLIST);
			if(child != null) eventList = LifeEventList.readXMLNode(child);

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			key = stream.getFieldAsInt(psidBase);
			eventList = LifeEventList.readPropertyStream(stream.getChildStream(psidBase+1));

			return true;
		}
		
		public static LifeEventEntry readBinary(BufferReference dat) {
			if(dat == null) return null;
			LifeEventEntry str = new LifeEventEntry();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static LifeEventEntry readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			LifeEventEntry str = new LifeEventEntry();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static LifeEventEntry readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static LifeEventEntry readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			LifeEventEntry str = new LifeEventEntry();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			size += eventList.getBinarySize();
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			target.addToFile(key);
			eventList.writeBinaryTo(target);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"0x%08x\"", XMLKEY_KEY, key));
			out.write(">\n");
			eventList.writeXMLNode(out, indent + "\t", XMLKEY_EVENTLIST);
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));
		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			boolean byte_order = ps.getByteOrder();
			int verFieldSize = ps.getVersionFieldSize();
			
			ps.addInt(key, psidBase);
			ps.addChildStream(eventList.toPropertyStream(byte_order, verFieldSize), psidBase+1);
		}
	
	}

	public static class LifeEventList extends TS3Saveable{

		public static final int PSID_EVENTS = 0x00000001;
		public static final int PSID_EVENTCOUNT = 0x00000000;

		private static final String XMLKEY_EVENTS = "Events";
		private static final String XMLKEY_EVENTCOUNT = "EventCount";

		public ArrayList<LifeEvent> events = new ArrayList<LifeEvent>();
		public int eventCount;

		public LifeEventList() {
			xmlNodeName = "LifeEventList";
			baseSize = 4;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			events.ensureCapacity(eventCount);
			for(int i = 0; i < eventCount; i++){
				LifeEvent eventData = LifeEvent.readBinary(dat);
				if(eventData != null) events.add(eventData);
			}
			eventCount = dat.nextInt();

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_EVENTCOUNT);
			if(aval != null) eventCount = StringUtils.parseUnsignedInt(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_EVENTS);
			if(child != null){
				events.ensureCapacity(eventCount);
				List<Element> gclist = XMLReader.getChildElementsWithTag(child, "LifeEvent");
				for(Element gc : gclist){
					events.add(LifeEvent.readXMLNode(gc));
				}
			}

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			eventCount = stream.getFieldAsInt(PSID_EVENTCOUNT);
			events.ensureCapacity(eventCount);
			for(int i = 0; i < eventCount; i++){
				LifeEvent eventData = LifeEvent.readPropertyStream(stream.getChildStream(PSID_EVENTS+i));
				if(eventData != null) events.add(eventData);
			}

			return true;
		}
		
		public static LifeEventList readBinary(BufferReference dat) {
			if(dat == null) return null;
			LifeEventList str = new LifeEventList();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static LifeEventList readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			LifeEventList str = new LifeEventList();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static LifeEventList readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static LifeEventList readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			LifeEventList str = new LifeEventList();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			for(LifeEvent eventData : events){
				size += eventData.getBinarySize();
			}
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			eventCount = events.size();
			for(LifeEvent eventData : events){
				eventData.writeBinaryTo(target);
			}
			target.addToFile(eventCount);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			eventCount = events.size();
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"0x%08x\"", XMLKEY_EVENTCOUNT, eventCount));
			out.write(">\n");
			out.write(indent + "\t<List ");
			out.write(String.format(" VarName=\"%s\">\n", XMLKEY_EVENTS));
			for(LifeEvent eventData : events){
				eventData.writeXMLNode(out, indent + "\t\t", null);
			}
			out.write(indent + "\t</List>\n");
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));

		}
	
		public MaxisPropertyStream toPropertyStream(boolean byte_order, int verFieldSize) {
			MaxisPropertyStream ps = MaxisPropertyStream.openForWrite(byte_order, verFieldSize);
			
			eventCount = events.size();
			int i = 0;
			i = 0;
			for(LifeEvent eventData : events){
				ps.addChildStream(eventData.toPropertyStream(byte_order, verFieldSize), PSID_EVENTS+i);
				i++;
			}
			ps.addInt(eventCount, PSID_EVENTCOUNT);

			return ps;
		}
		
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			boolean byte_order = ps.getByteOrder();
			int verFieldSize = ps.getVersionFieldSize();
			
			eventCount = events.size();
			int i = 0;
			i = 0;
			for(LifeEvent eventData : events){
				ps.addChildStream(eventData.toPropertyStream(byte_order, verFieldSize), PSID_EVENTS+i);
				i++;
			}
			ps.addInt(eventCount, PSID_EVENTCOUNT);
		}
		
	}

	public static class ActiveNodeEntry extends TS3Saveable{

		private static final String XMLKEY_KEY = "Key";
		private static final String XMLKEY_ACTIVENODELISTPS = "ActiveNodeListPS";

		public int key;
		public ActiveNodeList activeNodeListPS;
		
		public int psidBase;

		public ActiveNodeEntry() {
			xmlNodeName = "ActiveNodeEntry";
			baseSize = 4;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			key = dat.nextInt();
			activeNodeListPS = ActiveNodeList.readBinary(dat);

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_KEY);
			if(aval != null) key = StringUtils.parseUnsignedInt(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "ActiveNodeList", "VarName", XMLKEY_ACTIVENODELISTPS);
			if(child != null) activeNodeListPS = ActiveNodeList.readXMLNode(child);

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			key = stream.getFieldAsInt(psidBase);
			activeNodeListPS = ActiveNodeList.readPropertyStream(stream.getChildStream(psidBase+1));

			return true;
		}
		
		public static ActiveNodeEntry readBinary(BufferReference dat) {
			if(dat == null) return null;
			ActiveNodeEntry str = new ActiveNodeEntry();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static ActiveNodeEntry readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			ActiveNodeEntry str = new ActiveNodeEntry();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static ActiveNodeEntry readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static ActiveNodeEntry readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			ActiveNodeEntry str = new ActiveNodeEntry();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			size += activeNodeListPS.getBinarySize();
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			target.addToFile(key);
			activeNodeListPS.writeBinaryTo(target);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"0x%08x\"", XMLKEY_KEY, key));
			out.write(">\n");
			activeNodeListPS.writeXMLNode(out, indent + "\t", XMLKEY_ACTIVENODELISTPS);
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			boolean byte_order = ps.getByteOrder();
			int verFieldSize = ps.getVersionFieldSize();
			
			ps.addInt(key, psidBase);
			ps.addChildStream(activeNodeListPS.toPropertyStream(byte_order, verFieldSize), psidBase+1);
		}
	}

	public static class ActiveNodeList extends TS3Saveable{

		public static final int PSID_ACTIVENODELIST = 0x00000001;
		public static final int PSID_ACTIVENODECOUNT = 0x00000000;

		private static final String XMLKEY_ACTIVENODELIST = "ActiveNodeList";
		private static final String XMLKEY_ACTIVENODECOUNT = "ActiveNodeCount";

		public ArrayList<LifeEventActiveNode> activeNodeList = new ArrayList<LifeEventActiveNode>();
		public int activeNodeCount;

		public ActiveNodeList() {
			xmlNodeName = "ActiveNodeList";
			baseSize = 4;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			activeNodeList.ensureCapacity(activeNodeCount);
			for(int i = 0; i < activeNodeCount; i++){
				LifeEventActiveNode eventData = LifeEventActiveNode.readBinary(dat);
				if(eventData != null) activeNodeList.add(eventData);
			}
			activeNodeCount = dat.nextInt();

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			Element child = null;
			aval = xml_element.getAttribute(XMLKEY_ACTIVENODECOUNT);
			if(aval != null) activeNodeCount = StringUtils.parseUnsignedInt(aval);
			child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_ACTIVENODELIST);
			if(child != null){
				activeNodeList.ensureCapacity(activeNodeCount);
				List<Element> gclist = XMLReader.getChildElementsWithTag(child, "LifeEventActiveNode");
				for(Element gc : gclist){
					activeNodeList.add(LifeEventActiveNode.readXMLNode(gc));
				}
			}

			return true;
		}
		
		protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
			if(stream == null) return false;
			
			activeNodeCount = stream.getFieldAsInt(PSID_ACTIVENODECOUNT);
			activeNodeList.ensureCapacity(activeNodeCount);
			for(int i = 0; i < activeNodeCount; i++){
				LifeEventActiveNode eventData = LifeEventActiveNode.readPropertyStream(stream.getChildStream(PSID_ACTIVENODELIST+i));
				if(eventData != null) activeNodeList.add(eventData);
			}

			return true;
		}
		
		public static ActiveNodeList readBinary(BufferReference dat) {
			if(dat == null) return null;
			ActiveNodeList str = new ActiveNodeList();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static ActiveNodeList readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			ActiveNodeList str = new ActiveNodeList();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		public static ActiveNodeList readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
			if(dat == null) return null;
			MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
			return readPropertyStream(stream);
		}
		
		public static ActiveNodeList readPropertyStream(MaxisPropertyStream stream) {
			if(stream == null) return null;
			ActiveNodeList str = new ActiveNodeList();
			if(!str.readPropertyStream_internal(stream));
			return str;
		}
		
		/*----- Write -----*/
		
		public int getBinarySize() {
			int size = baseSize;
			for(LifeEventActiveNode eventData : activeNodeList){
				size += eventData.getBinarySize();
			}
			return size;
		}
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			activeNodeCount = activeNodeList.size();
			for(LifeEventActiveNode eventData : activeNodeList){
				eventData.writeBinaryTo(target);
			}
			target.addToFile(activeNodeCount);

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			activeNodeCount = activeNodeList.size();
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"0x%08x\"", XMLKEY_ACTIVENODECOUNT, activeNodeCount));
			out.write(">\n");
			out.write(indent + "\t<List ");
			out.write(String.format(" VarName=\"%s\">\n", XMLKEY_ACTIVENODELIST));
			for(LifeEventActiveNode eventData : activeNodeList){
				eventData.writeXMLNode(out, indent + "\t\t", null);
			}
			out.write(indent + "\t</List>\n");
			out.write(indent);
			out.write(String.format("</%s>\n", xmlNodeName));

		}
	
		public void addToPropertyStream(MaxisPropertyStream ps) {	
			if(ps == null) return;
			boolean byte_order = ps.getByteOrder();
			int verFieldSize = ps.getVersionFieldSize();
			
			activeNodeCount = activeNodeList.size();
			int i = 0;
			i = 0;
			for(LifeEventActiveNode eventData : activeNodeList){
				ps.addChildStream(eventData.toPropertyStream(byte_order, verFieldSize), PSID_ACTIVENODELIST+i);
				i++;
			}
			ps.addInt(activeNodeCount, PSID_ACTIVENODECOUNT);
		}
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mLifeEvents.ensureCapacity(mLifeEventKeyCount);
		for(int i = 0; i < mLifeEventKeyCount; i++){
			LifeEventEntry mLifeEvent = LifeEventEntry.readBinary(dat);
			if(mLifeEvent != null) mLifeEvents.add(mLifeEvent);
		}
		mLifeEventKeyCount = dat.nextInt();
		mActiveNodes.ensureCapacity(mActiveNodesKeyCount);
		for(int i = 0; i < mActiveNodesKeyCount; i++){
			ActiveNodeEntry mActiveNode = ActiveNodeEntry.readBinary(dat);
			if(mActiveNode != null) mActiveNodes.add(mActiveNode);
		}
		mActiveNodesKeyCount = dat.nextInt();
		mHasShownWarningDialog = MaxisTypes.readBinaryBool(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MLIFEEVENTS);
		if(child != null){
			mLifeEvents.ensureCapacity(mLifeEventKeyCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "LifeEventEntry");
			for(Element gc : gclist){
				mLifeEvents.add(LifeEventEntry.readXMLNode(gc));
			}
		}
		aval = xml_element.getAttribute(XMLKEY_MLIFEEVENTKEYCOUNT);
		if(aval != null) mLifeEventKeyCount = StringUtils.parseUnsignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MACTIVENODES);
		if(child != null){
			mActiveNodes.ensureCapacity(mActiveNodesKeyCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ActiveNodeEntry");
			for(Element gc : gclist){
				mActiveNodes.add(ActiveNodeEntry.readXMLNode(gc));
			}
		}
		aval = xml_element.getAttribute(XMLKEY_MACTIVENODESKEYCOUNT);
		if(aval != null) mActiveNodesKeyCount = StringUtils.parseUnsignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MHASSHOWNWARNINGDIALOG);
		if(aval != null) mHasShownWarningDialog = Boolean.parseBoolean(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		int psidBase = PSID_MLIFEEVENTS;
		mLifeEventKeyCount = stream.getFieldAsInt(PSID_MLIFEEVENTKEYCOUNT);
		mLifeEvents.ensureCapacity(mLifeEventKeyCount);
		for(int i = 0; i < mLifeEventKeyCount; i++){
			LifeEventEntry mLifeEvent = new LifeEventEntry();
			mLifeEvent.psidBase = psidBase;
			mLifeEvent.readPropertyStream_internal(stream);
			if(mLifeEvent != null) mLifeEvents.add(mLifeEvent);
			psidBase += 2;
		}

		psidBase = PSID_MACTIVENODES;
		mActiveNodesKeyCount = stream.getFieldAsInt(PSID_MACTIVENODESKEYCOUNT);
		mActiveNodes.ensureCapacity(mActiveNodesKeyCount);
		for(int i = 0; i < mActiveNodesKeyCount; i++){
			ActiveNodeEntry mActiveNode = new ActiveNodeEntry();
			mActiveNode.psidBase = psidBase;
			mActiveNode.readPropertyStream_internal(stream);
			if(mActiveNode != null) mActiveNodes.add(mActiveNode);
			psidBase += 2;
		}
		mHasShownWarningDialog = stream.getFieldAsBool(PSID_MHASSHOWNWARNINGDIALOG);

		return true;
	}
	
	public static LifeEventManager readBinary(BufferReference dat) {
		if(dat == null) return null;
		LifeEventManager str = new LifeEventManager();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static LifeEventManager readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		LifeEventManager str = new LifeEventManager();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static LifeEventManager readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static LifeEventManager readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		LifeEventManager str = new LifeEventManager();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(LifeEventEntry mLifeEvents : mLifeEvents){
			size += mLifeEvents.getBinarySize();
		}
		for(ActiveNodeEntry mActiveNodes : mActiveNodes){
			size += mActiveNodes.getBinarySize();
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		mLifeEventKeyCount = mLifeEvents.size();
		mActiveNodesKeyCount = mActiveNodes.size();
		for(LifeEventEntry mLifeEvent : mLifeEvents){
			mLifeEvent.writeBinaryTo(target);
		}
		target.addToFile(mLifeEventKeyCount);
		for(ActiveNodeEntry mActiveNode : mActiveNodes){
			mActiveNode.writeBinaryTo(target);
		}
		target.addToFile(mActiveNodesKeyCount);
		MaxisTypes.writeBinaryBool(target, mHasShownWarningDialog);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		mLifeEventKeyCount = mLifeEvents.size();
		mActiveNodesKeyCount = mActiveNodes.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_MLIFEEVENTKEYCOUNT, mLifeEventKeyCount));
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_MACTIVENODESKEYCOUNT, mActiveNodesKeyCount));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MHASSHOWNWARNINGDIALOG, mHasShownWarningDialog));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_MLIFEEVENTS));
		for(LifeEventEntry mLifeEvent : mLifeEvents){
			mLifeEvent.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_MACTIVENODES));
		for(ActiveNodeEntry mActiveNode : mActiveNodes){
			mActiveNode.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}
	
	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;

		int psidBase = PSID_MLIFEEVENTS;
		mLifeEventKeyCount = mLifeEvents.size();
		mActiveNodesKeyCount = mActiveNodes.size();
		for(LifeEventEntry mLifeEvent : mLifeEvents){
			mLifeEvent.psidBase = psidBase;
			mLifeEvent.addToPropertyStream(ps);
			psidBase += 2;
		}
		ps.addInt(mLifeEventKeyCount, PSID_MLIFEEVENTKEYCOUNT);
		
		psidBase = PSID_MACTIVENODES;
		for(ActiveNodeEntry mActiveNode : mActiveNodes){
			mActiveNode.psidBase = psidBase;
			mActiveNode.addToPropertyStream(ps);
			psidBase += 2;
		}
		ps.addInt(mActiveNodesKeyCount, PSID_MACTIVENODESKEYCOUNT);
		ps.addBool(mHasShownWarningDialog, PSID_MHASSHOWNWARNINGDIALOG);
	}
	
}
