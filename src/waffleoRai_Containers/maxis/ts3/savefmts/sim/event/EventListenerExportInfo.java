/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 00:55:41 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 21:25

package waffleoRai_Containers.maxis.ts3.savefmts.sim.event;

import java.io.IOException;
import java.io.Writer;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class EventListenerExportInfo extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.EventSystem.EventListenerExportInfo
	
	public static final int GUIDLISTLEN = 0; //It's a map

	public static final int PSID_ISCOMPLETED = 0x08E2FD35;
	public static final int PSID_GUID = 0x08E2FD4B;
	public static final int PSID_REMAINING = 0x08E2FD51;
	public static final int PSID_GUIDLIST = 0x08E2FD63;

	private static final String XMLKEY_ISCOMPLETED = "IsCompleted";
	private static final String XMLKEY_GUID = "Guid";
	private static final String XMLKEY_REMAINING = "Remaining";
	private static final String XMLKEY_GUIDLIST = "GuidList";

	public boolean isCompleted;
	public long guid;
	public float remaining;
	public long[] guidList;

	public EventListenerExportInfo() {
		xmlNodeName = "EventListenerExportInfo";
		baseSize = 21;
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		isCompleted = MaxisTypes.readBinaryBool(dat);
		guid = dat.nextLong();
		remaining = Float.intBitsToFloat(dat.nextInt());
		guidList = new long[GUIDLISTLEN];
		for(int i = 0; i < GUIDLISTLEN; i++){
			guidList[i] = dat.nextLong();
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_ISCOMPLETED);
		if(aval != null) isCompleted = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_GUID);
		if(aval != null) guid = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_REMAINING);
		if(aval != null) remaining = (float)Double.parseDouble(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_GUIDLIST);
		if(child != null){
			guidList = new long[GUIDLISTLEN];
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int i = 0;
			for(Element gc : gclist){
				aval = gc.getAttribute("Value");
				if(aval != null) guidList[i] = StringUtils.parseUnsignedLong(aval);
				i++;
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		isCompleted = stream.getFieldAsBool(PSID_ISCOMPLETED);
		guid = stream.getFieldAsLong(PSID_GUID);
		remaining = stream.getFieldAsFloat(PSID_REMAINING);
		guidList = stream.getFieldAsLongArray(PSID_GUIDLIST);

		return true;
	}
	
	public static EventListenerExportInfo readBinary(BufferReference dat) {
		if(dat == null) return null;
		EventListenerExportInfo str = new EventListenerExportInfo();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static EventListenerExportInfo readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		EventListenerExportInfo str = new EventListenerExportInfo();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static EventListenerExportInfo readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static EventListenerExportInfo readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		EventListenerExportInfo str = new EventListenerExportInfo();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += (guidList.length * 8);
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		MaxisTypes.writeBinaryBool(target, isCompleted);
		target.addToFile(guid);
		target.addToFile(Float.floatToRawIntBits(remaining));
		for(int i = 0; i < GUIDLISTLEN; i++){
			target.addToFile(guidList[i]);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%b\"", XMLKEY_ISCOMPLETED, isCompleted));
		out.write(String.format(" %s=\"0x%016x\"", XMLKEY_GUID, guid));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_REMAINING, remaining));
		out.write(">\n");
		out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_GUIDLIST));
		for(int i = 0; i < GUIDLISTLEN; i++){
			out.write(indent + String.format("\t\t<ArrayMember Value=\"0x%016x\"/>\n", guidList[i]));
		}
		out.write(indent + "\t</Array>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addBool(isCompleted, PSID_ISCOMPLETED);
		ps.addLong(guid, PSID_GUID);
		ps.addFloat(remaining, PSID_REMAINING);
		ps.addLongArray(guidList, PSID_GUIDLIST);
	}
	
}
