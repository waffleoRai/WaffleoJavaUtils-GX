/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 12:41:16 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 21:37

package waffleoRai_Containers.maxis.ts3.savefmts.sim.event;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.dreams.DreamExport;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class LifeEventActiveNode extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.ActorSystems.LifeEventManager.LifeEventActiveNode

	public static final int PSID_MPRIMITIVEID = 0xD95FEBE3;
	public static final int PSID_MINPUTNUMBER = 0x513C2438;

	private static final String XMLKEY_MPRIMITIVEID = "PrimitiveId";
	private static final String XMLKEY_MINPUTNUMBER = "InputNumber";
	private static final String XMLKEY_DREAMEXPORT = "DreamExport";

	public int mPrimitiveId;
	public int mInputNumber;
	public DreamExport dreamExport;

	public LifeEventActiveNode() {
		xmlNodeName = "LifeEventActiveNode";
		baseSize = 8;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mPrimitiveId = dat.nextInt();
		mInputNumber = dat.nextInt();
		dreamExport = DreamExport.readBinary(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_MPRIMITIVEID);
		if(aval != null) mPrimitiveId = StringUtils.parseUnsignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MINPUTNUMBER);
		if(aval != null) mInputNumber = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "DreamExport", "VarName", XMLKEY_DREAMEXPORT);
		if(child != null) dreamExport = DreamExport.readXMLNode(child);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		mPrimitiveId = stream.getFieldAsInt(PSID_MPRIMITIVEID);
		mInputNumber = stream.getFieldAsInt(PSID_MINPUTNUMBER);
		dreamExport = DreamExport.readPropertyStream(stream);
		return true;
	}
	
	public static LifeEventActiveNode readBinary(BufferReference dat) {
		if(dat == null) return null;
		LifeEventActiveNode str = new LifeEventActiveNode();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static LifeEventActiveNode readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		LifeEventActiveNode str = new LifeEventActiveNode();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static LifeEventActiveNode readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static LifeEventActiveNode readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		LifeEventActiveNode str = new LifeEventActiveNode();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += dreamExport.getBinarySize();
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(mPrimitiveId);
		target.addToFile(mInputNumber);
		dreamExport.writeBinaryTo(target);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_MPRIMITIVEID, mPrimitiveId));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MINPUTNUMBER, mInputNumber));
		out.write(">\n");
		dreamExport.writeXMLNode(out, indent + "\t", XMLKEY_DREAMEXPORT);
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addInt(mPrimitiveId, PSID_MPRIMITIVEID);
		ps.addInt(mInputNumber, PSID_MINPUTNUMBER);
		dreamExport.addToPropertyStream(ps);
	}
	
}
