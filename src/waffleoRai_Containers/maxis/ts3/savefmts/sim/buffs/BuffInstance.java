/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Tue, 31 Dec 2024 20:46:35 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:18

package waffleoRai_Containers.maxis.ts3.savefmts.sim.buffs;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.mood.MoodAxis;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class BuffInstance extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.ActorSystems.BuffInstance

	public static final int PSID_MBUFFGUID = 0x08895E98;
	public static final int PSID_MEFFECTVALUE = 0x08895EA3;
	public static final int PSID_MADJUSTEDEFFECTVALUE = 0x08895EA9;
	public static final int PSID_MTIMEOUTCOUNT = 0x08895EAF;
	public static final int PSID_MTIMEOUTPAUSED = 0x08895EB2;
	public static final int PSID_MBHASATTEMPTEDPRIORITIZE = 0x08895EB7;
	public static final int PSID_MAXISEFFECTED = 0x08895EBC;
	public static final int PSID_MBUFFNAME = 0x08895EC6;
	public static final int PSID_MDESCRIPTION = 0x08895ECD;
	public static final int PSID_MBUFFORIGIN = 0x08895ED7;
	public static final int PSID_MTHUMBSTRING = 0x08D4A1F1;

	private static final String XMLKEY_MBUFFGUID = "BuffGuid";
	private static final String XMLKEY_MEFFECTVALUE = "EffectValue";
	private static final String XMLKEY_MADJUSTEDEFFECTVALUE = "AdjustedEffectValue";
	private static final String XMLKEY_MTIMEOUTCOUNT = "TimeoutCount";
	private static final String XMLKEY_MTIMEOUTPAUSED = "TimeoutPaused";
	private static final String XMLKEY_MBHASATTEMPTEDPRIORITIZE = "HasAttemptedPrioritize";
	private static final String XMLKEY_MAXISEFFECTED = "AxisEffected";
	private static final String XMLKEY_MBUFFNAME = "BuffName";
	private static final String XMLKEY_MDESCRIPTION = "Description";
	private static final String XMLKEY_MBUFFORIGIN = "BuffOrigin";
	private static final String XMLKEY_MTHUMBSTRING = "ThumbString";

	public long mBuffGuid;
	public int mEffectValue;
	public int mAdjustedEffectValue;
	public float mTimeoutCount;
	public boolean mTimeoutPaused;
	public boolean mbHasAttemptedPrioritize;
	public int mAxisEffected;
	public String mBuffName;
	public String mDescription;
	public long mBuffOrigin;
	public String mThumbString;

	public BuffInstance() {
		xmlNodeName = "BuffInstance";
		baseSize = 46;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mBuffGuid = dat.nextLong();
		mEffectValue = dat.nextInt();
		mAdjustedEffectValue = dat.nextInt();
		mTimeoutCount = Float.intBitsToFloat(dat.nextInt());
		mTimeoutPaused = MaxisTypes.readBinaryBool(dat);
		mbHasAttemptedPrioritize = MaxisTypes.readBinaryBool(dat);
		mAxisEffected = dat.nextInt();
		mBuffName = MaxisTypes.readMaxisString(dat);
		mDescription = MaxisTypes.readMaxisString(dat);
		mBuffOrigin = dat.nextLong();
		mThumbString = MaxisTypes.readMaxisString(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_MBUFFGUID);
		if(aval != null) mBuffGuid = BuffNames.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MEFFECTVALUE);
		if(aval != null) mEffectValue = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MADJUSTEDEFFECTVALUE);
		if(aval != null) mAdjustedEffectValue = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MTIMEOUTCOUNT);
		if(aval != null) mTimeoutCount = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MTIMEOUTPAUSED);
		if(aval != null) mTimeoutPaused = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MBHASATTEMPTEDPRIORITIZE);
		if(aval != null) mbHasAttemptedPrioritize = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MAXISEFFECTED);
		if(aval != null) mAxisEffected = MoodAxis.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MBUFFNAME);
		if(aval != null) mBuffName = aval;
		aval = xml_element.getAttribute(XMLKEY_MDESCRIPTION);
		if(aval != null) mDescription = aval;
		aval = xml_element.getAttribute(XMLKEY_MBUFFORIGIN);
		if(aval != null) mBuffOrigin = BuffOrigin.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MTHUMBSTRING);
		if(aval != null) mThumbString = aval;

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mBuffGuid = stream.getFieldAsLong(PSID_MBUFFGUID);
		mEffectValue = stream.getFieldAsInt(PSID_MEFFECTVALUE);
		mAdjustedEffectValue = stream.getFieldAsInt(PSID_MADJUSTEDEFFECTVALUE);
		mTimeoutCount = stream.getFieldAsFloat(PSID_MTIMEOUTCOUNT);
		mTimeoutPaused = stream.getFieldAsBool(PSID_MTIMEOUTPAUSED);
		mbHasAttemptedPrioritize = stream.getFieldAsBool(PSID_MBHASATTEMPTEDPRIORITIZE);
		mAxisEffected = stream.getFieldAsInt(PSID_MAXISEFFECTED);
		mBuffName = stream.getFieldAsString(PSID_MBUFFNAME);
		mDescription = stream.getFieldAsString(PSID_MDESCRIPTION);
		mBuffOrigin = stream.getFieldAsLong(PSID_MBUFFORIGIN);
		mThumbString = stream.getFieldAsString(PSID_MTHUMBSTRING);

		return true;
	}
	
	public static BuffInstance readBinary(BufferReference dat) {
		if(dat == null) return null;
		BuffInstance str = new BuffInstance();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static BuffInstance readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		BuffInstance str = new BuffInstance();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static BuffInstance readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static BuffInstance readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		BuffInstance str = new BuffInstance();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += (mBuffName.length() << 1);
		size += (mDescription.length() << 1);
		size += (mThumbString.length() << 1);
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(mBuffGuid);
		target.addToFile(mEffectValue);
		target.addToFile(mAdjustedEffectValue);
		target.addToFile(Float.floatToRawIntBits(mTimeoutCount));
		MaxisTypes.writeBinaryBool(target, mTimeoutPaused);
		MaxisTypes.writeBinaryBool(target, mbHasAttemptedPrioritize);
		target.addToFile(mAxisEffected);
		MaxisTypes.serializeMaxisStringTo(mBuffName, target);
		MaxisTypes.serializeMaxisStringTo(mDescription, target);
		target.addToFile(mBuffOrigin);
		MaxisTypes.serializeMaxisStringTo(mThumbString, target);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%s\"", XMLKEY_MBUFFGUID, BuffNames.stringFromValue(mBuffGuid)));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MEFFECTVALUE, mEffectValue));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MADJUSTEDEFFECTVALUE, mAdjustedEffectValue));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MTIMEOUTCOUNT, mTimeoutCount));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MTIMEOUTPAUSED, mTimeoutPaused));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MBHASATTEMPTEDPRIORITIZE, mbHasAttemptedPrioritize));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MAXISEFFECTED, MoodAxis.stringFromValue(mAxisEffected)));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MBUFFNAME, mBuffName));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MDESCRIPTION, mDescription));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MBUFFORIGIN, BuffOrigin.stringFromValue(mBuffOrigin)));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MTHUMBSTRING, mThumbString));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addLong(mBuffGuid, PSID_MBUFFGUID);
		ps.addInt(mEffectValue, PSID_MEFFECTVALUE);
		ps.addInt(mAdjustedEffectValue, PSID_MADJUSTEDEFFECTVALUE);
		ps.addFloat(mTimeoutCount, PSID_MTIMEOUTCOUNT);
		ps.addBool(mTimeoutPaused, PSID_MTIMEOUTPAUSED);
		ps.addBool(mbHasAttemptedPrioritize, PSID_MBHASATTEMPTEDPRIORITIZE);
		ps.addInt(mAxisEffected, PSID_MAXISEFFECTED);
		ps.addString(mBuffName, PSID_MBUFFNAME);
		ps.addString(mDescription, PSID_MDESCRIPTION);
		ps.addLong(mBuffOrigin, PSID_MBUFFORIGIN);
		ps.addString(mThumbString, PSID_MTHUMBSTRING);
	}
	
}
