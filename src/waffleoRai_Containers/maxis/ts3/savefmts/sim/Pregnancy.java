/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:11:38 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:04

package waffleoRai_Containers.maxis.ts3.savefmts.sim;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.traits.TraitNames;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class Pregnancy extends TS3Saveable{
//TS3 Script:  Sims3.Gameplay.ActorSystems.Pregnancy

	public static final int PSID_DADDESCRIPTIONID = 0x0816863D;
	public static final int PSID_MHOUROFPREGNANCY = 0xCE3BA174;
	public static final int PSID_MRANDOMGENSEED = 0xF5A5F438;
	public static final int PSID_MGENDER = 0x653958E5;
	public static final int PSID_MCURRENTMOODSCORE = 0xE89A5F96;
	public static final int PSID_MPREGNANCYSCORE = 0x1A67C144;
	public static final int PSID_MMULTIPLEBABIESMULTIPLIER = 0x55E600BB;
	public static final int PSID_MDOCTORADVICEGIVENBONUS = 0xB98FF26E;
	public static final int PSID_MBABYSEXOFFSET = 0x8515E33B;
	public static final int PSID_MMOMDEATHTYPE = 0x95C161AF;
	public static final int PSID_MDADDEATHTYPE = 0xB434486D;
	public static final int PSID_MFORCEDTRAIT = 0x09275D83;
	public static final int PSID_MMOMWASGHOSTFROMPOTION = 0x0D2743C3;
	public static final int PSID_MDADWASGHOSTFROMPOTION = 0x01A15D81;
	public static final int PSID_MCHANCEOFRANDOMOCCULTMUTATION = 0x00000000;

	private static final String XMLKEY_DADDESCRIPTIONID = "DadDescriptionId";
	private static final String XMLKEY_MHOUROFPREGNANCY = "HourOfPregnancy";
	private static final String XMLKEY_MRANDOMGENSEED = "RandomGenSeed";
	private static final String XMLKEY_MGENDER = "Gender";
	private static final String XMLKEY_MCURRENTMOODSCORE = "CurrentMoodScore";
	private static final String XMLKEY_MPREGNANCYSCORE = "PregnancyScore";
	private static final String XMLKEY_MMULTIPLEBABIESMULTIPLIER = "MultipleBabiesMultiplier";
	private static final String XMLKEY_MDOCTORADVICEGIVENBONUS = "DoctorAdviceGivenBonus";
	private static final String XMLKEY_MBABYSEXOFFSET = "BabySexOffset";
	private static final String XMLKEY_MMOMDEATHTYPE = "MomDeathType";
	private static final String XMLKEY_MDADDEATHTYPE = "DadDeathType";
	private static final String XMLKEY_MFORCEDTRAIT = "ForcedTrait";
	private static final String XMLKEY_MMOMWASGHOSTFROMPOTION = "MomWasGhostFromPotion";
	private static final String XMLKEY_MDADWASGHOSTFROMPOTION = "DadWasGhostFromPotion";
	private static final String XMLKEY_MCHANCEOFRANDOMOCCULTMUTATION = "ChanceOfRandomOccultMutation";

	public long dadDescriptionId;
	public int mHourOfPregnancy;
	public int mRandomGenSeed;
	public int mGender;
	public int mCurrentMoodScore;
	public float mPregnancyScore;
	public float mMultipleBabiesMultiplier;
	public float mDoctorAdviceGivenBonus;
	public float mBabySexOffset;
	public int mMomDeathType;
	public int mDadDeathType;
	public long mForcedTrait;
	public boolean mMomWasGhostFromPotion;
	public boolean mDadWasGhostFromPotion;
	public float mChanceOfRandomOccultMutation;

	public Pregnancy() {
		xmlNodeName = "Pregnancy";
		baseSize = 62;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		dadDescriptionId = dat.nextLong();
		mHourOfPregnancy = dat.nextInt();
		mRandomGenSeed = dat.nextInt();
		mGender = dat.nextInt();
		mCurrentMoodScore = dat.nextInt();
		mPregnancyScore = Float.intBitsToFloat(dat.nextInt());
		mMultipleBabiesMultiplier = Float.intBitsToFloat(dat.nextInt());
		mDoctorAdviceGivenBonus = Float.intBitsToFloat(dat.nextInt());
		mBabySexOffset = Float.intBitsToFloat(dat.nextInt());
		mMomDeathType = dat.nextInt();
		mDadDeathType = dat.nextInt();
		mForcedTrait = dat.nextLong();
		mMomWasGhostFromPotion = MaxisTypes.readBinaryBool(dat);
		mDadWasGhostFromPotion = MaxisTypes.readBinaryBool(dat);
		mChanceOfRandomOccultMutation = Float.intBitsToFloat(dat.nextInt());

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_DADDESCRIPTIONID);
		if(aval != null) dadDescriptionId = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MHOUROFPREGNANCY);
		if(aval != null) mHourOfPregnancy = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MRANDOMGENSEED);
		if(aval != null) mRandomGenSeed = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MGENDER);
		if(aval != null) mGender = CASAgeGenderFlags.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MCURRENTMOODSCORE);
		if(aval != null) mCurrentMoodScore = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MPREGNANCYSCORE);
		if(aval != null) mPregnancyScore = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MMULTIPLEBABIESMULTIPLIER);
		if(aval != null) mMultipleBabiesMultiplier = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MDOCTORADVICEGIVENBONUS);
		if(aval != null) mDoctorAdviceGivenBonus = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MBABYSEXOFFSET);
		if(aval != null) mBabySexOffset = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MMOMDEATHTYPE);
		if(aval != null) mMomDeathType = DeathType.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MDADDEATHTYPE);
		if(aval != null) mDadDeathType = DeathType.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MFORCEDTRAIT);
		if(aval != null) mForcedTrait = TraitNames.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MMOMWASGHOSTFROMPOTION);
		if(aval != null) mMomWasGhostFromPotion = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MDADWASGHOSTFROMPOTION);
		if(aval != null) mDadWasGhostFromPotion = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MCHANCEOFRANDOMOCCULTMUTATION);
		if(aval != null) mChanceOfRandomOccultMutation = (float)Double.parseDouble(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		dadDescriptionId = stream.getFieldAsLong(PSID_DADDESCRIPTIONID);
		mHourOfPregnancy = stream.getFieldAsInt(PSID_MHOUROFPREGNANCY);
		mRandomGenSeed = stream.getFieldAsInt(PSID_MRANDOMGENSEED);
		mGender = stream.getFieldAsInt(PSID_MGENDER);
		mCurrentMoodScore = stream.getFieldAsInt(PSID_MCURRENTMOODSCORE);
		mPregnancyScore = stream.getFieldAsFloat(PSID_MPREGNANCYSCORE);
		mMultipleBabiesMultiplier = stream.getFieldAsFloat(PSID_MMULTIPLEBABIESMULTIPLIER);
		mDoctorAdviceGivenBonus = stream.getFieldAsFloat(PSID_MDOCTORADVICEGIVENBONUS);
		mBabySexOffset = stream.getFieldAsFloat(PSID_MBABYSEXOFFSET);
		mMomDeathType = stream.getFieldAsInt(PSID_MMOMDEATHTYPE);
		mDadDeathType = stream.getFieldAsInt(PSID_MDADDEATHTYPE);
		mForcedTrait = stream.getFieldAsLong(PSID_MFORCEDTRAIT);
		mMomWasGhostFromPotion = stream.getFieldAsBool(PSID_MMOMWASGHOSTFROMPOTION);
		mDadWasGhostFromPotion = stream.getFieldAsBool(PSID_MDADWASGHOSTFROMPOTION);
		mChanceOfRandomOccultMutation = stream.getFieldAsFloat(PSID_MCHANCEOFRANDOMOCCULTMUTATION);

		return true;
	}
	
	public static Pregnancy readBinary(BufferReference dat) {
		if(dat == null) return null;
		Pregnancy str = new Pregnancy();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static Pregnancy readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		Pregnancy str = new Pregnancy();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static Pregnancy readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static Pregnancy readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		Pregnancy str = new Pregnancy();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(dadDescriptionId);
		target.addToFile(mHourOfPregnancy);
		target.addToFile(mRandomGenSeed);
		target.addToFile(mGender);
		target.addToFile(mCurrentMoodScore);
		target.addToFile(Float.floatToRawIntBits(mPregnancyScore));
		target.addToFile(Float.floatToRawIntBits(mMultipleBabiesMultiplier));
		target.addToFile(Float.floatToRawIntBits(mDoctorAdviceGivenBonus));
		target.addToFile(Float.floatToRawIntBits(mBabySexOffset));
		target.addToFile(mMomDeathType);
		target.addToFile(mDadDeathType);
		target.addToFile(mForcedTrait);
		MaxisTypes.writeBinaryBool(target, mMomWasGhostFromPotion);
		MaxisTypes.writeBinaryBool(target, mDadWasGhostFromPotion);
		target.addToFile(Float.floatToRawIntBits(mChanceOfRandomOccultMutation));

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%016x\"", XMLKEY_DADDESCRIPTIONID, dadDescriptionId));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MHOUROFPREGNANCY, mHourOfPregnancy));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MRANDOMGENSEED, mRandomGenSeed));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MGENDER, CASAgeGenderFlags.stringFromValue(mGender)));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MCURRENTMOODSCORE, mCurrentMoodScore));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MPREGNANCYSCORE, mPregnancyScore));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MMULTIPLEBABIESMULTIPLIER, mMultipleBabiesMultiplier));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MDOCTORADVICEGIVENBONUS, mDoctorAdviceGivenBonus));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MBABYSEXOFFSET, mBabySexOffset));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MMOMDEATHTYPE, DeathType.stringFromValue(mMomDeathType)));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MDADDEATHTYPE, DeathType.stringFromValue(mDadDeathType)));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MFORCEDTRAIT, TraitNames.stringFromValue(mForcedTrait)));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MMOMWASGHOSTFROMPOTION, mMomWasGhostFromPotion));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MDADWASGHOSTFROMPOTION, mDadWasGhostFromPotion));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MCHANCEOFRANDOMOCCULTMUTATION, mChanceOfRandomOccultMutation));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addLong(dadDescriptionId, PSID_DADDESCRIPTIONID);
		ps.addInt(mHourOfPregnancy, PSID_MHOUROFPREGNANCY);
		ps.addInt(mRandomGenSeed, PSID_MRANDOMGENSEED);
		ps.addInt(mGender, PSID_MGENDER);
		ps.addInt(mCurrentMoodScore, PSID_MCURRENTMOODSCORE);
		ps.addFloat(mPregnancyScore, PSID_MPREGNANCYSCORE);
		ps.addFloat(mMultipleBabiesMultiplier, PSID_MMULTIPLEBABIESMULTIPLIER);
		ps.addFloat(mDoctorAdviceGivenBonus, PSID_MDOCTORADVICEGIVENBONUS);
		ps.addFloat(mBabySexOffset, PSID_MBABYSEXOFFSET);
		ps.addInt(mMomDeathType, PSID_MMOMDEATHTYPE);
		ps.addInt(mDadDeathType, PSID_MDADDEATHTYPE);
		ps.addLong(mForcedTrait, PSID_MFORCEDTRAIT);
		ps.addBool(mMomWasGhostFromPotion, PSID_MMOMWASGHOSTFROMPOTION);
		ps.addBool(mDadWasGhostFromPotion, PSID_MDADWASGHOSTFROMPOTION);
		ps.addFloat(mChanceOfRandomOccultMutation, PSID_MCHANCEOFRANDOMOCCULTMUTATION);
	}
	
}
