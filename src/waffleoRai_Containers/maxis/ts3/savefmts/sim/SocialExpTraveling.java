/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:57:49 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:08

package waffleoRai_Containers.maxis.ts3.savefmts.sim;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class SocialExpTraveling extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.CAS.SimDescription

	public static final int PSID_KNOWNSIMS = 0x14E6C166;
	public static final int PSID_FRIENDSIMS = 0x9FBE8951;
	public static final int PSID_BESTFRIENDSIMS = 0x9DEDC12B;
	public static final int PSID_JOKESSUCCESFULLYTOLD = 0x60070714;
	public static final int PSID_TRAITSLEARNED = 0x19709587;
	public static final int PSID_HADFIRSTKISS = 0x08FE9D8A;
	public static final int PSID_HADFIRSTROMANCE = 0x08FE9D92;
	public static final int PSID_HADFIRSTWOOHOO = 0x08FE9D96;
	public static final int PSID_HADBACHELORPARTY = 0x08FE9D97;

	private static final String XMLKEY_KNOWNSIMS = "KnownSims";
	private static final String XMLKEY_FRIENDSIMS = "FriendSims";
	private static final String XMLKEY_BESTFRIENDSIMS = "BestFriendSims";
	private static final String XMLKEY_JOKESSUCCESFULLYTOLD = "JokesSuccesfullyTold";
	private static final String XMLKEY_TRAITSLEARNED = "TraitsLearned";
	private static final String XMLKEY_HADFIRSTKISS = "HadFirstKiss";
	private static final String XMLKEY_HADFIRSTROMANCE = "HadFirstRomance";
	private static final String XMLKEY_HADFIRSTWOOHOO = "HadFirstWooHoo";
	private static final String XMLKEY_HADBACHELORPARTY = "HadBachelorParty";

	public int knownSims;
	public int friendSims;
	public int bestFriendSims;
	public int jokesSuccesfullyTold;
	public int traitsLearned;
	public boolean hadFirstKiss;
	public boolean hadFirstRomance;
	public boolean hadFirstWooHoo;
	public boolean hadBachelorParty;

	public SocialExpTraveling() {
		xmlNodeName = "SocialExpTraveling";
		baseSize = 24;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		knownSims = dat.nextInt();
		friendSims = dat.nextInt();
		bestFriendSims = dat.nextInt();
		jokesSuccesfullyTold = dat.nextInt();
		traitsLearned = dat.nextInt();
		hadFirstKiss = MaxisTypes.readBinaryBool(dat);
		hadFirstRomance = MaxisTypes.readBinaryBool(dat);
		hadFirstWooHoo = MaxisTypes.readBinaryBool(dat);
		hadBachelorParty = MaxisTypes.readBinaryBool(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_KNOWNSIMS);
		if(aval != null) knownSims = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_FRIENDSIMS);
		if(aval != null) friendSims = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_BESTFRIENDSIMS);
		if(aval != null) bestFriendSims = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_JOKESSUCCESFULLYTOLD);
		if(aval != null) jokesSuccesfullyTold = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_TRAITSLEARNED);
		if(aval != null) traitsLearned = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_HADFIRSTKISS);
		if(aval != null) hadFirstKiss = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_HADFIRSTROMANCE);
		if(aval != null) hadFirstRomance = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_HADFIRSTWOOHOO);
		if(aval != null) hadFirstWooHoo = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_HADBACHELORPARTY);
		if(aval != null) hadBachelorParty = Boolean.parseBoolean(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		knownSims = stream.getFieldAsInt(PSID_KNOWNSIMS);
		friendSims = stream.getFieldAsInt(PSID_FRIENDSIMS);
		bestFriendSims = stream.getFieldAsInt(PSID_BESTFRIENDSIMS);
		jokesSuccesfullyTold = stream.getFieldAsInt(PSID_JOKESSUCCESFULLYTOLD);
		traitsLearned = stream.getFieldAsInt(PSID_TRAITSLEARNED);
		hadFirstKiss = stream.getFieldAsBool(PSID_HADFIRSTKISS);
		hadFirstRomance = stream.getFieldAsBool(PSID_HADFIRSTROMANCE);
		hadFirstWooHoo = stream.getFieldAsBool(PSID_HADFIRSTWOOHOO);
		hadBachelorParty = stream.getFieldAsBool(PSID_HADBACHELORPARTY);

		return true;
	}
	
	public static SocialExpTraveling readBinary(BufferReference dat) {
		if(dat == null) return null;
		SocialExpTraveling str = new SocialExpTraveling();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static SocialExpTraveling readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		SocialExpTraveling str = new SocialExpTraveling();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static SocialExpTraveling readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static SocialExpTraveling readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		SocialExpTraveling str = new SocialExpTraveling();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(knownSims);
		target.addToFile(friendSims);
		target.addToFile(bestFriendSims);
		target.addToFile(jokesSuccesfullyTold);
		target.addToFile(traitsLearned);
		MaxisTypes.writeBinaryBool(target, hadFirstKiss);
		MaxisTypes.writeBinaryBool(target, hadFirstRomance);
		MaxisTypes.writeBinaryBool(target, hadFirstWooHoo);
		MaxisTypes.writeBinaryBool(target, hadBachelorParty);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_KNOWNSIMS, knownSims));
		out.write(String.format(" %s=\"%d\"", XMLKEY_FRIENDSIMS, friendSims));
		out.write(String.format(" %s=\"%d\"", XMLKEY_BESTFRIENDSIMS, bestFriendSims));
		out.write(String.format(" %s=\"%d\"", XMLKEY_JOKESSUCCESFULLYTOLD, jokesSuccesfullyTold));
		out.write(String.format(" %s=\"%d\"", XMLKEY_TRAITSLEARNED, traitsLearned));
		out.write(String.format(" %s=\"%b\"", XMLKEY_HADFIRSTKISS, hadFirstKiss));
		out.write(String.format(" %s=\"%b\"", XMLKEY_HADFIRSTROMANCE, hadFirstRomance));
		out.write(String.format(" %s=\"%b\"", XMLKEY_HADFIRSTWOOHOO, hadFirstWooHoo));
		out.write(String.format(" %s=\"%b\"", XMLKEY_HADBACHELORPARTY, hadBachelorParty));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addInt(knownSims, PSID_KNOWNSIMS);
		ps.addInt(friendSims, PSID_FRIENDSIMS);
		ps.addInt(bestFriendSims, PSID_BESTFRIENDSIMS);
		ps.addInt(jokesSuccesfullyTold, PSID_JOKESSUCCESFULLYTOLD);
		ps.addInt(traitsLearned, PSID_TRAITSLEARNED);
		ps.addBool(hadFirstKiss, PSID_HADFIRSTKISS);
		ps.addBool(hadFirstRomance, PSID_HADFIRSTROMANCE);
		ps.addBool(hadFirstWooHoo, PSID_HADFIRSTWOOHOO);
		ps.addBool(hadBachelorParty, PSID_HADBACHELORPARTY);
	}
	
}
