/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:57:49 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 20:17

package waffleoRai_Containers.maxis.ts3.savefmts.sim;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class SurgeryBlends extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.CAS.SimDescriptionCore

	public static final int PSID_COUNT = 0x0BBBD283;
	public static final int PSID_PRESURGERYFACIALBLENDS = 0x0BBBD284;
	public static final int PSID_PRESURGERYBODYFITNESS = 0x0BBBDCE4;
	public static final int PSID_PRESURGERYBODYWEIGHT = 0x0BBBDCE5;

	private static final String XMLKEY_COUNT = "Count";
	private static final String XMLKEY_PRESURGERYFACIALBLENDS = "PreSurgeryFacialBlends";
	private static final String XMLKEY_PRESURGERYBODYFITNESS = "PreSurgeryBodyFitness";
	private static final String XMLKEY_PRESURGERYBODYWEIGHT = "PreSurgeryBodyWeight";

	public int count;
	public ArrayList<FacialBlend> preSurgeryFacialBlends = new  ArrayList<FacialBlend>();
	public float preSurgeryBodyFitness;
	public float preSurgeryBodyWeight;

	public SurgeryBlends() {
		xmlNodeName = "SurgeryBlends";
		baseSize = 12;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		count = dat.nextInt();
		preSurgeryFacialBlends.ensureCapacity(count);
		for(int i = 0; i < count; i++) {
			FacialBlend b = FacialBlend.readBinary(dat);
			if(b != null) preSurgeryFacialBlends.add(b);
		}
		preSurgeryBodyFitness = Float.intBitsToFloat(dat.nextInt());
		preSurgeryBodyWeight = Float.intBitsToFloat(dat.nextInt());

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_COUNT);
		if(aval != null) count = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_PRESURGERYFACIALBLENDS);
		if(child != null){
			preSurgeryFacialBlends.ensureCapacity(count);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "FacialBlend");
			for(Element gc : gclist){
				FacialBlend fb = FacialBlend.readXMLNode(gc);
				if(fb != null) preSurgeryFacialBlends.add(fb);
			}
		}
		aval = xml_element.getAttribute(XMLKEY_PRESURGERYBODYFITNESS);
		if(aval != null) preSurgeryBodyFitness = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_PRESURGERYBODYWEIGHT);
		if(aval != null) preSurgeryBodyWeight = (float)Double.parseDouble(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		count = stream.getFieldAsInt(PSID_COUNT);
		preSurgeryFacialBlends.ensureCapacity(count);
		
		int idBase = PSID_PRESURGERYFACIALBLENDS;
		for(int i = 0; i < count; i++) {
			FacialBlend fb = FacialBlend.readFromPropertyStream(stream, idBase);
			if(fb != null) preSurgeryFacialBlends.add(fb);
			idBase += 4;
		}
		
		preSurgeryBodyFitness = stream.getFieldAsFloat(PSID_PRESURGERYBODYFITNESS);
		preSurgeryBodyWeight = stream.getFieldAsFloat(PSID_PRESURGERYBODYWEIGHT);

		return true;
	}
	
	public static SurgeryBlends readBinary(BufferReference dat) {
		if(dat == null) return null;
		SurgeryBlends str = new SurgeryBlends();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static SurgeryBlends readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		SurgeryBlends str = new SurgeryBlends();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static SurgeryBlends readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static SurgeryBlends readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		SurgeryBlends str = new SurgeryBlends();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		if(preSurgeryFacialBlends != null){
			for(FacialBlend fb : preSurgeryFacialBlends){
				size += fb.getBinarySize();
			}
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		count = preSurgeryFacialBlends.size();
		target.addToFile(count);
		for(FacialBlend fb : preSurgeryFacialBlends){
			fb.serializeTo(target);
		}
		target.addToFile(Float.floatToRawIntBits(preSurgeryBodyFitness));
		target.addToFile(Float.floatToRawIntBits(preSurgeryBodyWeight));

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		count = preSurgeryFacialBlends.size();
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_COUNT, count));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_PRESURGERYBODYFITNESS, preSurgeryBodyFitness));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_PRESURGERYBODYWEIGHT, preSurgeryBodyWeight));
		out.write(">\n");
		if(preSurgeryFacialBlends != null){
			out.write(indent + String.format("\t<List VarName=\"%s\">\n", XMLKEY_PRESURGERYFACIALBLENDS));
			for(FacialBlend fb : preSurgeryFacialBlends){
				fb.writeXMLNode(out, indent + "\t\t");
			}
			out.write(indent + "\t</List>\n");
		}
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));
	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		count = preSurgeryFacialBlends.size();
		ps.addInt(count, PSID_COUNT);
		
		int idBase = PSID_PRESURGERYFACIALBLENDS;
		for(FacialBlend fb : preSurgeryFacialBlends){
			fb.writeToPropertyStream(ps, idBase);
			idBase += 4;
		}
		ps.addFloat(preSurgeryBodyFitness, PSID_PRESURGERYBODYFITNESS);
		ps.addFloat(preSurgeryBodyWeight, PSID_PRESURGERYBODYWEIGHT);
	}
	
}
