/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:14:46 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 23:09

package waffleoRai_Containers.maxis.ts3.savefmts.skills;

import java.io.IOException;
import java.io.Writer;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class Skill extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Skills.Skill

	public static final int PSID_SKILLLEVEL = 0x5982B4AE;
	public static final int PSID_SKILLPOINTS = 0x9C95D2B9;
	public static final int PSID_SKILLGAINRATE = 0xD0C722AF;
	public static final int PSID_MLIFETIMEOPPSSHOWN = 0xF4DE18EE;

	private static final String XMLKEY_SKILLLEVEL = "SkillLevel";
	private static final String XMLKEY_SKILLPOINTS = "SkillPoints";
	private static final String XMLKEY_SKILLGAINRATE = "SkillGainRate";
	private static final String XMLKEY_MLIFETIMEOPPSSHOWN = "LifetimeOppsShown";

	public int skillLevel;
	public float skillPoints;
	public float skillGainRate;
	public boolean[] mLifetimeOppsShown;

	public Skill() {
		xmlNodeName = "Skill";
		baseSize = 13;
	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		skillLevel = dat.nextInt();
		skillPoints = Float.intBitsToFloat(dat.nextInt());
		skillGainRate = Float.intBitsToFloat(dat.nextInt());
		
		int len = dat.nextInt(); //ADDED
		if(len > 1) {
			mLifetimeOppsShown = new boolean[len];
			for(int i = 0; i < len; i++){
				mLifetimeOppsShown[i] = MaxisTypes.readBinaryBool(dat);
			}
		}
		else mLifetimeOppsShown = null;

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_SKILLLEVEL);
		if(aval != null) skillLevel = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_SKILLPOINTS);
		if(aval != null) skillPoints = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_SKILLGAINRATE);
		if(aval != null) skillGainRate = (float)Double.parseDouble(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MLIFETIMEOPPSSHOWN);
		if(child != null){
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int len = gclist.size();
			if(len > 0) {
				mLifetimeOppsShown = new boolean[len];
				int i = 0;
				for(Element gc : gclist){
					aval = gc.getAttribute("Value");
					if(aval != null) mLifetimeOppsShown[i] = Boolean.parseBoolean(aval);
					i++;
				}	
			}
			else mLifetimeOppsShown = null;
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		skillLevel = stream.getFieldAsInt(PSID_SKILLLEVEL);
		skillPoints = stream.getFieldAsFloat(PSID_SKILLPOINTS);
		skillGainRate = stream.getFieldAsFloat(PSID_SKILLGAINRATE);
		mLifetimeOppsShown = stream.getFieldAsBoolArray(PSID_MLIFETIMEOPPSSHOWN);

		return true;
	}
	
	public static Skill readBinary(BufferReference dat) {
		if(dat == null) return null;
		Skill str = new Skill();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static Skill readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		Skill str = new Skill();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static Skill readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static Skill readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		Skill str = new Skill();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += mLifetimeOppsShown.length;
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(skillLevel);
		target.addToFile(Float.floatToRawIntBits(skillPoints));
		target.addToFile(Float.floatToRawIntBits(skillGainRate));
		if(mLifetimeOppsShown != null) {
			target.addToFile(mLifetimeOppsShown.length); //ADDED
			for(int i = 0; i < mLifetimeOppsShown.length; i++){
				MaxisTypes.writeBinaryBool(target, mLifetimeOppsShown[i]);
			}
		}
		else target.addToFile(0);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY_SKILLLEVEL, skillLevel));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_SKILLPOINTS, skillPoints));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_SKILLGAINRATE, skillGainRate));
		out.write(">\n");
		if(mLifetimeOppsShown != null) {
			out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MLIFETIMEOPPSSHOWN));
			for(int i = 0; i < mLifetimeOppsShown.length; i++){
				out.write(indent + String.format("\t\t<ArrayMember Value=\"%b\"/>\n", mLifetimeOppsShown[i]));
			}
			out.write(indent + "\t</Array>\n");
		}
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}
	
	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addInt(skillLevel, PSID_SKILLLEVEL);
		ps.addFloat(skillPoints, PSID_SKILLPOINTS);
		ps.addFloat(skillGainRate, PSID_SKILLGAINRATE);
		ps.addBoolArray(mLifetimeOppsShown, PSID_MLIFETIMEOPPSSHOWN);
	}
	
}
