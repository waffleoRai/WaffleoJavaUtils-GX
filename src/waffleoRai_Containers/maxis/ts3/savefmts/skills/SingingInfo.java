/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:14:46 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 23:04

package waffleoRai_Containers.maxis.ts3.savefmts.skills;

import java.io.IOException;
import java.io.Writer;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;

public class SingingInfo extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.ActorSystems.SingingInfo

	public static final int PSID_MKNOWNCOMPOSITIONS = 0x08AE72EE;
	public static final int PSID_MKNOWNROMANTICCOMPOSITIONS = 0x08AE72F7;

	private static final String XMLKEY_MKNOWNCOMPOSITIONS = "KnownCompositions";
	private static final String XMLKEY_MKNOWNROMANTICCOMPOSITIONS = "KnownRomanticCompositions";

	public String[] mKnownCompositions;
	public String[] mKnownRomanticCompositions;

	public SingingInfo() {
		xmlNodeName = "SingingInfo";
		baseSize = 0;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		int len = dat.nextInt(); //ADDED
		mKnownCompositions = new String[len];
		for(int i = 0; i < len; i++){
			mKnownCompositions[i] = MaxisTypes.readMaxisString(dat);
		}
		len = dat.nextInt(); //ADDED
		mKnownRomanticCompositions = new String[len];
		for(int i = 0; i < len; i++){
			mKnownRomanticCompositions[i] = MaxisTypes.readMaxisString(dat);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MKNOWNCOMPOSITIONS);
		if(child != null){
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int len = gclist.size();
			if(len > 0) {
				mKnownCompositions = new String[len];
				int i = 0;
				for(Element gc : gclist){
					aval = gc.getAttribute("Value");
					if(aval != null) mKnownCompositions[i] = aval;
					i++;
				}	
			}
			else mKnownCompositions = null;
		}
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MKNOWNROMANTICCOMPOSITIONS);
		if(child != null){
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int len = gclist.size();
			if(len > 0) {
				mKnownRomanticCompositions = new String[len];
				int i = 0;
				for(Element gc : gclist){
					aval = gc.getAttribute("Value");
					if(aval != null) mKnownRomanticCompositions[i] = aval;
					i++;
				}	
			}
			else mKnownRomanticCompositions = null;
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mKnownCompositions = stream.getFieldAsStringArray(PSID_MKNOWNCOMPOSITIONS);
		mKnownRomanticCompositions = stream.getFieldAsStringArray(PSID_MKNOWNROMANTICCOMPOSITIONS);

		return true;
	}
	
	public static SingingInfo readBinary(BufferReference dat) {
		if(dat == null) return null;
		SingingInfo str = new SingingInfo();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static SingingInfo readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		SingingInfo str = new SingingInfo();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static SingingInfo readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static SingingInfo readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		SingingInfo str = new SingingInfo();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		if(mKnownCompositions != null) {
			for(int i = 0; i < mKnownCompositions.length; i++){
				size += (mKnownCompositions[i].length() << 1);
				size += 4;
			}	
		}
		if(mKnownRomanticCompositions != null) {
			for(int i = 0; i < mKnownRomanticCompositions.length; i++){
				size += (mKnownRomanticCompositions[i].length() << 1);
				size += 4;
			}	
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		if(mKnownCompositions != null) {
			target.addToFile(mKnownCompositions.length); //ADDED
			for(int i = 0; i < mKnownCompositions.length; i++){
				MaxisTypes.serializeMaxisStringTo(mKnownCompositions[i], target);
			}
		}
		else target.addToFile(0);
		
		if(mKnownRomanticCompositions != null) {
			target.addToFile(mKnownRomanticCompositions.length); //ADDED
			for(int i = 0; i < mKnownRomanticCompositions.length; i++){
				MaxisTypes.serializeMaxisStringTo(mKnownRomanticCompositions[i], target);
			}
		}
		else target.addToFile(0);
		
		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(">\n");
		
		if(mKnownCompositions != null) {
			out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MKNOWNCOMPOSITIONS));
			for(int i = 0; i < mKnownCompositions.length; i++){
				out.write(indent + String.format("\t\t<ArrayMember Value=\"%s\"/>\n", mKnownCompositions[i]));
			}
			out.write(indent + "\t</Array>\n");	
		}
		if(mKnownRomanticCompositions != null) {
			out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MKNOWNROMANTICCOMPOSITIONS));
			for(int i = 0; i < mKnownRomanticCompositions.length; i++){
				out.write(indent + String.format("\t\t<ArrayMember Value=\"%s\"/>\n", mKnownRomanticCompositions[i]));
			}
			out.write(indent + "\t</Array>\n");	
		}
		
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addStringArray(mKnownCompositions, PSID_MKNOWNCOMPOSITIONS);
		ps.addStringArray(mKnownRomanticCompositions, PSID_MKNOWNROMANTICCOMPOSITIONS);
	}
	
}
