/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Tue, 31 Dec 2024 21:11:27 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 18:51

package waffleoRai_Containers.maxis.ts3.savefmts.career;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class AcademicDegree extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Academics.AcademicDegree

	public static final int PSID_MACADEMICDEGREENAME = 0x057BD698;
	public static final int PSID_MEARNEDNUMBEROFCREDITSTOWARDDEGREE = 0x4E5BE723;
	public static final int PSID_MGENERALSBONUSCREDITSTOWARDDEGREE = 0x7A733B41;
	public static final int PSID_MSUATBONUSCREDITSTOWARDDEGREE = 0xB8A2C66A;
	public static final int PSID_MGPA = 0x78CB83C2;
	public static final int PSID_MISVALEDICTORIAN = 0x589F3C2B;
	public static final int PSID_MREWARDSGRANTED = 0xD2A12AD5;

	private static final String XMLKEY_MACADEMICDEGREENAME = "AcademicDegreeName";
	private static final String XMLKEY_MEARNEDNUMBEROFCREDITSTOWARDDEGREE = "EarnedNumberOfCreditsTowardDegree";
	private static final String XMLKEY_MGENERALSBONUSCREDITSTOWARDDEGREE = "GeneralsBonusCreditsTowardDegree";
	private static final String XMLKEY_MSUATBONUSCREDITSTOWARDDEGREE = "SUATBonusCreditsTowardDegree";
	private static final String XMLKEY_MGPA = "Gpa";
	private static final String XMLKEY_MISVALEDICTORIAN = "IsValedictorian";
	private static final String XMLKEY_MREWARDSGRANTED = "RewardsGranted";

	public long mAcademicDegreeName;
	public int mEarnedNumberOfCreditsTowardDegree;
	public int mGeneralsBonusCreditsTowardDegree;
	public int mSUATBonusCreditsTowardDegree;
	public float mGpa;
	public boolean mIsValedictorian;
	public boolean mRewardsGranted;

	public AcademicDegree() {
		xmlNodeName = "AcademicDegree";
		baseSize = 26;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		mAcademicDegreeName = dat.nextLong();
		mEarnedNumberOfCreditsTowardDegree = dat.nextInt();
		mGeneralsBonusCreditsTowardDegree = dat.nextInt();
		mSUATBonusCreditsTowardDegree = dat.nextInt();
		mGpa = Float.intBitsToFloat(dat.nextInt());
		mIsValedictorian = MaxisTypes.readBinaryBool(dat);
		mRewardsGranted = MaxisTypes.readBinaryBool(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_MACADEMICDEGREENAME);
		if(aval != null) mAcademicDegreeName = AcademicDegreeNames.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MEARNEDNUMBEROFCREDITSTOWARDDEGREE);
		if(aval != null) mEarnedNumberOfCreditsTowardDegree = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MGENERALSBONUSCREDITSTOWARDDEGREE);
		if(aval != null) mGeneralsBonusCreditsTowardDegree = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MSUATBONUSCREDITSTOWARDDEGREE);
		if(aval != null) mSUATBonusCreditsTowardDegree = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MGPA);
		if(aval != null) mGpa = (float)Double.parseDouble(aval);
		aval = xml_element.getAttribute(XMLKEY_MISVALEDICTORIAN);
		if(aval != null) mIsValedictorian = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MREWARDSGRANTED);
		if(aval != null) mRewardsGranted = Boolean.parseBoolean(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		mAcademicDegreeName = stream.getFieldAsLong(PSID_MACADEMICDEGREENAME);
		mEarnedNumberOfCreditsTowardDegree = stream.getFieldAsInt(PSID_MEARNEDNUMBEROFCREDITSTOWARDDEGREE);
		mGeneralsBonusCreditsTowardDegree = stream.getFieldAsInt(PSID_MGENERALSBONUSCREDITSTOWARDDEGREE);
		mSUATBonusCreditsTowardDegree = stream.getFieldAsInt(PSID_MSUATBONUSCREDITSTOWARDDEGREE);
		mGpa = stream.getFieldAsFloat(PSID_MGPA);
		mIsValedictorian = stream.getFieldAsBool(PSID_MISVALEDICTORIAN);
		mRewardsGranted = stream.getFieldAsBool(PSID_MREWARDSGRANTED);

		return true;
	}
	
	public static AcademicDegree readBinary(BufferReference dat) {
		if(dat == null) return null;
		AcademicDegree str = new AcademicDegree();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static AcademicDegree readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		AcademicDegree str = new AcademicDegree();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static AcademicDegree readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static AcademicDegree readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		AcademicDegree str = new AcademicDegree();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(mAcademicDegreeName);
		target.addToFile(mEarnedNumberOfCreditsTowardDegree);
		target.addToFile(mGeneralsBonusCreditsTowardDegree);
		target.addToFile(mSUATBonusCreditsTowardDegree);
		target.addToFile(Float.floatToRawIntBits(mGpa));
		MaxisTypes.writeBinaryBool(target, mIsValedictorian);
		MaxisTypes.writeBinaryBool(target, mRewardsGranted);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%s\"", XMLKEY_MACADEMICDEGREENAME, AcademicDegreeNames.stringFromValue(mAcademicDegreeName)));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MEARNEDNUMBEROFCREDITSTOWARDDEGREE, mEarnedNumberOfCreditsTowardDegree));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MGENERALSBONUSCREDITSTOWARDDEGREE, mGeneralsBonusCreditsTowardDegree));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MSUATBONUSCREDITSTOWARDDEGREE, mSUATBonusCreditsTowardDegree));
		out.write(String.format(" %s=\"%.3f\"", XMLKEY_MGPA, mGpa));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MISVALEDICTORIAN, mIsValedictorian));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MREWARDSGRANTED, mRewardsGranted));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		ps.addLong(mAcademicDegreeName, PSID_MACADEMICDEGREENAME);
		ps.addInt(mEarnedNumberOfCreditsTowardDegree, PSID_MEARNEDNUMBEROFCREDITSTOWARDDEGREE);
		ps.addInt(mGeneralsBonusCreditsTowardDegree, PSID_MGENERALSBONUSCREDITSTOWARDDEGREE);
		ps.addInt(mSUATBonusCreditsTowardDegree, PSID_MSUATBONUSCREDITSTOWARDDEGREE);
		ps.addFloat(mGpa, PSID_MGPA);
		ps.addBool(mIsValedictorian, PSID_MISVALEDICTORIAN);
		ps.addBool(mRewardsGranted, PSID_MREWARDSGRANTED);
	}
	
}
