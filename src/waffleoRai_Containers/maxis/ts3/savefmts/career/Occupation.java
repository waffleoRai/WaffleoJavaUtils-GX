/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Tue, 31 Dec 2024 21:11:27 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 19:09

package waffleoRai_Containers.maxis.ts3.savefmts.career;

import java.io.IOException;
import java.io.Writer;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Containers.maxis.ts3.savefmts.sim.CASAgeGenderFlags;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class Occupation extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Careers.Occupation
	
	public static final int PSID_BOSS = 0x097AB217;
	public static final int PSID_FORMERBOSS = 0x097AB224;
	public static final int PSID_MDATEHIREDTICKS = 0x097AB226;
	public static final int PSID_MAGEWHENJOBFIRSTSTARTED = 0x097AB227;
	public static final int PSID_MHIGHESTLEVELACHIEVEDVAL = 0x097AB228;
	public static final int PSID_MWHENCURLEVELSTARTEDTICKS = 0x097AB229;
	public static final int PSID_MSTAGENAME = 0x0CF5A3C9;

	private static final String XMLKEY_BOSS = "Boss";
	private static final String XMLKEY_FORMERBOSS = "FormerBoss";
	private static final String XMLKEY_MDATEHIREDTICKS = "DateHiredTicks";
	private static final String XMLKEY_MAGEWHENJOBFIRSTSTARTED = "AgeWhenJobFirstStarted";
	private static final String XMLKEY_MHIGHESTLEVELACHIEVEDVAL = "HighestLevelAchievedVal";
	private static final String XMLKEY_MWHENCURLEVELSTARTEDTICKS = "WhenCurLevelStartedTicks";
	private static final String XMLKEY_MSTAGENAME = "StageName";

	public long boss;
	public long formerBoss;
	public long mDateHiredTicks;
	public int mAgeWhenJobFirstStarted;
	public int mHighestLevelAchievedVal;
	public long mWhenCurLevelStartedTicks;
	public String mStageName;

	public Occupation() {
		xmlNodeName = "Occupation";
		baseSize = 44;
	}
	

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		boss = dat.nextLong();
		formerBoss = dat.nextLong();
		mDateHiredTicks = dat.nextLong();
		mAgeWhenJobFirstStarted = dat.nextInt();
		mHighestLevelAchievedVal = dat.nextInt();
		mWhenCurLevelStartedTicks = dat.nextLong();
		mStageName = MaxisTypes.readMaxisString(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		aval = xml_element.getAttribute(XMLKEY_BOSS);
		if(aval != null) boss = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_FORMERBOSS);
		if(aval != null) formerBoss = StringUtils.parseUnsignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MDATEHIREDTICKS);
		if(aval != null) mDateHiredTicks = StringUtils.parseSignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MAGEWHENJOBFIRSTSTARTED);
		if(aval != null) mAgeWhenJobFirstStarted = CASAgeGenderFlags.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MHIGHESTLEVELACHIEVEDVAL);
		if(aval != null) mHighestLevelAchievedVal = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MWHENCURLEVELSTARTEDTICKS);
		if(aval != null) mWhenCurLevelStartedTicks = StringUtils.parseSignedLong(aval);
		aval = xml_element.getAttribute(XMLKEY_MSTAGENAME);
		if(aval != null) mStageName = aval;

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		boss = stream.getFieldAsLong(PSID_BOSS);
		formerBoss = stream.getFieldAsLong(PSID_FORMERBOSS);
		mDateHiredTicks = stream.getFieldAsLong(PSID_MDATEHIREDTICKS);
		mAgeWhenJobFirstStarted = stream.getFieldAsInt(PSID_MAGEWHENJOBFIRSTSTARTED);
		mHighestLevelAchievedVal = stream.getFieldAsInt(PSID_MHIGHESTLEVELACHIEVEDVAL);
		mWhenCurLevelStartedTicks = stream.getFieldAsLong(PSID_MWHENCURLEVELSTARTEDTICKS);
		mStageName = stream.getFieldAsString(PSID_MSTAGENAME);

		return true;
	}
	
	public static Occupation readBinary(BufferReference dat) {
		if(dat == null) return null;
		Occupation str = new Occupation();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static Occupation readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		Occupation str = new Occupation();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static Occupation readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static Occupation readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		Occupation str = new Occupation();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += (mStageName.length() << 1);
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		target.addToFile(boss);
		target.addToFile(formerBoss);
		target.addToFile(mDateHiredTicks);
		target.addToFile(mAgeWhenJobFirstStarted);
		target.addToFile(mHighestLevelAchievedVal);
		target.addToFile(mWhenCurLevelStartedTicks);
		MaxisTypes.serializeMaxisStringTo( mStageName, target);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		if(boss != 0L) out.write(String.format(" %s=\"0x%016x\"", XMLKEY_BOSS, boss));
		if(formerBoss != 0L) out.write(String.format(" %s=\"0x%016x\"", XMLKEY_FORMERBOSS, formerBoss));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MDATEHIREDTICKS, mDateHiredTicks));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MAGEWHENJOBFIRSTSTARTED, CASAgeGenderFlags.stringFromValue(mAgeWhenJobFirstStarted)));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MHIGHESTLEVELACHIEVEDVAL, mHighestLevelAchievedVal));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MWHENCURLEVELSTARTEDTICKS, mWhenCurLevelStartedTicks));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MSTAGENAME, mStageName));
		out.write("/>\n");

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		if(boss != 0L) ps.addLong(boss, PSID_BOSS);
		if(formerBoss != 0L) ps.addLong(formerBoss, PSID_FORMERBOSS);
		ps.addLong(mDateHiredTicks, PSID_MDATEHIREDTICKS);
		ps.addInt(mAgeWhenJobFirstStarted, PSID_MAGEWHENJOBFIRSTSTARTED);
		ps.addInt(mHighestLevelAchievedVal, PSID_MHIGHESTLEVELACHIEVEDVAL);
		ps.addLong(mWhenCurLevelStartedTicks, PSID_MWHENCURLEVELSTARTEDTICKS);
		ps.addString(mStageName, PSID_MSTAGENAME);
	}
	
}
