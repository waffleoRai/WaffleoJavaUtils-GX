/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Tue, 31 Dec 2024 21:11:27 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 19:04

package waffleoRai_Containers.maxis.ts3.savefmts.career;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class CareerManager extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Careers.CareerManager

	public static final int PSID_OCCUPATION = 0x139B80D1;
	public static final int PSID_QUITCAREERSCOUNT = 0x0B8E5462;
	public static final int PSID_QUITCAREERS = 0x1F4CE7A9;
	public static final int PSID_SCHOOL = 0xDA42E1C9;
	public static final int PSID_RETIREDCAREER = 0x6B334D3D;
	public static final int PSID_MCAREERREWARDPROGRESSCOUNT = 0x09E6E0FD;
	public static final int PSID_MCAREERREWARDPROGRESS = 0x00000000;

	private static final String XMLKEY_OCCUPATION = "Occupation";
	private static final String XMLKEY_QUITCAREERSCOUNT = "QuitCareersCount";
	private static final String XMLKEY_QUITCAREERS = "QuitCareers";
	private static final String XMLKEY_SCHOOL = "School";
	private static final String XMLKEY_RETIREDCAREER = "RetiredCareer";
	private static final String XMLKEY_MCAREERREWARDPROGRESSCOUNT = "CareerRewardProgressCount";
	private static final String XMLKEY_MCAREERREWARDPROGRESS = "CareerRewardProgress";

	public JobContent occupation;
	public int quitCareersCount;
	public ArrayList<JobContent> quitCareers = new ArrayList<JobContent>();
	public JobContent school;
	public JobContent retiredCareer;
	public int mCareerRewardProgressCount;
	public ArrayList<CareerRewardProgress> mCareerRewardProgress = new ArrayList<CareerRewardProgress>();

	public CareerManager() {
		xmlNodeName = "CareerManager";
		baseSize = 8;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		occupation = JobContent.readBinary(dat);
		quitCareersCount = dat.nextInt();
		quitCareers.ensureCapacity(quitCareersCount);
		for(int i = 0; i < quitCareersCount; i++){
			JobContent pastCareer = JobContent.readBinary(dat);
			if(pastCareer != null) quitCareers.add(pastCareer);
		}
		school = JobContent.readBinary(dat);
		retiredCareer = JobContent.readBinary(dat);
		mCareerRewardProgressCount = dat.nextInt();
		mCareerRewardProgress.ensureCapacity(mCareerRewardProgressCount);
		for(int i = 0; i < mCareerRewardProgressCount; i++){
			CareerRewardProgress careerRewardProgress = CareerRewardProgress.readBinary(dat);
			if(careerRewardProgress != null) mCareerRewardProgress.add(careerRewardProgress);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "JobContent", "VarName", XMLKEY_OCCUPATION);
		if(child != null) occupation = JobContent.readXMLNode(child);
		aval = xml_element.getAttribute(XMLKEY_QUITCAREERSCOUNT);
		if(aval != null) quitCareersCount = StringUtils.parseUnsignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_QUITCAREERS);
		if(child != null){
			quitCareers.ensureCapacity(quitCareersCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "JobContent");
			for(Element gc : gclist){
				quitCareers.add(JobContent.readXMLNode(gc));
			}
		}
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "JobContent", "VarName", XMLKEY_SCHOOL);
		if(child != null) school = JobContent.readXMLNode(child);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "JobContent", "VarName", XMLKEY_RETIREDCAREER);
		if(child != null) retiredCareer = JobContent.readXMLNode(child);
		aval = xml_element.getAttribute(XMLKEY_MCAREERREWARDPROGRESSCOUNT);
		if(aval != null) mCareerRewardProgressCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MCAREERREWARDPROGRESS);
		if(child != null){
			mCareerRewardProgress.ensureCapacity(mCareerRewardProgressCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "CareerRewardProgress");
			for(Element gc : gclist){
				mCareerRewardProgress.add(CareerRewardProgress.readXMLNode(gc));
			}
		}

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		occupation = JobContent.readPropertyStream(stream.getChildStream(PSID_OCCUPATION));
		quitCareersCount = stream.getFieldAsInt(PSID_QUITCAREERSCOUNT);
		quitCareers.ensureCapacity(quitCareersCount);
		for(int i = 0; i < quitCareersCount; i++){
			JobContent pastCareer = JobContent.readPropertyStream(stream.getChildStream(PSID_QUITCAREERS+i));
			if(pastCareer != null) quitCareers.add(pastCareer);
		}
		school = JobContent.readPropertyStream(stream.getChildStream(PSID_SCHOOL));
		retiredCareer = JobContent.readPropertyStream(stream.getChildStream(PSID_RETIREDCAREER));
		mCareerRewardProgressCount = stream.getFieldAsInt(PSID_MCAREERREWARDPROGRESSCOUNT);
		mCareerRewardProgress.ensureCapacity(mCareerRewardProgressCount);
		for(int i = 0; i < mCareerRewardProgressCount; i++){
			CareerRewardProgress careerRewardProgress = CareerRewardProgress.readPropertyStream(stream.getChildStream(PSID_MCAREERREWARDPROGRESS+i));
			if(careerRewardProgress != null) mCareerRewardProgress.add(careerRewardProgress);
		}

		return true;
	}
	
	public static CareerManager readBinary(BufferReference dat) {
		if(dat == null) return null;
		CareerManager str = new CareerManager();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static CareerManager readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		CareerManager str = new CareerManager();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static CareerManager readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static CareerManager readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		CareerManager str = new CareerManager();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		size += occupation.getBinarySize();
		for(JobContent pastCareer : quitCareers){
			size += pastCareer.getBinarySize();
		}
		size += school.getBinarySize();
		size += retiredCareer.getBinarySize();
		for(CareerRewardProgress careerRewardProgress : mCareerRewardProgress){
			size += careerRewardProgress.getBinarySize();
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		quitCareersCount = quitCareers.size();
		mCareerRewardProgressCount = mCareerRewardProgress.size();
		occupation.writeBinaryTo(target);
		target.addToFile(quitCareersCount);
		for(JobContent pastCareer : quitCareers){
			pastCareer.writeBinaryTo(target);
		}
		school.writeBinaryTo(target);
		retiredCareer.writeBinaryTo(target);
		target.addToFile(mCareerRewardProgressCount);
		for(CareerRewardProgress careerRewardProgress : mCareerRewardProgress){
			careerRewardProgress.writeBinaryTo(target);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		quitCareersCount = quitCareers.size();
		mCareerRewardProgressCount = mCareerRewardProgress.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_QUITCAREERSCOUNT, quitCareersCount));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MCAREERREWARDPROGRESSCOUNT, mCareerRewardProgressCount));
		out.write(">\n");
		occupation.writeXMLNode(out, indent + "\t", XMLKEY_OCCUPATION);
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_QUITCAREERS));
		for(JobContent pastCareer : quitCareers){
			pastCareer.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		school.writeXMLNode(out, indent + "\t", XMLKEY_SCHOOL);
		retiredCareer.writeXMLNode(out, indent + "\t", XMLKEY_RETIREDCAREER);
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_MCAREERREWARDPROGRESS));
		for(CareerRewardProgress careerRewardProgress : mCareerRewardProgress){
			careerRewardProgress.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		quitCareersCount = quitCareers.size();
		mCareerRewardProgressCount = mCareerRewardProgress.size();
		int i = 0;
		ps.addChildStream(occupation.toPropertyStream(byte_order, verFieldSize), PSID_OCCUPATION);
		ps.addInt(quitCareersCount, PSID_QUITCAREERSCOUNT);
		i = 0;
		for(JobContent pastCareer : quitCareers){
			ps.addChildStream(pastCareer.toPropertyStream(byte_order, verFieldSize), PSID_QUITCAREERS+i);
			i++;
		}
		ps.addChildStream(school.toPropertyStream(byte_order, verFieldSize), PSID_SCHOOL);
		ps.addChildStream(retiredCareer.toPropertyStream(byte_order, verFieldSize), PSID_RETIREDCAREER);
		ps.addInt(mCareerRewardProgressCount, PSID_MCAREERREWARDPROGRESSCOUNT);
		i = 0;
		for(CareerRewardProgress careerRewardProgress : mCareerRewardProgress){
			ps.addChildStream(careerRewardProgress.toPropertyStream(byte_order, verFieldSize), PSID_MCAREERREWARDPROGRESS+i);
			i++;
		}
	}
	
}
