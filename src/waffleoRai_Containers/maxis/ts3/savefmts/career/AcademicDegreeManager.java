/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Tue, 31 Dec 2024 21:11:27 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 18:57

package waffleoRai_Containers.maxis.ts3.savefmts.career;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Containers.maxis.MaxisPropertyStream;
import waffleoRai_Containers.maxis.MaxisTypes;
import waffleoRai_Containers.maxis.ts3.savefmts.TS3Saveable;
import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class AcademicDegreeManager extends TS3Saveable{
//TS3 Script: Sims3.Gameplay.Academics.AcademicDegreeManager
	
	public static final int LEN_SUATSCORES = 6;

	public static final int PSID_ACADEMICDEGREECOUNT = 0x0E5478FC;
	public static final int PSID_MVALUES = 0x0E5478FC;
	public static final int PSID_MLASTSTUDIEDDEGREE = 0x0E5EEEA5;
	public static final int PSID_ENROLLEDDEGREE = 0x0E5EEEA3;
	public static final int PSID_COURSELOAD = 0x0E5EEEB4;
	public static final int PSID_MFINACIALAIDTYPE = 0x0E5EEEB7;
	public static final int PSID_MLASTTIMEATUNIVERSITY = 0xF09B5FD5;
	public static final int PSID_ONPROBATION = 0x5FF913C6;
	public static final int PSID_MSUATSCORES = 0x3AE296D7;
	public static final int PSID_MHASTRIGGEREDFIRSTCLASSBUFF = 0x1117A4C6;
	public static final int PSID_MHASTRIGGEREDFIRSTLECTUREBUFF = 0x252F24A0;

	private static final String XMLKEY_ACADEMICDEGREECOUNT = "AcademicDegreeCount";
	private static final String XMLKEY_MVALUES = "Values";
	private static final String XMLKEY_MLASTSTUDIEDDEGREE = "LastStudiedDegree";
	private static final String XMLKEY_ENROLLEDDEGREE = "EnrolledDegree";
	private static final String XMLKEY_COURSELOAD = "CourseLoad";
	private static final String XMLKEY_MFINACIALAIDTYPE = "FinacialAidType";
	private static final String XMLKEY_MLASTTIMEATUNIVERSITY = "LastTimeAtUniversity";
	private static final String XMLKEY_ONPROBATION = "OnProbation";
	private static final String XMLKEY_MSUATSCORES = "SUATScores";
	private static final String XMLKEY_MHASTRIGGEREDFIRSTCLASSBUFF = "HasTriggeredFirstClassBuff";
	private static final String XMLKEY_MHASTRIGGEREDFIRSTLECTUREBUFF = "HasTriggeredFirstLectureBuff";

	public int academicDegreeCount;
	public ArrayList<AcademicDegree> mValues = new ArrayList<AcademicDegree>();
	public long mLastStudiedDegree;
	public long enrolledDegree;
	public int courseLoad;
	public int mFinacialAidType;
	public int mLastTimeAtUniversity;
	public boolean onProbation;
	public int[] mSUATScores;
	public boolean mHasTriggeredFirstClassBuff;
	public boolean mHasTriggeredFirstLectureBuff;

	public AcademicDegreeManager() {
		xmlNodeName = "AcademicDegreeManager";
		baseSize = 39;
	}
	
	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		academicDegreeCount = dat.nextInt();
		mValues.ensureCapacity(academicDegreeCount);
		for(int i = 0; i < academicDegreeCount; i++){
			AcademicDegree academicDegree = AcademicDegree.readBinary(dat);
			if(academicDegree != null) mValues.add(academicDegree);
		}
		mLastStudiedDegree = dat.nextLong();
		enrolledDegree = dat.nextLong();
		courseLoad = dat.nextInt();
		mFinacialAidType = dat.nextInt();
		mLastTimeAtUniversity = dat.nextInt();
		onProbation = MaxisTypes.readBinaryBool(dat);
		mSUATScores = new int[LEN_SUATSCORES];
		for(int i = 0; i < LEN_SUATSCORES; i++){
			mSUATScores[i] = dat.nextInt();
		}
		mHasTriggeredFirstClassBuff = MaxisTypes.readBinaryBool(dat);
		mHasTriggeredFirstLectureBuff = MaxisTypes.readBinaryBool(dat);

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY_ACADEMICDEGREECOUNT);
		if(aval != null) academicDegreeCount = StringUtils.parseUnsignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_MVALUES);
		if(child != null){
			mValues.ensureCapacity(academicDegreeCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "AcademicDegree");
			for(Element gc : gclist){
				mValues.add(AcademicDegree.readXMLNode(gc));
			}
		}
		aval = xml_element.getAttribute(XMLKEY_MLASTSTUDIEDDEGREE);
		if(aval != null) mLastStudiedDegree = AcademicDegreeNames.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_ENROLLEDDEGREE);
		if(aval != null) enrolledDegree = AcademicDegreeNames.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_COURSELOAD);
		if(aval != null) courseLoad = StringUtils.parseUnsignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_MFINACIALAIDTYPE);
		if(aval != null) mFinacialAidType = FinancialAidtype.valueFromString(aval);
		aval = xml_element.getAttribute(XMLKEY_MLASTTIMEATUNIVERSITY);
		if(aval != null) mLastTimeAtUniversity = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_ONPROBATION);
		if(aval != null) onProbation = Boolean.parseBoolean(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "Array", "VarName", XMLKEY_MSUATSCORES);
		if(child != null){
			mSUATScores = new int[LEN_SUATSCORES];
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "ArrayMember");
			int i = 0;
			for(Element gc : gclist){
				aval = gc.getAttribute("Value");
				if(aval != null) mSUATScores[i] = StringUtils.parseUnsignedInt(aval);
				i++;
			}
		}
		aval = xml_element.getAttribute(XMLKEY_MHASTRIGGEREDFIRSTCLASSBUFF);
		if(aval != null) mHasTriggeredFirstClassBuff = Boolean.parseBoolean(aval);
		aval = xml_element.getAttribute(XMLKEY_MHASTRIGGEREDFIRSTLECTUREBUFF);
		if(aval != null) mHasTriggeredFirstLectureBuff = Boolean.parseBoolean(aval);

		return true;
	}
	
	protected boolean readPropertyStream_internal(MaxisPropertyStream stream) {
		if(stream == null) return false;
		
		academicDegreeCount = stream.getFieldAsInt(PSID_ACADEMICDEGREECOUNT);
		mValues.ensureCapacity(academicDegreeCount);
		for(int i = 0; i < academicDegreeCount; i++){
			AcademicDegree academicDegree = AcademicDegree.readPropertyStream(stream.getChildStream(PSID_MVALUES+i));
			if(academicDegree != null) mValues.add(academicDegree);
		}
		mLastStudiedDegree = stream.getFieldAsLong(PSID_MLASTSTUDIEDDEGREE);
		enrolledDegree = stream.getFieldAsLong(PSID_ENROLLEDDEGREE);
		courseLoad = stream.getFieldAsInt(PSID_COURSELOAD);
		mFinacialAidType = stream.getFieldAsInt(PSID_MFINACIALAIDTYPE);
		mLastTimeAtUniversity = stream.getFieldAsInt(PSID_MLASTTIMEATUNIVERSITY);
		onProbation = stream.getFieldAsBool(PSID_ONPROBATION);
		mSUATScores = stream.getFieldAsIntArray(PSID_MSUATSCORES);
		mHasTriggeredFirstClassBuff = stream.getFieldAsBool(PSID_MHASTRIGGEREDFIRSTCLASSBUFF);
		mHasTriggeredFirstLectureBuff = stream.getFieldAsBool(PSID_MHASTRIGGEREDFIRSTLECTUREBUFF);

		return true;
	}
	
	public static AcademicDegreeManager readBinary(BufferReference dat) {
		if(dat == null) return null;
		AcademicDegreeManager str = new AcademicDegreeManager();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static AcademicDegreeManager readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		AcademicDegreeManager str = new AcademicDegreeManager();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	public static AcademicDegreeManager readPropertyStream(BufferReference dat, boolean byteOrder, int verFieldSize) {
		if(dat == null) return null;
		MaxisPropertyStream stream = MaxisPropertyStream.openForRead(dat, byteOrder, verFieldSize);
		return readPropertyStream(stream);
	}
	
	public static AcademicDegreeManager readPropertyStream(MaxisPropertyStream stream) {
		if(stream == null) return null;
		AcademicDegreeManager str = new AcademicDegreeManager();
		if(!str.readPropertyStream_internal(stream));
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		int size = baseSize;
		for(AcademicDegree academicDegree : mValues){
			size += academicDegree.getBinarySize();
		}
		if(mSUATScores != null){
			size += (mSUATScores.length << 2);
		}
		return size;
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		academicDegreeCount = mValues.size();
		target.addToFile(academicDegreeCount);
		for(AcademicDegree academicDegree : mValues){
			academicDegree.writeBinaryTo(target);
		}
		target.addToFile(mLastStudiedDegree);
		target.addToFile(enrolledDegree);
		target.addToFile(courseLoad);
		target.addToFile(mFinacialAidType);
		target.addToFile(mLastTimeAtUniversity);
		MaxisTypes.writeBinaryBool(target, onProbation);
		for(int i = 0; i < LEN_SUATSCORES; i++){
			target.addToFile(mSUATScores[i]);
		}
		MaxisTypes.writeBinaryBool(target, mHasTriggeredFirstClassBuff);
		MaxisTypes.writeBinaryBool(target, mHasTriggeredFirstLectureBuff);

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		academicDegreeCount = mValues.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_ACADEMICDEGREECOUNT, academicDegreeCount));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MLASTSTUDIEDDEGREE, AcademicDegreeNames.stringFromValue(mLastStudiedDegree)));
		out.write(String.format(" %s=\"%s\"", XMLKEY_ENROLLEDDEGREE, AcademicDegreeNames.stringFromValue(enrolledDegree)));
		out.write(String.format(" %s=\"0x%08x\"", XMLKEY_COURSELOAD, courseLoad));
		out.write(String.format(" %s=\"%s\"", XMLKEY_MFINACIALAIDTYPE, FinancialAidtype.stringFromValue(mFinacialAidType)));
		out.write(String.format(" %s=\"%d\"", XMLKEY_MLASTTIMEATUNIVERSITY, mLastTimeAtUniversity));
		out.write(String.format(" %s=\"%b\"", XMLKEY_ONPROBATION, onProbation));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MHASTRIGGEREDFIRSTCLASSBUFF, mHasTriggeredFirstClassBuff));
		out.write(String.format(" %s=\"%b\"", XMLKEY_MHASTRIGGEREDFIRSTLECTUREBUFF, mHasTriggeredFirstLectureBuff));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_MVALUES));
		for(AcademicDegree academicDegree : mValues){
			academicDegree.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		if(mSUATScores != null){
			out.write(indent + String.format("\t<Array VarName=\"%s\">\n", XMLKEY_MSUATSCORES));
			for(int i = 0; i < LEN_SUATSCORES; i++){
				out.write(indent + String.format("\t\t<ArrayMember Value=\"0x%08x\"/>\n", mSUATScores[i]));
			}
			out.write(indent + "\t</Array>\n");
		}
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

	public void addToPropertyStream(MaxisPropertyStream ps) {	
		if(ps == null) return;
		boolean byte_order = ps.getByteOrder();
		int verFieldSize = ps.getVersionFieldSize();
		
		academicDegreeCount = mValues.size();
		int i = 0;
		ps.addInt(academicDegreeCount, PSID_ACADEMICDEGREECOUNT);
		i = 0;
		for(AcademicDegree academicDegree : mValues){
			ps.addChildStream(academicDegree.toPropertyStream(byte_order, verFieldSize), PSID_MVALUES+i);
			i++;
		}
		ps.addLong(mLastStudiedDegree, PSID_MLASTSTUDIEDDEGREE);
		ps.addLong(enrolledDegree, PSID_ENROLLEDDEGREE);
		ps.addInt(courseLoad, PSID_COURSELOAD);
		ps.addInt(mFinacialAidType, PSID_MFINACIALAIDTYPE);
		ps.addInt(mLastTimeAtUniversity, PSID_MLASTTIMEATUNIVERSITY);
		ps.addBool(onProbation, PSID_ONPROBATION);
		ps.addIntArray(mSUATScores, PSID_MSUATSCORES);
		ps.addBool(mHasTriggeredFirstClassBuff, PSID_MHASTRIGGEREDFIRSTCLASSBUFF);
		ps.addBool(mHasTriggeredFirstLectureBuff, PSID_MHASTRIGGEREDFIRSTLECTUREBUFF);
	}
	
}
