/*-----------------------------------------------------
 * Autogenerated Java class from XML definition.
 * Created Wed, 1 Jan 2025 13:05:47 -0600
 *-----------------------------------------------------*/

//Last check pass: 2025/01/01 19:51

package waffleoRai_Containers.maxis.ts3.savefmts.pets;

import java.io.IOException;
import java.io.Writer;
import java.util.ArrayList;
import java.util.List;

import org.w3c.dom.Element;

import waffleoRai_Files.XMLReader;
import waffleoRai_Utils.BufferReference;
import waffleoRai_Utils.FileBuffer;
import waffleoRai_Utils.StringUtils;

public class PetReinforcementData {
//TS3 Script: Sims3.Gameplay.ActorSystems.PetReinforcementManager.PetReinforcementPropertyStreamWriter

	private static final String XMLKEY__RESERVED = "UnkValue";
	private static final String XMLKEY_RECORDCOUNT = "RecordCount";
	private static final String XMLKEY_RECORDS = "Records";

	public int unkValue;
	public int recordCount;
	public ArrayList<PetReinforcementRecord> records = new ArrayList<PetReinforcementRecord>();

	private String xmlNodeName = "PetReinforcementData";
	
	public PetReinforcementData() {
		//xmlNodeName = "PetReinforcementData";
		//baseSize = 8;
	}
	
	/*----- Inner Classes -----*/

	public static class PetReinforcementRecord{

		private static final String XMLKEY_KEY = "Key";
		private static final String XMLKEY_VALUE = "Value";

		public byte key;
		public float value;
		
		private String xmlNodeName = "PetReinforcementRecord";

		public PetReinforcementRecord() {
			//xmlNodeName = "PetReinforcementRecord";
			//baseSize = 5;
		}
		
		/*----- Read -----*/
		
		protected boolean readBinary_internal(BufferReference dat) {
			if(dat == null) return false;
			
			key = dat.nextByte();
			value = Float.intBitsToFloat(dat.nextInt());

			return true;
		}
		
		protected boolean readXMLNode_internal(Element xml_element) {
			if(xml_element == null) return false;
			String nn = xml_element.getNodeName();
			if(nn == null) return false;
			if(!nn.equals(xmlNodeName)) return false;
			
			String aval = null;
			aval = xml_element.getAttribute(XMLKEY_KEY);
			if(aval != null) key = TraitReinforcementAxis.valueFromString(aval);
			aval = xml_element.getAttribute(XMLKEY_VALUE);
			if(aval != null) value = (float)Double.parseDouble(aval);

			return true;
		}
		
		public static PetReinforcementRecord readBinary(BufferReference dat) {
			if(dat == null) return null;
			PetReinforcementRecord str = new PetReinforcementRecord();
			if(!str.readBinary_internal(dat)) return null;
			return str;
		}
		
		public static PetReinforcementRecord readXMLNode(Element xml_element) {
			if(xml_element == null) return null;
			PetReinforcementRecord str = new PetReinforcementRecord();
			if(!str.readXMLNode_internal(xml_element)) return null;
			return str;
		}
		
		/*----- Write -----*/
		
		public FileBuffer writeBinary(boolean byteOrder) {
			FileBuffer buff = new FileBuffer(5, byteOrder);
			writeBinaryTo(buff);
			return buff;
		}
		
		public int writeBinaryTo(FileBuffer target) {
			if(target == null) return 0;
			long stPos = target.getFileSize();
			
			target.addToFile(key);
			target.addToFile(Float.floatToRawIntBits(value));

			return (int)(target.getFileSize() - stPos);
		}
	
		public void writeXMLNode(Writer out, String indent) throws IOException {
			writeXMLNode(out, indent, null);
		}
		
		public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
			if(out == null) return;
			if(indent == null) indent = "";
			
			out.write(indent);
			out.write(String.format("<%s", xmlNodeName));
			if(varName != null){
				out.write(String.format(" VarName=\"%s\"", varName));
			}
			out.write(String.format(" %s=\"%s\"", XMLKEY_KEY, TraitReinforcementAxis.stringFromValue(key)));
			out.write(String.format(" %s=\"%.3f\"", XMLKEY_VALUE, value));
			out.write("/>\n");

		}

	}

	/*----- Read -----*/
	
	protected boolean readBinary_internal(BufferReference dat) {
		if(dat == null) return false;
		
		unkValue = dat.nextInt();
		recordCount = dat.nextInt();
		records.ensureCapacity(recordCount);
		for(int i = 0; i < recordCount; i++){
			PetReinforcementRecord record = PetReinforcementRecord.readBinary(dat);
			if(record != null) records.add(record);
		}

		return true;
	}
	
	protected boolean readXMLNode_internal(Element xml_element) {
		if(xml_element == null) return false;
		String nn = xml_element.getNodeName();
		if(nn == null) return false;
		if(!nn.equals(xmlNodeName)) return false;
		
		String aval = null;
		Element child = null;
		aval = xml_element.getAttribute(XMLKEY__RESERVED);
		if(aval != null) unkValue = StringUtils.parseSignedInt(aval);
		aval = xml_element.getAttribute(XMLKEY_RECORDCOUNT);
		if(aval != null) recordCount = StringUtils.parseSignedInt(aval);
		child = XMLReader.getFirstChildElementWithTagAndAttribute(xml_element, "List", "VarName", XMLKEY_RECORDS);
		if(child != null){
			records.ensureCapacity(recordCount);
			List<Element> gclist = XMLReader.getChildElementsWithTag(child, "PetReinforcementRecord");
			for(Element gc : gclist){
				records.add(PetReinforcementRecord.readXMLNode(gc));
			}
		}

		return true;
	}
	
	public static PetReinforcementData readBinary(BufferReference dat) {
		if(dat == null) return null;
		PetReinforcementData str = new PetReinforcementData();
		if(!str.readBinary_internal(dat)) return null;
		return str;
	}
	
	public static PetReinforcementData readXMLNode(Element xml_element) {
		if(xml_element == null) return null;
		PetReinforcementData str = new PetReinforcementData();
		if(!str.readXMLNode_internal(xml_element)) return null;
		return str;
	}
	
	/*----- Write -----*/
	
	public int getBinarySize() {
		return 8 + (5 * records.size());
	}
	
	public FileBuffer writeBinary(boolean byteOrder) {
		FileBuffer buff = new FileBuffer(getBinarySize(), byteOrder);
		writeBinaryTo(buff);
		return buff;
	}
	
	public int writeBinaryTo(FileBuffer target) {
		if(target == null) return 0;
		long stPos = target.getFileSize();
		
		recordCount = records.size();
		target.addToFile(unkValue);
		target.addToFile(recordCount);
		for(PetReinforcementRecord records : records){
			records.writeBinaryTo(target);
		}

		return (int)(target.getFileSize() - stPos);
	}

	public void writeXMLNode(Writer out, String indent) throws IOException {
		writeXMLNode(out, indent, null);
	}
	
	public void writeXMLNode(Writer out, String indent, String varName) throws IOException {
		if(out == null) return;
		if(indent == null) indent = "";
		
		recordCount = records.size();
		out.write(indent);
		out.write(String.format("<%s", xmlNodeName));
		if(varName != null){
			out.write(String.format(" VarName=\"%s\"", varName));
		}
		out.write(String.format(" %s=\"%d\"", XMLKEY__RESERVED, unkValue));
		out.write(String.format(" %s=\"%d\"", XMLKEY_RECORDCOUNT, recordCount));
		out.write(">\n");
		out.write(indent + "\t<List ");
		out.write(String.format(" VarName=\"%s\">\n", XMLKEY_RECORDS));
		for(PetReinforcementRecord records : records){
			records.writeXMLNode(out, indent + "\t\t", null);
		}
		out.write(indent + "\t</List>\n");
		out.write(indent);
		out.write(String.format("</%s>\n", xmlNodeName));

	}

}
